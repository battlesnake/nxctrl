cscope 15 $HOME/workspace/nxctrl -q 0000001815 0000273961
	@NXCTRL.c

21 
	~<uni°d.h
>

22 
	~<sys/°©.h
>

23 
	~<sys/ty≥s.h
>

24 
	~<f˙é.h
>

25 
	~<sys/mm™.h
>

26 
	~<°dio.h
>

27 
	~<°rög.h
>

28 
	~<sig«l.h
>

29 
	~<löux/•i/•idev.h
>

30 
	~<löux/ty≥s.h
>

31 
	~<sys/io˘l.h
>

32 
	~<î∫o.h
>

34 
	~<NXCTRL.h
>

35 
	~"NXCTRL_¥iv©e.h
"

37 
NXCTRL_INT32
 
	g__hMem
 = 
NULL
;

39 vﬁ©ûê
NXCTRL_VOID
 *
	g__CM_PER_ADDR
 = 
NULL
;

40 vﬁ©ûê
NXCTRL_VOID
 *
	g__CM_WKUP_ADDR
 = 
NULL
;

41 vﬁ©ûê
NXCTRL_VOID
 *
	g__PRM_PER_ADDR
 = 
NULL
;

42 vﬁ©ûê
NXCTRL_VOID
 *
	g__GPIO0_ADDR
 = 
NULL
;

43 vﬁ©ûê
NXCTRL_VOID
 *
	g__GPIO1_ADDR
 = 
NULL
;

44 vﬁ©ûê
NXCTRL_VOID
 *
	g__GPIO2_ADDR
 = 
NULL
;

45 vﬁ©ûê
NXCTRL_VOID
 *
	g__GPIO3_ADDR
 = 
NULL
;

46 vﬁ©ûê
NXCTRL_VOID
 *
	g__CTRL_ADDR
 = 
NULL
;

47 vﬁ©ûê
NXCTRL_VOID
 *
	g__TSCADC_ADDR
 = 
NULL
;

48 vﬁ©ûê
NXCTRL_VOID
 *
	g__PWMSS0_ADDR
 = 
NULL
;

49 vﬁ©ûê
NXCTRL_VOID
 *
	g__PWMSS1_ADDR
 = 
NULL
;

50 vﬁ©ûê
NXCTRL_VOID
 *
	g__PWMSS2_ADDR
 = 
NULL
;

52 
NXCTRL_INT32
 *
	g__ΩnB™k
[2];

53 
NXCTRL_UINT32
 *
	g__ΩnPös
[2];

54 
NXCTRL_UINT32
 *
	g__ΩnCTRLs
[2];

55 
NXCTRL_INT32
 *
	g__ΩnPWMs
[2];

57 vﬁ©ûê
sig_©omic_t
 
	g__nRunFLAG
 = 1;

58 
NXCTRL_SIG_HANDLER
 
	g__p‚SIGINTHANDLER
 = 
NULL
;

59 
NXCTRL_SIG_HANDLER
 
	g__p‚SIGTERMHANDLER
 = 
NULL
;

61 
	g∫Exp‹ãdGPIO
[92];

62 
	gnExp‹ãdGPIO
 = 0;

65 
	$__SYSFSHACK
 (
nGPIO
, 
NXCTRL_BOOL
 
fOut
) {

66 
rchGPIO
[16];

67 
rchFN
[
BUFSIZ
];

68 
fd
 = 
	`›í
("/sys/˛ass/gpio/exp‹t", 
O_WRONLY
);

69 i‡(
fd
 == -1) {

70 
	`Ârötf
(
°dîr
, "__SYSFSHACK: cannot open /sys/class/gpio/export\n");

73 
	`•rötf
(
rchGPIO
, "%d", 
nGPIO
);

74 
	`wrôe
(
fd
, 
rchGPIO
, 
	`°æí
(rchGPIO));

75 
	`˛o£
(
fd
);

77 
∫Exp‹ãdGPIO
[
nExp‹ãdGPIO
++] = 
nGPIO
;

79 
	`•rötf
(
rchFN
, "/sys/˛ass/gpio/gpio%d/dúe˘i⁄", 
nGPIO
);

80 
fd
 = 
	`›í
(
rchFN
, 
O_WRONLY
);

81 i‡(
fd
 == -1) {

82 
	`Ârötf
(
°dîr
, "__SYSFSHACK: c™nŸ o≥¿%s\n", 
rchFN
);

86 
	`•rötf
(
rchGPIO
, "%s", 
fOut
 ? "out" : "in");

87 
	`wrôe
(
fd
, 
rchGPIO
, 
	`°æí
(rchGPIO));

88 
	`˛o£
(
fd
);

89 
	}
}

92 
	$__SYSFSHACKCLEAN
 () {

93 
i
;

94 
rchGPIO
[16];

95 
fd
 = 
	`›í
("/sys/˛ass/gpio/u√xp‹t", 
O_WRONLY
);

96 i‡(
fd
 == -1) {

97 
	`Ârötf
(
°dîr
, "__SYSFSHACKCLEAN: cannot open /sys/class/gpio/unexport\n");

100 
i
 = 0; i < 
nExp‹ãdGPIO
; i++) {

101 
	`•rötf
(
rchGPIO
, "%d", 
∫Exp‹ãdGPIO
[
i
]);

102 
	`wrôe
(
fd
, 
rchGPIO
, 
	`°æí
(rchGPIO));

104 
	`˛o£
(
fd
);

106 
nExp‹ãdGPIO
 = 0;

107 
	}
}

109 
NXCTRL_VOID


110 
	$NXCTRLSëSIGINTH™dÀr
 (
NXCTRL_SIG_HANDLER
 
p‚
) {

111 
__p‚SIGINTHANDLER
 = 
p‚
;

112 
	}
}

114 
NXCTRL_VOID


115 
	$NXCTRLSëSIGTERMH™dÀr
 (
NXCTRL_SIG_HANDLER
 
p‚
) {

116 
__p‚SIGTERMHANDLER
 = 
p‚
;

117 
	}
}

119 
NXCTRL_VOID


120 
	$NXCTRLExôLo›
 (
NXCTRL_VOID
) {

121 
__nRunFLAG
 = 0;

122 
	}
}

124 
NXCTRL_VOID


125 
	$__SIGINT_HANDLER
 (
NXCTRL_INT32
 
nSIG
) {

126 
	`Ârötf
(
°dîr
, "SIGINT!\n");

127 
	`NXCTRLExôLo›
();

128 i‡(
__p‚SIGINTHANDLER
)

129 
	`__p‚SIGINTHANDLER
();

130 
	}
}

132 
NXCTRL_VOID


133 
	$__SIGTERM_HANDLER
 (
NXCTRL_INT32
 
nSIG
) {

134 
	`Ârötf
(
°dîr
, "SIGTERM!\n");

135 
	`NXCTRLExôLo›
();

136 i‡(
__p‚SIGTERMHANDLER
)

137 
	`__p‚SIGTERMHANDLER
();

138 
	}
}

140 
NXCTRL_INT32


141 
	$NXCTRLMaö
 (
NXCTRL_VOID
) {

142 
NXCTRL_VOID
 
	`NXCTRLSëup
 (NXCTRL_VOID);

143 
NXCTRL_VOID
 
	`NXCTRLLo›
 (NXCTRL_VOID);

145 
	`sig«l
(
SIGINT
, 
__SIGINT_HANDLER
);

146 
	`sig«l
(
SIGTERM
, 
__SIGTERM_HANDLER
);

148 i‡(!
	`NXCTRLO≥n
())

150 i‡(!
	`NXCTRLTSCADCO≥n
())

152 i‡(!
	`NXCTRLPWMSSO≥n
())

155 
	`NXCTRLSëup
();

156 
__nRunFLAG
Ë
	`NXCTRLLo›
();

158 
	`NXCTRLPWMSSClo£
();

159 
	`NXCTRLTSCADCClo£
();

160 
	`NXCTRLClo£
();

162 
	`__SYSFSHACKCLEAN
();

165 
	}
}

167 
NXCTRL_VOID


168 
	$__NXCTRLM≠B™kPöCTRLD©a
 (
NXCTRL_VOID
) {

169 
__ΩnB™k
[0] = 
∫P8B™k
;

170 
__ΩnB™k
[1] = 
∫P9B™k
;

171 
__ΩnPös
[0] = 
∫P8Pös
;

172 
__ΩnPös
[1] = 
∫P9Pös
;

173 
__ΩnCTRLs
[0] = 
∫P8CTRLs
;

174 
__ΩnCTRLs
[1] = 
∫P9CTRLs
;

175 
__ΩnPWMs
[0] = 
∫P8PWMs
;

176 
__ΩnPWMs
[1] = 
∫P9PWMs
;

177 
	}
}

179 
	#__MMAP
(
v
,
s
,
addr
,
size
Ëv = 
	`mm≠
(0,size,
PROT_READ
|
PROT_WRITE
,
MAP_SHARED
,
__hMem
,addr); i‡(v =
MAP_FAILED
Ë{
	`Ârötf
(
°dîr
, "NXCTRLO≥n: %†mm≠ faûed\n", s);  
NXCTRL_FALSE
;}

	)

181 
NXCTRL_BOOL


182 
	$NXCTRLO≥n
 (
NXCTRL_VOID
) {

183 i‡(
__hMem
) {

184 
	`Ârötf
(
°dîr
, "NXCTRLOpen: memory isálready mapped\n");

185  
NXCTRL_FALSE
;

188 i‡(
	`gëuid
()) {

189 
	`Ârötf
(
°dîr
, "NXCTRLOpen:ÑootÖriliegeÑequired\n");

190  
NXCTRL_FALSE
;

193 
	`__NXCTRLM≠B™kPöCTRLD©a
();

195 
__hMem
 = 
	`›í
("/dev/mem", 
O_RDWR
);

196 i‡(
__hMem
 == -1) {

197 
	`Ârötf
(
°dîr
, "NXCTRLOpen: cannot open /dev/mem\n");

198  
NXCTRL_FALSE
;

201 
	`__MMAP
(
__CM_PER_ADDR
, "CM_PER", 
CM_PER_REG_ADDR
, 
CM_PER_REG_SIZE
);

202 
__CM_WKUP_ADDR
 = 
__CM_PER_ADDR
 + 
CM_WKUP_REG_OFFSET
;

203 
__PRM_PER_ADDR
 = 
__CM_PER_ADDR
 + 
PRM_PER_REG_OFFSET
;

205 
	`__MMAP
(
__GPIO0_ADDR
, "GPIO0", 
GPIO0_REG_ADDR
, 
GPIO0_REG_SIZE
);

206 
	`__MMAP
(
__GPIO1_ADDR
, "GPIO1", 
GPIO1_REG_ADDR
, 
GPIO1_REG_SIZE
);

207 
	`__MMAP
(
__GPIO2_ADDR
, "GPIO2", 
GPIO2_REG_ADDR
, 
GPIO2_REG_SIZE
);

208 
	`__MMAP
(
__GPIO3_ADDR
, "GPIO3", 
GPIO3_REG_ADDR
, 
GPIO3_REG_SIZE
);

210 
	`__MMAP
(
__CTRL_ADDR
, "CONTROL", 
CONTROL_REG_ADDR
, 
CONTROL_REG_SIZE
);

212 
	`__MMAP
(
__TSCADC_ADDR
, "TSCADC", 
TSCADC_REG_ADDR
, 
TSCADC_REG_SIZE
);

214 
	`__MMAP
(
__PWMSS0_ADDR
, "PWMSS0", 
PWMSS0_REG_ADDR
, 
PWMSS0_REG_SIZE
);

215 
	`__MMAP
(
__PWMSS1_ADDR
, "PWMSS1", 
PWMSS1_REG_ADDR
, 
PWMSS1_REG_SIZE
);

216 
	`__MMAP
(
__PWMSS2_ADDR
, "PWMSS2", 
PWMSS2_REG_ADDR
, 
PWMSS2_REG_SIZE
);

219 
U32REG_CM_PER_L3S_CLKCTRL
 |
BIT1
;

220 
U32REG_CM_PER_L3_CLKSTCTRL
 |
BIT1
;

221 
U32REG_CM_PER_L3_INSTR_CLKCTRL
 |
BIT1
;

222 
U32REG_CM_PER_L3_CLKCTRL
 |
BIT1
;

223 
U32REG_CM_PER_OCPWP_L3_CLKSTCTRL
 |
BIT1
;

224 
U32REG_CM_PER_L4LS_CLKSTCTRL
 |
BIT1
;

225 
U32REG_CM_PER_L4LS_CLKCTRL
 |
BIT1
;

228 
	`ENABLE_GPIO0_CLK
(
NXCTRL_ON
); 
	`ENABLE_GPIO0_OPTFCLK
(NXCTRL_ON);

229 
	`ENABLE_GPIO1_CLK
(
NXCTRL_ON
); 
	`ENABLE_GPIO1_OPTFCLK
(NXCTRL_ON);

230 
	`ENABLE_GPIO2_CLK
(
NXCTRL_ON
); 
	`ENABLE_GPIO2_OPTFCLK
(NXCTRL_ON);

231 
	`ENABLE_GPIO3_CLK
(
NXCTRL_ON
); 
	`ENABLE_GPIO3_OPTFCLK
(NXCTRL_ON);

233 
U32REG_GPIO0_SYSCONFIG
 |
BIT3
;

234 
U32REG_GPIO1_SYSCONFIG
 |
BIT3
;

235 
U32REG_GPIO2_SYSCONFIG
 |
BIT3
;

236 
U32REG_GPIO3_SYSCONFIG
 |
BIT3
;

237 
U32REG_GPIO0_SYSCONFIG
 &~
BIT4
;

238 
U32REG_GPIO1_SYSCONFIG
 &~
BIT4
;

239 
U32REG_GPIO2_SYSCONFIG
 &~
BIT4
;

240 
U32REG_GPIO3_SYSCONFIG
 &~
BIT4
;

243 
	`ENABLE_PRU_ICSS_CLK
(
NXCTRL_ON
);

244 
U32REG_RM_PER_RSTCTRL
 = 0x00000000;

245 
U32REG_PM_PER_PWRSTCTRL
 |
BIT30
|
BIT31
;

246 
U32REG_PM_PER_PWRSTCTRL
 |
BIT29
;

247 
U32REG_PM_PER_PWRSTCTRL
 |
BIT27
;

248 
U32REG_PM_PER_PWRSTCTRL
 |
BIT25
|
BIT26
;

249 
U32REG_PM_PER_PWRSTCTRL
 |
BIT7
;

250 
U32REG_PM_PER_PWRSTCTRL
 |
BIT5
|
BIT6
;

251 
U32REG_PM_PER_PWRSTCTRL
 &~
BIT4
;

252 
U32REG_PM_PER_PWRSTCTRL
 |
BIT3
;

253 
U32REG_PM_PER_PWRSTCTRL
 |
BIT0
|
BIT1
;

257  
NXCTRL_TRUE
;

258 
	}
}

260 
NXCTRL_VOID


261 
	$NXCTRLClo£
 (
NXCTRL_VOID
) {

262 i‡(
__hMem
 < 0) {

263 
	`Ârötf
(
°dîr
, "NXCTRLClose: memoryálready closed\n");

267 
	`munm≠
((
NXCTRL_VOID
 *)
__PWMSS2_ADDR
, 
PWMSS2_REG_SIZE
);

268 
	`munm≠
((
NXCTRL_VOID
 *)
__PWMSS1_ADDR
, 
PWMSS1_REG_SIZE
);

269 
	`munm≠
((
NXCTRL_VOID
 *)
__PWMSS1_ADDR
, 
PWMSS1_REG_SIZE
);

270 
	`munm≠
((
NXCTRL_VOID
 *)
__TSCADC_ADDR
, 
TSCADC_REG_SIZE
);

271 
	`munm≠
((
NXCTRL_VOID
 *)
__CTRL_ADDR
, 
CONTROL_REG_SIZE
);

272 
	`munm≠
((
NXCTRL_VOID
 *)
__GPIO3_ADDR
, 
GPIO3_REG_SIZE
);

273 
	`munm≠
((
NXCTRL_VOID
 *)
__GPIO2_ADDR
, 
GPIO2_REG_SIZE
);

274 
	`munm≠
((
NXCTRL_VOID
 *)
__GPIO1_ADDR
, 
GPIO1_REG_SIZE
);

275 
	`munm≠
((
NXCTRL_VOID
 *)
__GPIO0_ADDR
, 
GPIO0_REG_SIZE
);

276 
	`munm≠
((
NXCTRL_VOID
 *)
__CM_PER_ADDR
, 
CM_PER_REG_SIZE
);

278 
	`˛o£
(
__hMem
);

279 
	}
}

281 
NXCTRL_BOOL


282 
	$NXCTRLTSCADCO≥n
 (
NXCTRL_VOID
) {

283 
nFD
;

284 
rchPMX
[16];

285 
i
, 
nMUX
 = 0x20;

286 
nOff£t
 = 10;

287 
∫Off£ts
[10] = {

291 c⁄° *
pszFN
 = "/sys/kernel/nxpmx/mux";

293 
	`ENABLE_ADC_TSC_CLK
(
NXCTRL_ON
);

296 
i
 = 0; i < 
nOff£t
; i++) {

297 
nFD
 = 
	`›í
(
pszFN
, 
O_RDWR
);

298 i‡(
nFD
 == -1) {

299 
	`Ârötf
(
°dîr
, "NXCTRLTSCADCOpen: cannot openÖinmux file %s\n",

300 
pszFN
);

301  
NXCTRL_FALSE
;

304 
	`•rötf
(
rchPMX
, "0x%x:0x%x", 
∫Off£ts
[
i
], 
nMUX
);

305 
	`wrôe
(
nFD
, 
rchPMX
, 
	`°æí
(rchPMX));

307 
	`˛o£
(
nFD
);

310  
NXCTRL_TRUE
;

311 
	}
}

313 
NXCTRL_VOID


314 
	$NXCTRLTSCADCClo£
 (
NXCTRL_VOID
) {

315 
	`ENABLE_ADC_TSC_CLK
(
NXCTRL_OFF
);

316 
	}
}

318 
NXCTRL_BOOL


319 
	$NXCTRLPWMSSO≥n
 (
NXCTRL_VOID
) {

320 
nFD
;

321 
rchPMX
[16];

322 c⁄° *
pszFN
 = "/sys/kernel/nxpmx/mux";

324 
nFD
 = 
	`›í
(
pszFN
, 
O_RDWR
);

325 i‡(
nFD
 == -1) {

326 
	`Ârötf
(
°dîr
, "NXCTRLPWMSSOpen: cannot openÖinmux file %s\n",

327 
pszFN
);

328  
NXCTRL_FALSE
;

331 
	`•rötf
(
rchPMX
, "0x%x:0x%x", 
PWMSS_CTRL
, 0x7);

332 
	`wrôe
(
nFD
, 
rchPMX
, 
	`°æí
(rchPMX));

334 
	`˛o£
(
nFD
);

336 
	`ENABLE_EPWMSS0_CLK
(
NXCTRL_ON
);

337 
	`ENABLE_EPWMSS1_CLK
(
NXCTRL_ON
);

338 
	`ENABLE_EPWMSS2_CLK
(
NXCTRL_ON
);

340 
	`ENABLE_PWMSS0_CLK
(
NXCTRL_ON
);

341 
	`ENABLE_PWMSS1_CLK
(
NXCTRL_ON
);

342 
	`ENABLE_PWMSS2_CLK
(
NXCTRL_ON
);

344  
NXCTRL_TRUE
;

345 
	}
}

347 
NXCTRL_VOID


348 
	$NXCTRLPWMSSClo£
 (
NXCTRL_VOID
) {

349 
	`SET_EPWMSS0_AQCTLA
(
PWM_AQ_LOW
, PWM_AQ_LOW, PWM_AQ_LOW, PWM_AQ_LOW, PWM_AQ_LOW, PWM_AQ_LOW);

350 
	`SET_EPWMSS0_AQCTLB
(
PWM_AQ_LOW
, PWM_AQ_LOW, PWM_AQ_LOW, PWM_AQ_LOW, PWM_AQ_LOW, PWM_AQ_LOW);

351 
	`SET_EPWMSS1_AQCTLA
(
PWM_AQ_LOW
, PWM_AQ_LOW, PWM_AQ_LOW, PWM_AQ_LOW, PWM_AQ_LOW, PWM_AQ_LOW);

352 
	`SET_EPWMSS1_AQCTLB
(
PWM_AQ_LOW
, PWM_AQ_LOW, PWM_AQ_LOW, PWM_AQ_LOW, PWM_AQ_LOW, PWM_AQ_LOW);

353 
	`SET_EPWMSS2_AQCTLA
(
PWM_AQ_LOW
, PWM_AQ_LOW, PWM_AQ_LOW, PWM_AQ_LOW, PWM_AQ_LOW, PWM_AQ_LOW);

354 
	`SET_EPWMSS2_AQCTLB
(
PWM_AQ_LOW
, PWM_AQ_LOW, PWM_AQ_LOW, PWM_AQ_LOW, PWM_AQ_LOW, PWM_AQ_LOW);

356 
	`ENABLE_PWMSS0_CLK
(
NXCTRL_OFF
);

357 
	`ENABLE_PWMSS1_CLK
(
NXCTRL_OFF
);

358 
	`ENABLE_PWMSS2_CLK
(
NXCTRL_OFF
);

360 
	`ENABLE_EPWMSS0_CLK
(
NXCTRL_OFF
);

361 
	`ENABLE_EPWMSS1_CLK
(
NXCTRL_OFF
);

362 
	`ENABLE_EPWMSS2_CLK
(
NXCTRL_OFF
);

363 
	}
}

365 
	#GET_GPIO
(
nB™k
,
nPö
Ë
__ΩnB™k
[“B™k)][(“PöË- 1)]

	)

367 
NXCTRL_BOOL


368 
	$NXCTRLPöMux
 (
NXCTRL_BANK
 
nB™k
, 
NXCTRL_PIN
 
nPö
,

369 
NXCTRL_MODE
 
nMode
, 
NXCTRL_PULLTYPE
 
nPuŒUpDown
,

370 
NXCTRL_BOOL
 
bRe˚ivîA˘ive
) {

371 
rchFûeName
[1024];

372 
rchPMX
[16];

373 
nFD
, 
nOff£t
, 
nMUX
;

375 i‡(
nB™k
 !
NXCTRL_P8
 &&ÇB™k !
NXCTRL_P9
) {

376 
	`Ârötf
(
°dîr
, "NXCTRLPöMux: unsuµ‹ãd b™k - %d\n", 
nB™k
);

377  
NXCTRL_FALSE
;

380 i‡(
nPö
 < 1 ||ÇPin > 46) {

381 
	`Ârötf
(
°dîr
, "NXCTRLPöMux: unsuµ‹ãdÖöÇumbî - %d\n", 
nPö
);

382  
NXCTRL_FALSE
;

385 i‡(
	`GET_GPIO
(
nB™k
, 
nPö
Ë=
NAPIN
) {

386 
	`Ârötf
(
°dîr
, "NXCTRLPinMux: invalidÖinÖosition\n");

387  
NXCTRL_FALSE
;

390 
	`•rötf
(
rchFûeName
, "/sys/kernel/nxpmx/mux");

391 
nFD
 = 
	`›í
(
rchFûeName
, 
O_RDWR
);

392 i‡(
nFD
 < 0) {

393 
	`Ârötf
(
°dîr
, "NXCTRLPöMux: c™nŸ o≥¿pömux fûê%s\n", 
rchFûeName
);

394  
NXCTRL_FALSE
;

397 i‡(
nB™k
 =
NXCTRL_P8
)

398 
nOff£t
 = 
∫P8CTRLs
[
nPö
-1];

400 
nOff£t
 = 
∫P9CTRLs
[
nPö
-1];

402 
nMUX
 = 
nMode
;

404 i‡(
bRe˚ivîA˘ive
)

405 
nMUX
 |
BIT5
;

407 
nMUX
 &~
BIT5
;

409 
nPuŒUpDown
) {

410 
NXCTRL_PULLUP
:

411 
nMUX
 |
BIT4
;

413 
NXCTRL_PULLDN
:

414 
nMUX
 &~
BIT4
;

417 
nMUX
 |
BIT3
;

418 
nMUX
 &~
BIT4
;

422 
	`•rötf
(
rchPMX
, "0x%x:0x%x", 
nOff£t
, 
nMUX
);

423 
	`wrôe
(
nFD
, 
rchPMX
, 
	`°æí
(rchPMX));

425 
	`˛o£
(
nFD
);

427  
NXCTRL_TRUE
;

428 
	}
}

430 
NXCTRL_VOID


431 
	$__NXCTRLWrôeMode
 (
NXCTRL_BANK
 
nB™k
, 
NXCTRL_PIN
 
nPö
, 
NXCTRL_DIR
 
nDú
) {

432 
nDú
) {

433 
NXCTRL_OUTPUT
:

434 
	`NXCTRLPöMux
(
nB™k
, 
nPö
, 
NXCTRL_MODE7
, 
NXCTRL_NOPULL
, 
NXCTRL_OFF
);

436 
NXCTRL_INPUT
:

437 
	`NXCTRLPöMux
(
nB™k
, 
nPö
, 
NXCTRL_MODE7
, 
NXCTRL_NOPULL
, 
NXCTRL_ON
);

439 
NXCTRL_OUTPUT_PULLUP
:

440 
	`NXCTRLPöMux
(
nB™k
, 
nPö
, 
NXCTRL_MODE7
, 
NXCTRL_PULLUP
, 
NXCTRL_OFF
);

442 
NXCTRL_INPUT_PULLUP
:

443 
	`NXCTRLPöMux
(
nB™k
, 
nPö
, 
NXCTRL_MODE7
, 
NXCTRL_PULLUP
, 
NXCTRL_ON
);

445 
NXCTRL_OUTPUT_PULLDN
:

446 
	`NXCTRLPöMux
(
nB™k
, 
nPö
, 
NXCTRL_MODE7
, 
NXCTRL_PULLDN
, 
NXCTRL_OFF
);

448 
NXCTRL_INPUT_PULLDN
:

449 
	`NXCTRLPöMux
(
nB™k
, 
nPö
, 
NXCTRL_MODE7
, 
NXCTRL_PULLDN
, 
NXCTRL_ON
);

452 
	}
}

454 
	#GET_PIN
(
nB™k
,
nPö
Ë(
__ΩnPös
[“B™k)][(“PöË- 1)])

	)

455 
	#GET_CTRL_ADDR
(
nB™k
,
nPö
Ë(
__ΩnCTRLs
[“B™k)][(“PöË- 1)]/4)

	)

457 
NXCTRL_BOOL


458 
	$NXCTRLPöMode
 (
NXCTRL_BANK
 
nB™k
, 
NXCTRL_PIN
 
nPö
,

459 
NXCTRL_DIR
 
nDú
) {

460 vﬁ©ûê
NXCTRL_VOID
 *
pCTRL
 = 
NULL
;

461 vﬁ©ûê
NXCTRL_VOID
 *
pREG
 = 
NULL
;

462 
nGPIO
 = 0;

464 i‡(
nB™k
 !
NXCTRL_P8
 &&ÇB™k !
NXCTRL_P9
) {

465 
	`Ârötf
(
°dîr
, "NXCTRLPöModêunsuµ‹ãd b™k - %d\n", 
nB™k
);

466  
NXCTRL_FALSE
;

469 i‡(
nPö
 < 1 ||ÇPin > 46) {

470 
	`Ârötf
(
°dîr
, "NXCTRLPöModêunsuµ‹ãdÖöÇumbî - %d\n", 
nPö
);

471  
NXCTRL_FALSE
;

474 i‡(
	`GET_GPIO
(
nB™k
, 
nPö
Ë=
NAPIN
) {

475 
	`Ârötf
(
°dîr
, "NXCTRLPinMode invalidÖinÖosition\n");

476  
NXCTRL_FALSE
;

479 
nGPIO
 = 
	`GET_GPIO
(
nB™k
, 
nPö
Ë* 32 + 
	`BITPOS
(
	`GET_PIN
(nBank,ÇPin));

481 
pCTRL
 = 
	`REGADDR
(
__CTRL_ADDR
, 
	`GET_CTRL_ADDR
(
nB™k
,
nPö
));

482 
	`GET_GPIO
(
nB™k
,
nPö
)) {

483 
GPIO0
:

484 
pREG
 = 
	`REGADDR
(
__GPIO0_ADDR
, 
GPIO_OE
);

486 
GPIO1
:

487 
pREG
 = 
	`REGADDR
(
__GPIO0_ADDR
, 
GPIO_OE
);

489 
GPIO2
:

490 
pREG
 = 
	`REGADDR
(
__GPIO0_ADDR
, 
GPIO_OE
);

492 
GPIO3
:

493 
pREG
 = 
	`REGADDR
(
__GPIO0_ADDR
, 
GPIO_OE
);

497 
	`__NXCTRLWrôeMode
(
nB™k
, 
nPö
, 
nDú
);

500 i‡(
nDú
 =
NXCTRL_OUTPUT
) {

501 
	`ASU32REG
(
pCTRL
) |= 0x0F;

502 
	`ASU32REG
(
pREG
Ë&~(
	`GET_PIN
(
nB™k
, 
nPö
));

503 
	`__SYSFSHACK
(
nGPIO
, 
NXCTRL_TRUE
);

504 } i‡(
nDú
 =
NXCTRL_INPUT
) {

505 
	`ASU32REG
(
pCTRL
) |= 0x2F;

506 
	`ASU32REG
(
pREG
Ë|
	`GET_PIN
(
nB™k
, 
nPö
);

507 
	`__SYSFSHACK
(
nGPIO
, 
NXCTRL_FALSE
);

508 } i‡(
nDú
 =
NXCTRL_OUTPUT_PULLUP
) {

509 
	`ASU32REG
(
pCTRL
) |= 0x17;

510 
	`ASU32REG
(
pREG
Ë&~(
	`GET_PIN
(
nB™k
, 
nPö
));

511 
	`__SYSFSHACK
(
nGPIO
, 
NXCTRL_TRUE
);

512 } i‡(
nDú
 =
NXCTRL_INPUT_PULLUP
) {

513 
	`ASU32REG
(
pCTRL
) |= 0x37;

514 
	`ASU32REG
(
pREG
Ë|
	`GET_PIN
(
nB™k
, 
nPö
);

515 
	`__SYSFSHACK
(
nGPIO
, 
NXCTRL_FALSE
);

516 } i‡(
nDú
 =
NXCTRL_OUTPUT_PULLDN
) {

517 
	`ASU32REG
(
pCTRL
) |= 0x07;

518 
	`ASU32REG
(
pREG
Ë&~(
	`GET_PIN
(
nB™k
, 
nPö
));

519 
	`__SYSFSHACK
(
nGPIO
, 
NXCTRL_TRUE
);

520 } i‡(
nDú
 =
NXCTRL_INPUT_PULLDN
) {

521 
	`ASU32REG
(
pCTRL
) |= 0x27;

522 
	`ASU32REG
(
pREG
Ë|
	`GET_PIN
(
nB™k
, 
nPö
);

523 
	`__SYSFSHACK
(
nGPIO
, 
NXCTRL_FALSE
);

526  
NXCTRL_TRUE
;

527 
	}
}

529 
NXCTRL_VOID


530 
	$NXCTRLSÀï
 (
NXCTRL_UINT32
 
m£c
, NXCTRL_UINT32 
u£c
) {

531 
	`u¶ìp
(
NXCTRL_UINT32
);

532 
	`u¶ìp
(
m£c
*1000 + 
u£c
);

534 
	}
}

536 
NXCTRL_VOID


537 
	$NXCTRLDigôÆWrôe
 (
NXCTRL_BANK
 
nB™k
, 
NXCTRL_PIN
 
nPö
,

538 
NXCTRL_BOOL
 
bF
) {

539 
nGPIO
 = 
	`GET_GPIO
(
nB™k
, 
nPö
);

541 i‡(
bF
 =
NXCTRL_HIGH
)

542 
nGPIO
) {

543 
GPIO0
:

544 
U32REG_GPIO0_SETDATAOUT
 = 
	`GET_PIN
(
nB™k
, 
nPö
);

546 
GPIO1
:

547 
U32REG_GPIO1_SETDATAOUT
 = 
	`GET_PIN
(
nB™k
, 
nPö
);

549 
GPIO2
:

550 
U32REG_GPIO2_SETDATAOUT
 = 
	`GET_PIN
(
nB™k
, 
nPö
);

552 
GPIO3
:

553 
U32REG_GPIO3_SETDATAOUT
 = 
	`GET_PIN
(
nB™k
, 
nPö
);

556 i‡(
bF
 =
NXCTRL_LOW
)

557 
nGPIO
) {

558 
GPIO0
:

559 
U32REG_GPIO0_CLEARDATAOUT
 = 
	`GET_PIN
(
nB™k
, 
nPö
);

561 
GPIO1
:

562 
U32REG_GPIO1_CLEARDATAOUT
 = 
	`GET_PIN
(
nB™k
, 
nPö
);

564 
GPIO2
:

565 
U32REG_GPIO2_CLEARDATAOUT
 = 
	`GET_PIN
(
nB™k
, 
nPö
);

567 
GPIO3
:

568 
U32REG_GPIO3_CLEARDATAOUT
 = 
	`GET_PIN
(
nB™k
, 
nPö
);

571 
	}
}

573 
NXCTRL_BOOL


574 
	$NXCTRLDigôÆRód
 (
NXCTRL_BANK
 
nB™k
, 
NXCTRL_PIN
 
nPö
) {

575 
nGPIO
 = 
	`GET_GPIO
(
nB™k
, 
nPö
);

577 
nGPIO
) {

578 
GPIO0
:

579  (
NXCTRL_BOOL
)((
U32REG_GPIO0_DATAIN
 & 
	`GET_PIN
(
nB™k
, 
nPö
)) != 0);

580 
GPIO1
:

581  (
NXCTRL_BOOL
)((
U32REG_GPIO1_DATAIN
 & 
	`GET_PIN
(
nB™k
, 
nPö
)) != 0);

582 
GPIO2
:

583  (
NXCTRL_BOOL
)((
U32REG_GPIO2_DATAIN
 & 
	`GET_PIN
(
nB™k
, 
nPö
)) != 0);

584 
GPIO3
:

585  (
NXCTRL_BOOL
)((
U32REG_GPIO3_DATAIN
 & 
	`GET_PIN
(
nB™k
, 
nPö
)) != 0);

588  
NXCTRL_OFF
;

589 
	}
}

591 
NXCTRL_UINT32
 
	gnANALOG_STEP
 = 0;

592 
NXCTRL_UINT32
 
	gnANALOG_FIFO
 = 0;

594 
NXCTRL_UINT32


595 
	$NXCTRLA«logRód
 (
NXCTRL_AIN
 
nAIN
) {

596 
nSètus
 = 0;

597 
nLo›Cou¡
 = 0;

598 
nSTEP
, 
nFIFO
;

599 
NXCTRL_UINT32
 
nVÆue
, 
nTAG
;

601 
nSTEP
 = 
nANALOG_STEP
++;

602 
nFIFO
 = 
nANALOG_FIFO
++;

604 i‡(
nANALOG_STEP
 > 15)ÇANALOG_STEP = 0;

605 i‡(
nANALOG_FIFO
 > 1)ÇANALOG_FIFO = 0;

607 
	`ENABLE_TSC_ADC_SS_MODULE
(
NXCTRL_OFF
);

609 
	`SET_TSC_ADC_SS_ADC_CLKDIV
(0x1);

610 
	`ENABLE_TSC_ADC_SS_STEP_ID_TAG
(
NXCTRL_ON
);

611 
	`ENABLE_TSC_ADC_SS_STEP_CONFIG_WRITE
(
NXCTRL_ON
);

613 
	`ENABLE_TSC_ADC_SS_STEPCONFIG_DIFF
(
nSTEP
, 
NXCTRL_OFF
);

614 
	`SET_TSC_ADC_SS_STEPCONFIG_INP
(
nSTEP
, 
nAIN
);

615 
	`SET_TSC_ADC_SS_STEPCONFIG_FIFO
(
nSTEP
, 
nFIFO
);

616 
	`SET_TSC_ADC_SS_STEPCONFIG_MODE
(
nSTEP
, 0x00);

617 
	`SET_TSC_ADC_SS_STEPCONFIG_AVG
(
nSTEP
, 0x4);

618 
	`SET_TSC_ADC_SS_STEPDELAY_SAMPLE
(
nSTEP
, 0x0);

619 
	`SET_TSC_ADC_SS_STEPDELAY_OPEN
(
nSTEP
, 0x0);

621 
	`SET_TSC_ADC_SS_STEPENABLE
(
nSTEP
, 
NXCTRL_ON
);

623 
CLEAR_TSC_ADC_SS_IRQSTATUS
;

624 
	`SET_TSC_ADC_SS_IRQENABLE_SET
(
BIT1
);

626 
	`ENABLE_TSC_ADC_SS_MODULE
(
NXCTRL_ON
);

628 !((
nSètus
 = 
U32REG_TSC_ADC_SS_IRQSTATUS
Ë& 
BIT1
)

629 && (
nLo›Cou¡
 < 5)) {

630 
nLo›Cou¡
++;

631 
	`NXCTRLSÀï
(10, 0);

634 
U32REG_TSC_ADC_SS_IRQSTATUS
 = 
BIT1
;

636 i‡(!(
nSètus
 & 
BIT1
))

637 
	`Ârötf
(
°dîr
, "NXCTRLAnalogRead: invalid valueÉmitted\n");

639 
nVÆue
 = 
	`U32REG_TSC_ADC_SS_FIFODATA
(
nFIFO
);

640 
nTAG
 = (
nVÆue
 & (
BIT16
|
BIT17
|
BIT18
|
BIT19
))>>16;

642 i‡(
nTAG
 !
nSTEP
)

643 
	`Ârötf
(
°dîr
, "NXCTRLAnalogRead: unmatchedÅag\n");

645  (
nVÆue
 & 0xFFF);

646 
	}
}

648 
	#GET_PWM
(
nB™k
, 
nPö
Ë
__ΩnPWMs
[“B™k)][(“PöË- 1)]

	)

650 
	#PWM_MODULE_FREQ
 (100000000)

	)

651 
	#HALF_FREQ_HZ
 (1000)

	)

652 
	#FREQ_HZ
 (2*
HALF_FREQ_HZ
)

	)

654 
ölöe
 
NXCTRL_VOID


655 
	$__NXCTRLCompuãTBCLK
 (
NXCTRL_UINT32
 
nTBCLK
,

656 
NXCTRL_UINT32
 *
≤CLKDIV
, NXCTRL_UINT32 *
≤HSPCLKDIV
) {

657 
NXCTRL_UINT32
 
nCLKDiv
 = 
PWM_MODULE_FREQ
 / 
nTBCLK
;

658 
NXCTRL_UINT32
 
nHSPCLKDiv
, 
nLSPCLKDiv
;

659 
NXCTRL_UINT32
 
nLSPCLKDivSëtög
 = 0;

660 
NXCTRL_UINT32
 
nLimô
 = 
PWM_MODULE_FREQ
 / (128*14);

662 i‡(
nTBCLK
 < 
nLimô
) {

663 
	`Ârötf
(
°dîr
, "__NXCTRLComputeTBCLK:Üimit CLK %d[%d]\n",

664 
nTBCLK
, 
nLimô
);

665 
nCLKDiv
 = 
PWM_MODULE_FREQ
 / 
nLimô
;

669 i‡(
nCLKDiv
 > 14) {

670 
nHSPCLKDiv
 = 0x7;

671 
nLSPCLKDiv
 = 
nCLKDiv
 / 14;

672 
nLSPCLKDiv
 > 1) {

673 
nLSPCLKDiv
 =ÇLSPCLKDiv >> 1;

674 
nLSPCLKDivSëtög
++;

677 
nHSPCLKDiv
 = 
nCLKDiv
 / 2;

678 
nLSPCLKDivSëtög
 = 0x0;

681 *
≤CLKDIV
 = 
nLSPCLKDivSëtög
;

682 *
≤HSPCLKDIV
 = 
nHSPCLKDiv
;

683 
	}
}

685 
	#PWM_RESOLUTION
 (1000)

	)

687 
	#PWMSS0
 (0)

	)

688 
	#PWMSS1
 (1)

	)

689 
	#PWMSS2
 (2)

	)

691 
	#PWMCHA
 (0)

	)

692 
	#PWMCHB
 (1)

	)

694 
	#SETUP_PWMSS
(
n
) \

695 
SET_EPWMSS
## 
n
 ## 
	`_TBCTL_CLKDIV
(
nCLKDIV
); \

696 
SET_EPWMSS
## 
n
 ## 
	`_TBCTL_HSPCLKDIV
(
nHSPCLKDIV
); \

697 
SET_EPWMSS
## 
n
 ## 
	`_TBCTL_CTRMODE
(0x0); \

698 
SET_EPWMSS
## 
n
 ## 
	`_TBPRD
(
nPRDCNT
); \

699 
ENABLE_EPWMSS
## 
n
 ## 
	`_CMPCTL_SHDWAMODE
(
NXCTRL_OFF
); \

700 
SET_EPWMSS
## 
n
 ## 
	`_CMPCTRL_LOADAMODE
(0x3); \

701 
SET_EPWMSS
## 
n
 ## 
	`_CMPA
(
nDCNT
); \

702 
ENABLE_EPWMSS
## 
n
 ## 
	`_CMPCTL_SHDWBMODE
(
NXCTRL_OFF
); \

703 
SET_EPWMSS
## 
n
 ## 
	`_CMPCTRL_LOADBMODE
(0x3); \

704 
SET_EPWMSS
## 
n
 ## 
	`_CMPB
(
nDCNT
)

	)

706 
	#SETUP_AQA
(
n
) \

707 i‡(
nVÆue
 == 0) { \

708 
SET_EPWMSS
## 
n
 ## 
	`_AQCTLA
(0x1,0x1,0x1,0x1,0x1,0x1); \

709 
SET_EPWMSS
## 
n
 ## 
	`_AQSFRC_ACTSFA
(0x1); \

710 } i‡(
nVÆue
 =
PWM_RESOLUTION
) { \

711 
SET_EPWMSS
## 
n
 ## 
	`_AQCTLA
(0x2,0x2,0x2,0x2,0x2,0x2); \

712 
SET_EPWMSS
## 
n
 ## 
	`_AQSFRC_ACTSFA
(0x2); \

714 
SET_EPWMSS
## 
n
 ## 
	`_AQCTLA
(0x2,0x0,0x1,0x0,0x0,0x0); \

715 
SET_EPWMSS
## 
n
 ## 
	`_AQSFRC_ACTSFA
(0x0); \

717 

	)

719 
	#SETUP_AQB
(
n
) \

720 i‡(
nVÆue
 == 0) { \

721 
SET_EPWMSS
## 
n
 ## 
	`_AQCTLB
(0x1,0x1,0x1,0x1,0x1,0x1); \

722 
SET_EPWMSS
## 
n
 ## 
	`_AQSFRC_ACTSFB
(0x1); \

723 } i‡(
nVÆue
 =
PWM_RESOLUTION
) { \

724 
SET_EPWMSS
## 
n
 ## 
	`_AQCTLB
(0x2,0x2,0x2,0x2,0x2,0x2); \

725 
SET_EPWMSS
## 
n
 ## 
	`_AQSFRC_ACTSFB
(0x2); \

727 
SET_EPWMSS
## 
n
 ## 
	`_AQCTLB
(0x2,0x0,0x1,0x0,0x0,0x0); \

728 
SET_EPWMSS
## 
n
 ## 
	`_AQSFRC_ACTSFB
(0x0); \

730 

	)

732 
NXCTRL_VOID


733 
	$__NXCTRLSëUpPWMSS
 (
nPWMSS
, 
nCh™√l
,

734 
NXCTRL_UINT32
 
nCLKDIV
,

735 
NXCTRL_UINT32
 
nHSPCLKDIV
,

736 
NXCTRL_UINT32
 
nPRDCNT
,

737 
NXCTRL_UINT32
 
nDCNT
,

738 
NXCTRL_UINT32
 
nVÆue
) {

739 
nPWMSS
) {

740 
PWMSS0
:

741 
	`SETUP_PWMSS
(0);

742 
nCh™√l
) {

743 
PWMCHA
:

744 
	`SETUP_AQA
(0);

745 
PWMCHB
:

746 
	`SETUP_AQB
(0);

749 
PWMSS1
:

750 
	`SETUP_PWMSS
(1);

751 
nCh™√l
) {

752 
PWMCHA
:

753 
	`SETUP_AQA
(1);

754 
PWMCHB
:

755 
	`SETUP_AQB
(1);

758 
PWMSS2
:

759 
	`SETUP_PWMSS
(2);

760 
nCh™√l
) {

761 
PWMCHA
:

762 
	`SETUP_AQA
(2);

763 
PWMCHB
:

764 
	`SETUP_AQB
(2);

768 
	}
}

770 
	#GET_CHANNEL
(
n
Ë((“Ë& 
BIT5
 & ~(
BIT0
|
BIT2
|
BIT3
|
BIT4
)Ë>> 5)

	)

771 
	#GET_PWMSS
(
n
Ë((“Ë& (
BIT3
|
BIT4
Ë& ~(
BIT0
|
BIT1
|
BIT2
|
BIT5
)Ë>> 3)

	)

773 
NXCTRL_VOID


774 
	$NXCTRLA«logWrôeEx
 (
NXCTRL_BANK
 
nB™k
, 
NXCTRL_PIN
 
nPö
,

775 
NXCTRL_UINT32
 
nVÆue
,

776 
NXCTRL_UINT32
 
nPWMDiv
,

777 
NXCTRL_UINT32
 
nFREQHZ
, NXCTRL_UINT32 
nRESOLUTION
,

778 
NXCTRL_BOOL
 
bLog
) {

779 
nPWMInfo
 = 
	`GET_PWM
(
nB™k
, 
nPö
);

780 
nCh™√l
 = 
	`GET_CHANNEL
(
nPWMInfo
);

781 
nSS
 = 
	`GET_PWMSS
(
nPWMInfo
);

782 
NXCTRL_UINT32
 
nPWM_TBCLK
 = 
PWM_MODULE_FREQ
/
nPWMDiv
;

783 
NXCTRL_UINT32
 
nCLKDIV
, 
nHSPCLKDIV
, 
nPRDCNT
 = 
nPWM_TBCLK
/
nFREQHZ
;

784 
NXCTRL_UINT32
 
nDCNT
 = (
nVÆue
 * 
nPRDCNT
Ë/ 
nRESOLUTION
;

786 i‡(
nPWMInfo
 < 0) {

787 
	`Ârötf
(
°dîr
, "NXCTRLAnalogWriteEx: invalidÖwmÖin\n");

791 i‡(
bLog
)

792 
	`¥ötf
("FREQ/RES: %d/%d, PRDCNT: %d, DCND: %d\n",

793 
nFREQHZ
, 
nRESOLUTION
, 
nPRDCNT
, 
nDCNT
);

795 
	`__NXCTRLCompuãTBCLK
(
nPWM_TBCLK
, &
nCLKDIV
, &
nHSPCLKDIV
);

796 
	`__NXCTRLSëUpPWMSS
 (
nSS
, 
nCh™√l
, 
nCLKDIV
, 
nHSPCLKDIV
,

797 
nPRDCNT
, 
nDCNT
, 
nVÆue
);

798 
	}
}

800 
NXCTRL_VOID


801 
	$NXCTRLA«logWrôe
 (
NXCTRL_BANK
 
nB™k
, 
NXCTRL_PIN
 
nPö
,

802 
NXCTRL_UINT32
 
nVÆue
) {

803 
	`NXCTRLA«logWrôeEx
(
nB™k
, 
nPö
, 
nVÆue
,

805 
FREQ_HZ
, 
PWM_RESOLUTION
,

806 
NXCTRL_FALSE
);

807 
	}
}

809 
	#SERVO_FREQ
 (50)

	)

810 
	#SERVO_PWMDIV
 (448)

	)

811 
	#SERVO_RES
 (2000)

	)

814 
	#SERVO_MINV
 (50)

	)

815 
	#SERVO_MAXV
 (240)

	)

817 
NXCTRL_VOID


818 
	$NXCTRLSîvoWrôe
 (
NXCTRL_BANK
 
nB™k
, 
NXCTRL_PIN
 
nPö
,

819 
NXCTRL_UINT32
 
nDegªe
) {

820 i‡(
nDegªe
 < 0)ÇDegree = 0;

821 i‡(
nDegªe
 > 180)ÇDegree = 180;

822 
NXCTRL_UINT32
 
nVÆue
 = (
SERVO_MAXV
 - 
SERVO_MINV
Ë* 
nDegªe
 / 180 + SERVO_MINV;

823 
	`NXCTRLA«logWrôeEx
(
nB™k
, 
nPö
,

824 
nVÆue
,

825 
SERVO_PWMDIV
,

826 
SERVO_FREQ
, 
SERVO_RES
, 
NXCTRL_OFF
);

827 
	}
}

829 
NXCTRL_INT32


830 
	$NXCTRLSPIWrôe
 (
nSPIFD
,

831 c⁄° 
NXCTRL_UINT8
 *
rchTXByãs
,

832 
NXCTRL_UINT8
 *
rchRXByãs
,

833 
NXCTRL_UINT32
 
nLígth
) {

834 
NXCTRL_UINT32
 
nS≥ed
 = 20000000;

835 
•i_ioc_å™s„r
 
x„r
 = {

836 .
tx_buf
 = ()
rchTXByãs
,

837 .
rx_buf
 = ()
rchRXByãs
,

838 .
Àn
 = 
nLígth
,

839 .
dñay_u£cs
 = 0,

840 .
•ìd_hz
 = 
nS≥ed
,

841 .
bôs_≥r_w‹d
 = 8

843 
nRë
 = 
	`io˘l
(
nSPIFD
, 
	`SPI_IOC_MESSAGE
(1), &
x„r
);

844 i‡(
nRë
 == -1)

845 
	`≥º‹
("NXCTRLSPIWrite");

846  
nRë
;

847 
	}
}

	@NXCTRL.h

21 #i‚de‡
__NXCTRL_HEADER__


22 
	#__NXCTRL_HEADER__


	)

24 
	~<NXCTRL_ty≥s.h
>

25 
	~<NXCTRL_ªgi°îs.h
>

30 
NXCTRL_VOID
 
NXCTRLSëup
 (NXCTRL_VOID);

31 
NXCTRL_VOID
 
NXCTRLLo›
 (NXCTRL_VOID);

36 
NXCTRL_INT32
 
NXCTRLMaö
 (
NXCTRL_VOID
);

37 
NXCTRL_VOID
 
NXCTRLExôLo›
 (NXCTRL_VOID);

38 
NXCTRL_VOID
 
NXCTRLSëSIGINTH™dÀr
 (
NXCTRL_SIG_HANDLER
 
p‚
);

39 
NXCTRL_VOID
 
NXCTRLSëSIGTERMH™dÀr
 (
NXCTRL_SIG_HANDLER
 
p‚
);

44 
NXCTRL_BOOL
 
NXCTRLPöMux
 (
NXCTRL_BANK
 
nB™k
, 
NXCTRL_PIN
 
nPö
,

45 
NXCTRL_MODE
 
nMode
, 
NXCTRL_PULLTYPE
 
nPuŒUpDown
,

46 
NXCTRL_BOOL
 
bRe˚ivîA˘ive
);

47 
NXCTRL_BOOL
 
NXCTRLPöMode
 (
NXCTRL_BANK
 
nB™k
, 
NXCTRL_PIN
 
nPö
,

48 
NXCTRL_DIR
 
nDú
);

50 
NXCTRL_VOID
 
NXCTRLSÀï
 (
NXCTRL_UINT32
 
m£c
, NXCTRL_UINT32 
u£c
);

52 
NXCTRL_VOID
 
NXCTRLDigôÆWrôe
 (
NXCTRL_BANK
 
nB™k
, 
NXCTRL_PIN
 
nPö
,

53 
NXCTRL_BOOL
 
bF
);

54 
NXCTRL_BOOL
 
NXCTRLDigôÆRód
 (
NXCTRL_BANK
 
nB™k
, 
NXCTRL_PIN
 
nPö
);

56 
NXCTRL_UINT32
 
NXCTRLA«logRód
 (
NXCTRL_AIN
 
nAIN
);

57 
NXCTRL_VOID
 
NXCTRLA«logWrôe
 (
NXCTRL_BANK
 
nB™k
, 
NXCTRL_PIN
 
nPö
,

58 
NXCTRL_UINT32
 
nVÆue
);

60 
NXCTRL_VOID
 
NXCTRLSîvoWrôe
 (
NXCTRL_BANK
 
nB™k
, 
NXCTRL_PIN
 
nPö
,

61 
NXCTRL_UINT32
 
nDegªe
);

66 
NXCTRL_BOOL
 
NXCTRLO≥n
 (
NXCTRL_VOID
);

67 
NXCTRL_VOID
 
NXCTRLClo£
 (NXCTRL_VOID);

69 
NXCTRL_BOOL
 
NXCTRLTSCADCO≥n
 (
NXCTRL_VOID
);

70 
NXCTRL_VOID
 
NXCTRLTSCADCClo£
 (NXCTRL_VOID);

72 
NXCTRL_BOOL
 
NXCTRLPWMSSO≥n
 (
NXCTRL_VOID
);

73 
NXCTRL_VOID
 
NXCTRLPWMSSClo£
 (NXCTRL_VOID);

75 
NXCTRL_VOID
 
NXCTRLA«logWrôeEx
 (
NXCTRL_BANK
 
nB™k
, 
NXCTRL_PIN
 
nPö
,

76 
NXCTRL_UINT32
 
nVÆue
,

77 
NXCTRL_UINT32
 
nPWMDiv
,

78 
NXCTRL_UINT32
 
nFREQHZ
, NXCTRL_UINT32 
nRESOLUTION
,

79 
NXCTRL_BOOL
 
nLog
);

81 
NXCTRL_INT32
 
NXCTRLSPIWrôe
 (
nSPIFD
,

82 c⁄° 
NXCTRL_UINT8
 *
rchTXByãs
,

83 
NXCTRL_UINT8
 *
rchRXByãs
,

84 
NXCTRL_UINT32
 
nLígth
);

	@NXCTRL_app.h

21 #i‚de‡
__NXCTRL_APP_HEADER__


22 
	#__NXCTRL_APP_HEADER__


	)

24 
	~<NXCTRL_ty≥s.h
>

26 
	#APPINITFUNCTIONNAME
 "NXCTRLAPP_öô"

	)

27 
	#APPRUNFUNCTIONNAME
 "NXCTRLAPP_run"

	)

28 
	#APPCLEANFUNCTIONNAME
 "NXCTRLAPP_˛ón"

	)

30 
__ègNXCTRLAPP
* 
	tLPNXCTRLAPP
;

32 
	$NXCTRL_VOID
 (*
	tAPPINITFN
Ë(
	tLPNXCTRLAPP
 
	tpAµ
);

33 
	$NXCTRL_VOID
 (*
	tAPPRUNFN
Ë(
	tLPNXCTRLAPP
 
	tpAµ
);

34 
	$NXCTRL_VOID
 (*
	tAPPCLEANFN
Ë(
	tLPNXCTRLAPP
 
	tpAµ
);

36 
	$NXCTRL_BOOL
 (*
	tAPPPINMUX
Ë(
	tNXCTRL_BANK
 
	tnB™k
, 
	tNXCTRL_PIN
 
	tnPö
,

37 
	tNXCTRL_MODE
 
	tnMode
, 
	tNXCTRL_PULLTYPE
 
	tnPuŒUpDown
,

38 
	tNXCTRL_BOOL
 
	tbRe˚ivîA˘ive
);

39 
	$NXCTRL_BOOL
 (*
	tAPPPINMODE
Ë(
	tNXCTRL_BANK
 
	tnB™k
, 
	tNXCTRL_PIN
 
	tnPö
,

40 
	tNXCTRL_DIR
 
	tnDú
);

41 
	$NXCTRL_VOID
 (*
	tAPPSLEEP
Ë(
	tNXCTRL_UINT32
 
	tm£c
, NXCTRL_UINT32 
	tu£c
);

42 
	$NXCTRL_BOOL
 (*
	tAPPDIGITALREAD
Ë(
	tNXCTRL_BANK
 
	tnB™k
, 
	tNXCTRL_PIN
 
	tnPö
);

43 
	$NXCTRL_VOID
 (*
	tAPPDIGITALWRITE
Ë(
	tNXCTRL_BANK
 
	tnB™k
, 
	tNXCTRL_PIN
 
	tnPö
,

44 
	tNXCTRL_BOOL
 
	tbF
);

45 
	$NXCTRL_UINT32
 (*
	tAPPANALOGREAD
Ë(
	tNXCTRL_AIN
 
	tnAIN
);

46 
	$NXCTRL_VOID
 (*
	tAPPANALOGWRITE
Ë(
	tNXCTRL_BANK
 
	tnB™k
, 
	tNXCTRL_PIN
 
	tnPö
,

47 
	tNXCTRL_UINT32
 
	tnVÆue
);

48 
	$NXCTRL_VOID
 (*
	tAPPSERVOWRITE
Ë(
	tNXCTRL_BANK
 
	tnB™k
, 
	tNXCTRL_PIN
 
	tnPö
,

49 
	tNXCTRL_UINT32
 
	tnDegªe
);

51 
	$NXCTRL_VOID
 (*
	tAPPCLEARDPY
Ë(
	tNXCTRL_VOID
);

52 
	$NXCTRL_VOID
 (*
	tAPPUPDATEDPY
Ë(
	tNXCTRL_VOID
);

53 
	$NXCTRL_VOID
 (*
	tAPPSETCURSOR
Ë(
	tNXCTRL_UINT8
 
	tnX
, NXCTRL_UINT8 
	tnY
);

54 
	$NXCTRL_VOID
 (*
	tAPPWRITESTR
Ë(c⁄° *
	tpsz
);

55 
	$NXCTRL_VOID
 (*
	tAPPDRAWPIXEL
Ë(
	tNXCTRL_UINT8
 
	tnX
, NXCTRL_UINT8 
	tnY
,

56 
	tNXCTRL_BOOL
 
	t⁄Off
);

57 
	$NXCTRL_VOID
 (*
	tAPPDRAWLINE
Ë(
	tNXCTRL_UINT8
 
	tnX0
, NXCTRL_UINT8 
	tnY0
,

58 
	tNXCTRL_UINT8
 
	tnX1
, NXCTRL_UINT8 
	tnY1
,

59 
	tNXCTRL_BOOL
 
	t⁄Off
);

60 
	$NXCTRL_VOID
 (*
	tAPPDRAWBITMAP
Ë(
	tNXCTRL_UINT8
 
	tnX
, NXCTRL_UINT8 
	tnY
,

61 
	tNXCTRL_UINT8
 *
	tpBôm≠
,

62 
	tNXCTRL_UINT16
 
	tw
, NXCTRL_UINT16 
	th
,

63 
	tNXCTRL_BOOL
 
	t⁄Off
);

64 
	$NXCTRL_VOID
 (*
	tAPPDRAWBANNER
Ë(
	tNXCTRL_VOID
);

66 
	s__ègNXCTRLAPP
 {

67 
NXCTRL_VOID
 *
pD©a
;

69 
APPPINMUX
 
pöMux
;

70 
APPPINMODE
 
pöMode
;

71 
APPSLEEP
 
¶ìp
;

72 
APPDIGITALREAD
 
digôÆRód
;

73 
APPDIGITALWRITE
 
digôÆWrôe
;

74 
APPANALOGREAD
 
™ÆogRód
;

75 
APPANALOGWRITE
 
™ÆogWrôe
;

76 
APPSERVOWRITE
 
£rvoWrôe
;

78 
APPCLEARDPY
 
˛órDi•œy
;

79 
APPUPDATEDPY
 
upd©eDi•œy
;

80 
APPSETCURSOR
 
£tCurs‹
;

81 
APPWRITESTR
 
wrôeSTR
;

82 
APPDRAWPIXEL
 
døwPixñ
;

83 
APPDRAWLINE
 
døwLöe
;

84 
APPDRAWBITMAP
 
døwBôm≠
;

85 
APPDRAWBANNER
 
døwB™√r
;

86 } 
	tNXCTRLAPP
;

	@NXCTRL_appEx.h

21 #i‚de‡
__NXCTRL_APP_HEADER__


22 
	#__NXCTRL_APP_HEADER__


	)

24 
	~<NXCTRL_ty≥s.h
>

26 
	#APPINITFUNCTIONNAME
 "NXCTRLAPP_öô"

	)

27 
	#APPRUNFUNCTIONNAME
 "NXCTRLAPP_run"

	)

28 
	#APPCLEANFUNCTIONNAME
 "NXCTRLAPP_˛ón"

	)

30 
__ègNXCTRLAPP
* 
	tLPNXCTRLAPP
;

32 
	$NXCTRL_VOID
 (*
	tAPPINITFN
Ë(
	tLPNXCTRLAPP
 
	tpAµ
);

33 
	$NXCTRL_VOID
 (*
	tAPPRUNFN
Ë(
	tLPNXCTRLAPP
 
	tpAµ
);

34 
	$NXCTRL_VOID
 (*
	tAPPCLEANFN
Ë(
	tLPNXCTRLAPP
 
	tpAµ
);

36 
	$NXCTRL_BOOL
 (*
	tAPPPINMUX
Ë(
	tNXCTRL_BANK
 
	tnB™k
, 
	tNXCTRL_PIN
 
	tnPö
,

37 
	tNXCTRL_MODE
 
	tnMode
, 
	tNXCTRL_PULLTYPE
 
	tnPuŒUpDown
,

38 
	tNXCTRL_BOOL
 
	tbRe˚ivîA˘ive
);

39 
	$NXCTRL_BOOL
 (*
	tAPPPINMODE
Ë(
	tNXCTRL_BANK
 
	tnB™k
, 
	tNXCTRL_PIN
 
	tnPö
,

40 
	tNXCTRL_DIR
 
	tnDú
);

41 
	$NXCTRL_VOID
 (*
	tAPPSLEEP
Ë(
	tNXCTRL_UINT32
 
	tm£c
, NXCTRL_UINT32 
	tu£c
);

42 
	$NXCTRL_BOOL
 (*
	tAPPDIGITALREAD
Ë(
	tNXCTRL_BANK
 
	tnB™k
, 
	tNXCTRL_PIN
 
	tnPö
);

43 
	$NXCTRL_VOID
 (*
	tAPPDIGITALWRITE
Ë(
	tNXCTRL_BANK
 
	tnB™k
, 
	tNXCTRL_PIN
 
	tnPö
,

44 
	tNXCTRL_BOOL
 
	tbF
);

45 
	$NXCTRL_UINT32
 (*
	tAPPANALOGREAD
Ë(
	tNXCTRL_AIN
 
	tnAIN
);

46 
	$NXCTRL_VOID
 (*
	tAPPANALOGWRITE
Ë(
	tNXCTRL_BANK
 
	tnB™k
, 
	tNXCTRL_PIN
 
	tnPö
,

47 
	tNXCTRL_UINT32
 
	tnVÆue
);

48 
	$NXCTRL_VOID
 (*
	tAPPSERVOWRITE
Ë(
	tNXCTRL_BANK
 
	tnB™k
, 
	tNXCTRL_PIN
 
	tnPö
,

49 
	tNXCTRL_UINT32
 
	tnDegªe
);

51 
	$NXCTRL_VOID
 (*
	tAPPCLEARDPY
Ë(
	tNXCTRL_VOID
);

52 
	$NXCTRL_VOID
 (*
	tAPPUPDATEDPY
Ë(
	tNXCTRL_VOID
);

53 
	$NXCTRL_VOID
 (*
	tAPPSETCURSOR
Ë(
	tNXCTRL_UINT8
 
	tnX
, NXCTRL_UINT8 
	tnY
);

54 
	$NXCTRL_VOID
 (*
	tAPPWRITESTR
Ë(c⁄° *
	tpsz
);

55 
	$NXCTRL_VOID
 (*
	tAPPDRAWPIXEL
Ë(
	tNXCTRL_UINT8
 
	tnX
, NXCTRL_UINT8 
	tnY
,

56 
	tNXCTRL_BOOL
 
	t⁄Off
);

57 
	$NXCTRL_VOID
 (*
	tAPPDRAWLINE
Ë(
	tNXCTRL_UINT8
 
	tnX0
, NXCTRL_UINT8 
	tnY0
,

58 
	tNXCTRL_UINT8
 
	tnX1
, NXCTRL_UINT8 
	tnY1
,

59 
	tNXCTRL_BOOL
 
	t⁄Off
);

60 
	$NXCTRL_VOID
 (*
	tAPPDRAWBITMAP
Ë(
	tNXCTRL_UINT8
 
	tnX
, NXCTRL_UINT8 
	tnY
,

61 
	tNXCTRL_UINT8
 *
	tpBôm≠
,

62 
	tNXCTRL_UINT16
 
	tw
, NXCTRL_UINT16 
	th
,

63 
	tNXCTRL_BOOL
 
	t⁄Off
);

64 
	$NXCTRL_VOID
 (*
	tAPPDRAWBANNER
Ë(
	tNXCTRL_VOID
);

66 
	s__ègNXCTRLAPP
 {

67 
NXCTRL_VOID
 *
pD©a
;

68 
nCmd
;

70 
APPPINMUX
 
pöMux
;

71 
APPPINMODE
 
pöMode
;

72 
APPSLEEP
 
¶ìp
;

73 
APPDIGITALREAD
 
digôÆRód
;

74 
APPDIGITALWRITE
 
digôÆWrôe
;

75 
APPANALOGREAD
 
™ÆogRód
;

76 
APPANALOGWRITE
 
™ÆogWrôe
;

77 
APPSERVOWRITE
 
£rvoWrôe
;

79 
APPCLEARDPY
 
˛órDi•œy
;

80 
APPUPDATEDPY
 
upd©eDi•œy
;

81 
APPSETCURSOR
 
£tCurs‹
;

82 
APPWRITESTR
 
wrôeSTR
;

83 
APPDRAWPIXEL
 
døwPixñ
;

84 
APPDRAWLINE
 
døwLöe
;

85 
APPDRAWBITMAP
 
døwBôm≠
;

86 
APPDRAWBANNER
 
døwB™√r
;

87 } 
	tNXCTRLAPP
;

89 
	#MENU_BUTTON_BANK
 
NXCTRL_P8


	)

90 
	#MENU_BUTTON_PIN
 
NXCTRL_PIN29


	)

91 
	#EXEC_BUTTON_BANK
 
NXCTRL_P8


	)

92 
	#EXEC_BUTTON_PIN
 
NXCTRL_PIN31


	)

	@NXCTRL_bitArray.c

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

24 
	~<NXCTRL_bôAºay.h
>

26 
NXCTRL_VOID


27 
	$NXCTRLBITARRAYInô
 (
NXCTRLBITARRAY
 *
pAº
, 
NXCTRL_UINT32
 
nBôs
) {

28 
pAº
->
nBôs
 =ÇBits;

29 
pAº
->
nSize
 = (
nBôs
 >> 3) + 1;

30 
pAº
->
¨r
 = (
NXCTRL_UINT8
 *)
	`mÆloc
’Aº->
nSize
 * (NXCTRL_UINT8));

31 i‡(
pAº
->
¨r
)

32 
	`mem£t
(
pAº
->
¨r
, 0,ÖAº->
nSize
 * (*pArr->arr));

33 
	}
}

35 
NXCTRL_VOID


36 
	$NXCTRLBITARRAYFªe
 (
NXCTRLBITARRAY
 *
pAº
) {

37 i‡(
pAº
->
¨r
)

38 
	`‰ì
(
pAº
->
¨r
);

39 
	}
}

41 
NXCTRL_BOOL


42 
	$NXCTRLBITARRAYCheck
 (
NXCTRLBITARRAY
 *
pAº
, 
NXCTRL_UINT32
 
nBô
) {

43 i‡(
pAº
->
nBôs
 < 
nBô
) {

44 
	`Ârötf
(
°dîr
, "NXCTRLBITARRAYCheck: %d is out ofÑange in %d\n",

45 
nBô
, 
pAº
->
nBôs
);

46  
NXCTRL_FALSE
;

48  
NXCTRL_TRUE
;

49 
	}
}

51 
NXCTRL_VOID


52 
	$NXCTRLBITARRAYSë
 (
NXCTRLBITARRAY
 *
pAº
, 
NXCTRL_UINT32
 
nBô
) {

53 i‡(!
	`NXCTRLBITARRAYCheck
(
pAº
, 
nBô
))

55 
pAº
->
¨r
[
nBô
>>3] |= 1 << (nBit % 8);

56 
	}
}

58 
NXCTRL_VOID


59 
	$NXCTRLBITARRAYCÀ¨
 (
NXCTRLBITARRAY
 *
pAº
, 
NXCTRL_UINT32
 
nBô
) {

60 i‡(!
	`NXCTRLBITARRAYCheck
(
pAº
, 
nBô
))

62 
pAº
->
¨r
[
nBô
>>3] &= ~(1 << (nBit % 8));

63 
	}
}

65 
NXCTRL_BOOL


66 
	$NXCTRLBITARRAYGë
 (
NXCTRLBITARRAY
 *
pAº
, 
NXCTRL_UINT32
 
nBô
) {

67 i‡(!
	`NXCTRLBITARRAYCheck
(
pAº
, 
nBô
))

68  
NXCTRL_OFF
;

69  (
NXCTRL_BOOL
)(
pAº
->
¨r
[
nBô
>>3] & (1 << (nBit % 8)));

70 
	}
}

	@NXCTRL_bitArray.h

21 #i‚de‡
__NXCTRL_BITARRAY_HEADER__


22 
	#__NXCTRL_BITARRAY_HEADER__


	)

24 
	~<NXCTRL.h
>

26 
	s__ègNXCTRLBITARRAY
 {

27 
NXCTRL_UINT8
 *
	m¨r
;

28 
NXCTRL_UINT32
 
	mnBôs
;

29 
NXCTRL_UINT32
 
	mnSize
;

30 } 
	tNXCTRLBITARRAY
;

32 
NXCTRL_VOID
 
NXCTRLBITARRAYInô
 (
NXCTRLBITARRAY
 *
pAº
, 
NXCTRL_UINT32
 
nBôs
);

33 
NXCTRL_VOID
 
NXCTRLBITARRAYFªe
 (
NXCTRLBITARRAY
 *
pAº
);

35 
NXCTRL_VOID
 
NXCTRLBITARRAYSë
 (
NXCTRLBITARRAY
 *
pAº
, 
NXCTRL_UINT32
 
nBô
);

36 
NXCTRL_VOID
 
NXCTRLBITARRAYCÀ¨
 (
NXCTRLBITARRAY
 *
pAº
, 
NXCTRL_UINT32
 
nBô
);

38 
NXCTRL_BOOL
 
NXCTRLBITARRAYGë
 (
NXCTRLBITARRAY
 *
pAº
, 
NXCTRL_UINT32
 
nBô
);

	@NXCTRL_bits.h

21 #i‚de‡
__NXCTRL_BITS_HEADER__


22 
	#__NXCTRL_BITS_HEADER__


	)

24 
	#BIT0
 0x00000001

	)

25 
	#BIT1
 0x00000002

	)

26 
	#BIT2
 0x00000004

	)

27 
	#BIT3
 0x00000008

	)

28 
	#BIT4
 0x00000010

	)

29 
	#BIT5
 0x00000020

	)

30 
	#BIT6
 0x00000040

	)

31 
	#BIT7
 0x00000080

	)

32 
	#BIT8
 0x00000100

	)

33 
	#BIT9
 0x00000200

	)

34 
	#BIT10
 0x00000400

	)

35 
	#BIT11
 0x00000800

	)

36 
	#BIT12
 0x00001000

	)

37 
	#BIT13
 0x00002000

	)

38 
	#BIT14
 0x00004000

	)

39 
	#BIT15
 0x00008000

	)

40 
	#BIT16
 0x00010000

	)

41 
	#BIT17
 0x00020000

	)

42 
	#BIT18
 0x00040000

	)

43 
	#BIT19
 0x00080000

	)

44 
	#BIT20
 0x00100000

	)

45 
	#BIT21
 0x00200000

	)

46 
	#BIT22
 0x00400000

	)

47 
	#BIT23
 0x00800000

	)

48 
	#BIT24
 0x01000000

	)

49 
	#BIT25
 0x02000000

	)

50 
	#BIT26
 0x04000000

	)

51 
	#BIT27
 0x08000000

	)

52 
	#BIT28
 0x10000000

	)

53 
	#BIT29
 0x20000000

	)

54 
	#BIT30
 0x40000000

	)

55 
	#BIT31
 0x80000000

	)

57 
	uègINT16
 {

58 
	mv16
;

60 
	mb0
:1;

61 
	mb1
:1;

62 
	mb2
:1;

63 
	mb3
:1;

64 
	mb4
:1;

65 
	mb5
:1;

66 
	mb6
:1;

67 
	mb7
:1;

68 
	mb8
:1;

69 
	mb9
:1;

70 
	mb10
:1;

71 
	mb11
:1;

72 
	mb12
:1;

73 
	mb13
:1;

74 
	mb14
:1;

75 
	mb15
:1;

76 } 
	mbô
;

77 } 
	tINT16
;

79 
ölöe
 

80 
	$bôINT16
 (
v16
, 
i
) {

81 
	#_b
(
u
,
i
Ë((*(
INT16
 *)&(u)).
bô
.
b
##i)

	)

82 
	#_c
(
i
Ëi:  
	`_b
(
v
,i)

	)

83 
INT16
 
v
 = { .
v16
 = v16 };

84 
i
) {

85 
	`_c
(0);

86 
	`_c
(1);

87 
	`_c
(2);

88 
	`_c
(3);

89 
	`_c
(4);

90 
	`_c
(5);

91 
	`_c
(6);

92 
	`_c
(7);

93 
	`_c
(8);

94 
	`_c
(9);

95 
	`_c
(10);

96 
	`_c
(11);

97 
	`_c
(12);

98 
	`_c
(13);

99 
	`_c
(14);

100 
	`_c
(15);

102 #unde‡
_c


103 #unde‡
_b


105 
	}
}

107 
	#£tBIT16
(
v16
,
i
Ë((v16Ë|
BIT
##i)

	)

108 
	#˛rBIT16
(
v16
,
i
Ë((v16Ë&~
BIT
##i)

	)

109 
	#⁄BIT16
(
v16
,
i
Ë((v16Ë& 
BIT
##i)

	)

110 
	#offBIT16
(
v16
,
i
Ë!((v16Ë& 
BIT
##i)

	)

112 
ölöe
 

113 
	$¥ötINT16
 (
v16
) {

114 
INT16
 
v
 = { .
v16
 = v16 };

115 
	`¥ötf
("%5d %d:%d:%d:%d %d:%d:%d:%d %d:%d:%d:%d %d:%d:%d:%d \n",

116 
v
.
v16
,

117 
v
.
bô
.
b0
, v.bô.
b1
, v.bô.
b2
, v.bô.
b3
, v.bô.
b4
, v.bô.
b5
,

118 
v
.
bô
.
b6
, v.bô.
b7
, v.bô.
b8
, v.bô.
b9
, v.bô.
b10
, v.bô.
b11
,

119 
v
.
bô
.
b12
, v.bô.
b13
, v.bô.
b14
, v.bô.
b15
);

120 
	}
}

122 
	uègINT32
 {

123 
	mv32
;

125 
	mb0
:1;

126 
	mb1
:1;

127 
	mb2
:1;

128 
	mb3
:1;

129 
	mb4
:1;

130 
	mb5
:1;

131 
	mb6
:1;

132 
	mb7
:1;

133 
	mb8
:1;

134 
	mb9
:1;

135 
	mb10
:1;

136 
	mb11
:1;

137 
	mb12
:1;

138 
	mb13
:1;

139 
	mb14
:1;

140 
	mb15
:1;

141 
	mb16
:1;

142 
	mb17
:1;

143 
	mb18
:1;

144 
	mb19
:1;

145 
	mb20
:1;

146 
	mb21
:1;

147 
	mb22
:1;

148 
	mb23
:1;

149 
	mb24
:1;

150 
	mb25
:1;

151 
	mb26
:1;

152 
	mb27
:1;

153 
	mb28
:1;

154 
	mb29
:1;

155 
	mb30
:1;

156 
	mb31
:1;

157 } 
	mbô
;

158 } 
	tINT32
;

160 
ölöe
 

161 
	$bôINT32
 (
v32
, 
i
) {

162 
	#_b
(
u
,
i
Ë((*(
INT32
 *)&(u)).
bô
.
b
##i)

	)

163 
	#_c
(
i
Ëi:  
	`_b
(
v
,i)

	)

164 
INT32
 
v
 = { .
v32
 = v32 };

165 
i
) {

166 
	`_c
(0);

167 
	`_c
(1);

168 
	`_c
(2);

169 
	`_c
(3);

170 
	`_c
(4);

171 
	`_c
(5);

172 
	`_c
(6);

173 
	`_c
(7);

174 
	`_c
(8);

175 
	`_c
(9);

176 
	`_c
(10);

177 
	`_c
(11);

178 
	`_c
(12);

179 
	`_c
(13);

180 
	`_c
(14);

181 
	`_c
(15);

182 
	`_c
(16);

183 
	`_c
(17);

184 
	`_c
(18);

185 
	`_c
(19);

186 
	`_c
(20);

187 
	`_c
(21);

188 
	`_c
(22);

189 
	`_c
(23);

190 
	`_c
(24);

191 
	`_c
(25);

192 
	`_c
(26);

193 
	`_c
(27);

194 
	`_c
(28);

195 
	`_c
(29);

196 
	`_c
(30);

197 
	`_c
(31);

199 #unde‡
_c


200 #unde‡
_b


202 
	}
}

204 
	#£tBIT32
(
v32
,
i
Ë((v32Ë|
BIT
##i)

	)

205 
	#˛rBIT32
(
v32
,
i
Ë((v32Ë&~
BIT
##i)

	)

206 
	#⁄BIT32
(
v32
,
i
Ë((v32Ë& 
BIT
##i)

	)

207 
	#offBIT32
(
v32
,
i
Ë!((v32Ë& 
BIT
##i)

	)

209 
ölöe
 

210 
	$¥ötINT32
 (
v32
) {

211 
INT32
 
v
 = { .
v32
 = v32 };

212 
	`¥ötf
("%10u %d:%d:%d:%d %d:%d:%d:%d %d:%d:%d:%d %d:%d:%d:%d %d:%d:%d:%d %d:%d:%d:%d %d:%d:%d:%d %d:%d:%d:%d\n",

213 
v
.
v32
,

214 
v
.
bô
.
b0
, v.bô.
b1
, v.bô.
b2
, v.bô.
b3
, v.bô.
b4
, v.bô.
b5
,

215 
v
.
bô
.
b6
, v.bô.
b7
, v.bô.
b8
, v.bô.
b9
, v.bô.
b10
, v.bô.
b11
,

216 
v
.
bô
.
b12
, v.bô.
b13
, v.bô.
b14
, v.bô.
b15
,

217 
v
.
bô
.
b16
, v.bô.
b17
, v.bô.
b18
, v.bô.
b19
, v.bô.
b20
, v.bô.
b21
,

218 
v
.
bô
.
b22
, v.bô.
b23
, v.bô.
b24
, v.bô.
b25
, v.bô.
b26
, v.bô.
b27
,

219 
v
.
bô
.
b28
, v.bô.
b29
, v.bô.
b30
, v.bô.
b31
);

220 
	}
}

222 
ölöe
 

223 
	$BITPOS
(
n
) {

224 
b
 = 0;

225 
n
--;

226 if((
n
&0xffff) == 0xffff) {

227 
b
+=16;

228 
n
>>=16;

230 if((
n
&0xff) == 0xff) {

231 
b
+=8;

232 
n
>>=8;

234 if((
n
&0xf) == 0xf) {

235 
b
+=4;

236 
n
>>=4;

238 if((
n
&0x3) == 0x3) {

239 
b
+=2;

240 
n
>>=2;

242 i‡((
n
&1) == 1) {

243 
b
++;

244 
n
>>=1;

246  
b
;

247 
	}
}

	@NXCTRL_lcd.c

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<°d¨g.h
>

24 
	~<°rög.h
>

25 
	~<NXCTRL_lcd.h
>

28 
	#LCD_CLEARDISPLAY
 0x01

	)

29 
	#LCD_RETURNHOME
 0x02

	)

30 
	#LCD_ENTRYMODESET
 0x04

	)

31 
	#LCD_DISPLAYCONTROL
 0x08

	)

32 
	#LCD_CURSORSHIFT
 0x10

	)

33 
	#LCD_FUNCTIONSET
 0x20

	)

34 
	#LCD_SETCGRAMADDR
 0x40

	)

35 
	#LCD_SETDDRAMADDR
 0x80

	)

38 
	#LCD_ENTRYRIGHT
 0x00

	)

39 
	#LCD_ENTRYLEFT
 0x02

	)

40 
	#LCD_ENTRYSHIFTINCREMENT
 0x01

	)

41 
	#LCD_ENTRYSHIFTDECREMENT
 0x00

	)

44 
	#LCD_DISPLAYON
 0x04

	)

45 
	#LCD_DISPLAYOFF
 0x00

	)

46 
	#LCD_CURSORON
 0x02

	)

47 
	#LCD_CURSOROFF
 0x00

	)

48 
	#LCD_BLINKON
 0x01

	)

49 
	#LCD_BLINKOFF
 0x00

	)

52 
	#LCD_DISPLAYMOVE
 0x08

	)

53 
	#LCD_CURSORMOVE
 0x00

	)

54 
	#LCD_MOVERIGHT
 0x04

	)

55 
	#LCD_MOVELEFT
 0x00

	)

58 
	#LCD_8BITMODE
 0x10

	)

59 
	#LCD_4BITMODE
 0x00

	)

60 
	#LCD_2LINE
 0x08

	)

61 
	#LCD_1LINE
 0x00

	)

62 
	#LCD_5x10DOTS
 0x04

	)

63 
	#LCD_5x8DOTS
 0x00

	)

65 
	#RSBANK
 
pLCD
->
nRSB™k


	)

66 
	#RSPIN
 
pLCD
->
nRSPö


	)

67 
	#RWBANK
 
pLCD
->
nRWB™k


	)

68 
	#RWPIN
 
pLCD
->
nRWPö


	)

69 
	#ENBANK
 
pLCD
->
nE«bÀB™k


	)

70 
	#ENPIN
 
pLCD
->
nE«bÀPö


	)

71 
	#D0BANK
 
pLCD
->
∫D©aB™ks
[0]

	)

72 
	#D1BANK
 
pLCD
->
∫D©aB™ks
[1]

	)

73 
	#D2BANK
 
pLCD
->
∫D©aB™ks
[2]

	)

74 
	#D3BANK
 
pLCD
->
∫D©aB™ks
[3]

	)

75 
	#D4BANK
 
pLCD
->
∫D©aB™ks
[4]

	)

76 
	#D5BANK
 
pLCD
->
∫D©aB™ks
[5]

	)

77 
	#D6BANK
 
pLCD
->
∫D©aB™ks
[6]

	)

78 
	#D7BANK
 
pLCD
->
∫D©aB™ks
[7]

	)

79 
	#D0PIN
 
pLCD
->
∫D©aPös
[0]

	)

80 
	#D1PIN
 
pLCD
->
∫D©aPös
[1]

	)

81 
	#D2PIN
 
pLCD
->
∫D©aPös
[2]

	)

82 
	#D3PIN
 
pLCD
->
∫D©aPös
[3]

	)

83 
	#D4PIN
 
pLCD
->
∫D©aPös
[4]

	)

84 
	#D5PIN
 
pLCD
->
∫D©aPös
[5]

	)

85 
	#D6PIN
 
pLCD
->
∫D©aPös
[6]

	)

86 
	#D7PIN
 
pLCD
->
∫D©aPös
[7]

	)

89 
	$__NXCTRLLCDPul£E«bÀ
 (
NXCTRLLCD
 *
pLCD
) {

90 
	`NXCTRLDigôÆWrôe
(
ENBANK
, 
ENPIN
, 
NXCTRL_LOW
);

91 
	`NXCTRLSÀï
(0, 1);

92 
	`NXCTRLDigôÆWrôe
(
ENBANK
, 
ENPIN
, 
NXCTRL_HIGH
);

93 
	`NXCTRLSÀï
(0, 1);

94 
	`NXCTRLDigôÆWrôe
(
ENBANK
, 
ENPIN
, 
NXCTRL_LOW
);

95 
	`NXCTRLSÀï
(0, 100);

96 
	}
}

99 
	$__NXCTRLLCDWrôe4Bôs
 (
NXCTRLLCD
 *
pLCD
, 
uöt8_t
 
nVÆue
) {

100 
i
;

101 
i
 = 0; i < 4; i++)

102 
	`NXCTRLDigôÆWrôe
(
pLCD
->
∫D©aB™ks
[
i
],ÖLCD->
∫D©aPös
[i],

103 (
nVÆue
 >> 
i
) & 0x01);

104 
	`__NXCTRLLCDPul£E«bÀ
(
pLCD
);

105 
	}
}

108 
	$__NXCTRLLCDWrôe8Bôs
 (
NXCTRLLCD
 *
pLCD
, 
uöt8_t
 
nVÆue
) {

109 
i
;

110 
i
 = 0; i < 8; i++)

111 
	`NXCTRLDigôÆWrôe
(
pLCD
->
∫D©aB™ks
[
i
],ÖLCD->
∫D©aPös
[i],

112 (
nVÆue
 >> 
i
) & 0x01);

113 
	`__NXCTRLLCDPul£E«bÀ
(
pLCD
);

114 
	}
}

117 
	$__NXCTRLLCDSíd
 (
NXCTRLLCD
 *
pLCD
, 
uöt8_t
 
nVÆue
, uöt8_à
nMode
) {

118 
	`NXCTRLDigôÆWrôe
(
RSBANK
, 
RSPIN
, 
nMode
);

120 i‡(
RWBANK
 =
NXCTRL_P8
 || RWBANK =
NXCTRL_P9
)

121 i‡(
RWPIN
 >
NXCTRL_PIN01
 && RWPIN <
NXCTRL_PIN46
)

122 
	`NXCTRLDigôÆWrôe
(
RWBANK
, 
RWPIN
, 
NXCTRL_LOW
);

124 i‡(
pLCD
->
nDi•œyFun˘i⁄
 & 
LCD_8BITMODE
)

125 
	`__NXCTRLLCDWrôe8Bôs
(
pLCD
, 
nVÆue
);

127 
	`__NXCTRLLCDWrôe4Bôs
(
pLCD
, 
nVÆue
>>4);

128 
	`__NXCTRLLCDWrôe4Bôs
(
pLCD
, 
nVÆue
);

130 
	}
}

133 
	$NXCTRLLCDInô
 (
NXCTRLLCD
 *
pLCD
,

134 
nRSB™k
, 
nRSPö
,

135 
nRWB™k
, 
nRWPö
,

136 
nE«bÀB™k
, 
nE«bÀPö
,

137 
nD0B™k
, 
nD0Pö
,

138 
nD1B™k
, 
nD1Pö
,

139 
nD2B™k
, 
nD2Pö
,

140 
nD3B™k
, 
nD3Pö
,

141 
nD4B™k
, 
nD4Pö
,

142 
nD5B™k
, 
nD5Pö
,

143 
nD6B™k
, 
nD6Pö
,

144 
nD7B™k
, 
nD7Pö
) {

145 
i
;

147 i‡(!
pLCD
) {

148 
	`Ârötf
(
°dîr
, "NXCTRLLCDInit: invalid LCD\n");

152 
RSBANK
 = 
nRSB™k
; 
RSPIN
 = 
nRSPö
;

153 
RWBANK
 = 
nRWB™k
; 
RWPIN
 = 
nRWPö
;

154 
ENBANK
 = 
nE«bÀB™k
; 
ENPIN
 = 
nE«bÀPö
;

156 
D0BANK
 = 
nD0B™k
; 
D0PIN
 = 
nD0Pö
;

157 
D1BANK
 = 
nD1B™k
; 
D1PIN
 = 
nD1Pö
;

158 
D2BANK
 = 
nD2B™k
; 
D2PIN
 = 
nD2Pö
;

159 
D3BANK
 = 
nD3B™k
; 
D3PIN
 = 
nD3Pö
;

160 
D4BANK
 = 
nD4B™k
; 
D4PIN
 = 
nD4Pö
;

161 
D5BANK
 = 
nD5B™k
; 
D5PIN
 = 
nD5Pö
;

162 
D6BANK
 = 
nD6B™k
; 
D6PIN
 = 
nD6Pö
;

163 
D7BANK
 = 
nD7B™k
; 
D7PIN
 = 
nD7Pö
;

165 
	`NXCTRLPöMode
(
RSBANK
, 
RSPIN
, 
NXCTRL_OUTPUT
);

166 i‡(
RWBANK
 =
NXCTRL_P8
 || RWBANK =
NXCTRL_P9
)

167 i‡(
RWPIN
 >
NXCTRL_PIN01
 && RWPIN <
NXCTRL_PIN46
)

168 
	`NXCTRLPöMode
(
RWBANK
, 
RWPIN
, 
NXCTRL_OUTPUT
);

169 
	`NXCTRLPöMode
(
ENBANK
, 
ENPIN
, 
NXCTRL_OUTPUT
);

171 i‡(
D0PIN
 >
NXCTRL_PIN01
 && 
D4PIN
 >= 255) {

172 
pLCD
->
nDi•œyFun˘i⁄
 = 
LCD_4BITMODE
 | 
LCD_1LINE
 | 
LCD_5x8DOTS
;

173 
i
 = 0; i < 4; i++)

174 
	`NXCTRLPöMode
(
pLCD
->
∫D©aB™ks
[
i
],ÖLCD->
∫D©aPös
[i], 
NXCTRL_OUTPUT
);

176 
pLCD
->
nDi•œyFun˘i⁄
 = 
LCD_8BITMODE
 | 
LCD_1LINE
 | 
LCD_5x8DOTS
;

177 
i
 = 0; i < 8; i++)

178 
	`NXCTRLPöMode
(
pLCD
->
∫D©aB™ks
[
i
],ÖLCD->
∫D©aPös
[i], 
NXCTRL_OUTPUT
);

181 
	`NXCTRLLCDBegö
(
pLCD
, 16, 1);

184 
	}
}

187 
	$NXCTRLLCDBegö
 (
NXCTRLLCD
 *
pLCD
, 
uöt8_t
 
nCﬁs
, uöt8_à
nRows
) {

188 i‡(
nRows
 > 1)

189 
pLCD
->
nDi•œyFun˘i⁄
 |
LCD_2LINE
;

191 
pLCD
->
nLöes
 = 
nRows
;

192 
pLCD
->
nCuºLöe
 = 0;

197 
	`NXCTRLSÀï
(50, 0);

199 
	`NXCTRLDigôÆWrôe
(
RSBANK
, 
RSPIN
, 
NXCTRL_LOW
);

200 
	`NXCTRLDigôÆWrôe
(
ENBANK
, 
ENPIN
, 
NXCTRL_LOW
);

202 i‡(
RWBANK
 =
NXCTRL_P8
 || RWBANK =
NXCTRL_P9
)

203 i‡(
RWPIN
 >
NXCTRL_PIN01
 && RWPIN <
NXCTRL_PIN46
)

204 
	`NXCTRLDigôÆWrôe
(
RWBANK
, 
RWPIN
, 
NXCTRL_LOW
);

206 i‡(!(
pLCD
->
nDi•œyFun˘i⁄
 & 
LCD_8BITMODE
)) {

207 
	`__NXCTRLLCDWrôe4Bôs
(
pLCD
, 0x03);

208 
	`NXCTRLSÀï
(10, 0);

209 
	`__NXCTRLLCDWrôe4Bôs
(
pLCD
, 0x03);

210 
	`NXCTRLSÀï
(10, 0);

211 
	`__NXCTRLLCDWrôe4Bôs
(
pLCD
, 0x03);

212 
	`NXCTRLSÀï
(10, 0);

213 
	`__NXCTRLLCDWrôe4Bôs
(
pLCD
, 0x02);

215 
	`NXCTRLLCDComm™d
(
pLCD
, 
LCD_FUNCTIONSET
 |ÖLCD->
nDi•œyFun˘i⁄
);

216 
	`NXCTRLSÀï
(10, 0);

217 
	`NXCTRLLCDComm™d
(
pLCD
, 
LCD_FUNCTIONSET
 |ÖLCD->
nDi•œyFun˘i⁄
);

218 
	`NXCTRLSÀï
(10, 0);

219 
	`NXCTRLLCDComm™d
(
pLCD
, 
LCD_FUNCTIONSET
 |ÖLCD->
nDi•œyFun˘i⁄
);

222 
	`NXCTRLLCDComm™d
(
pLCD
, 
LCD_FUNCTIONSET
 |ÖLCD->
nDi•œyFun˘i⁄
);

224 
pLCD
->
nDi•œyC⁄åﬁ
 = 
LCD_DISPLAYON
 | 
LCD_CURSOROFF
 | 
LCD_BLINKOFF
;

225 
	`NXCTRLLCDDi•œy
(
pLCD
, 
NXCTRL_ON
);

227 
	`NXCTRLLCDCÀ¨
(
pLCD
);

229 
pLCD
->
nDi•œyMode
 = 
LCD_ENTRYLEFT
 | 
LCD_ENTRYSHIFTDECREMENT
;

230 
	`NXCTRLLCDComm™d
(
pLCD
, 
LCD_ENTRYMODESET
 |ÖLCD->
nDi•œyMode
);

231 
	}
}

234 
	$NXCTRLLCDCÀ¨
 (
NXCTRLLCD
 *
pLCD
) {

235 
	`NXCTRLLCDComm™d
(
pLCD
, 
LCD_CLEARDISPLAY
);

236 
	`NXCTRLSÀï
(10, 0);

237 
	}
}

240 
	$NXCTRLLCDHome
 (
NXCTRLLCD
 *
pLCD
) {

241 
	`NXCTRLLCDComm™d
(
pLCD
, 
LCD_RETURNHOME
);

242 
	`NXCTRLSÀï
(10, 0);

243 
	}
}

246 
	$NXCTRLLCDDi•œy
 (
NXCTRLLCD
 *
pLCD
, 
NXCTRL_BOOL
 
f
) {

247 i‡(
f
)

248 
pLCD
->
nDi•œyC⁄åﬁ
 |
LCD_DISPLAYON
;

250 
pLCD
->
nDi•œyC⁄åﬁ
 &~
LCD_DISPLAYON
;

251 
	`NXCTRLLCDComm™d
(
pLCD
, 
LCD_DISPLAYCONTROL
 |ÖLCD->
nDi•œyC⁄åﬁ
);

252 
	}
}

255 
	$NXCTRLLCDBlök
 (
NXCTRLLCD
 *
pLCD
, 
NXCTRL_BOOL
 
f
) {

256 i‡(
f
)

257 
pLCD
->
nDi•œyC⁄åﬁ
 |
LCD_BLINKON
;

259 
pLCD
->
nDi•œyC⁄åﬁ
 &~
LCD_BLINKON
;

260 
	`NXCTRLLCDComm™d
(
pLCD
, 
LCD_DISPLAYCONTROL
 |ÖLCD->
nDi•œyC⁄åﬁ
);

261 
	}
}

264 
	$NXCTRLLCDCurs‹
 (
NXCTRLLCD
 *
pLCD
, 
NXCTRL_BOOL
 
f
) {

265 i‡(
f
)

266 
pLCD
->
nDi•œyC⁄åﬁ
 |
LCD_CURSORON
;

268 
pLCD
->
nDi•œyC⁄åﬁ
 &~
LCD_CURSORON
;

269 
	`NXCTRLLCDComm™d
(
pLCD
, 
LCD_DISPLAYCONTROL
 |ÖLCD->
nDi•œyC⁄åﬁ
);

270 
	}
}

273 
	$NXCTRLLCDS¸ﬁlDi•œy
 (
NXCTRLLCD
 *
pLCD
, 
NXCTRL_BOOL
 
fToLe·
) {

274 i‡(
fToLe·
)

275 
	`NXCTRLLCDComm™d
(
pLCD
, 
LCD_CURSORSHIFT
 | 
LCD_DISPLAYMOVE
 | 
LCD_MOVELEFT
);

277 
	`NXCTRLLCDComm™d
(
pLCD
, 
LCD_CURSORSHIFT
 | 
LCD_DISPLAYMOVE
 | 
LCD_MOVERIGHT
);

278 
	}
}

281 
	$NXCTRLLCDAutoS¸ﬁl
 (
NXCTRLLCD
 *
pLCD
, 
NXCTRL_BOOL
 
f
) {

282 i‡(
f
)

283 
pLCD
->
nDi•œyMode
 |
LCD_ENTRYSHIFTINCREMENT
;

285 
pLCD
->
nDi•œyMode
 &~
LCD_ENTRYSHIFTINCREMENT
;

286 
	`NXCTRLLCDComm™d
(
pLCD
, 
LCD_ENTRYMODESET
 |ÖLCD->
nDi•œyMode
);

287 
	}
}

290 
	$NXCTRLLCDCª©eCh¨
 (
NXCTRLLCD
 *
pLCD
, 
uöt8_t
 
nLoc
, uöt8_à
rch
[]) {

291 
i
;

292 
nLoc
 &= 0x07;

293 
	`NXCTRLLCDComm™d
(
pLCD
, 
LCD_SETCGRAMADDR
 | (
nLoc
 << 3));

294 
i
 = 0; i < 8; i++)

295 
	`NXCTRLLCDWrôe
(
pLCD
, 
rch
[
i
]);

296 
	}
}

299 
	$NXCTRLLCDSëCurs‹
 (
NXCTRLLCD
 *
pLCD
, 
uöt8_t
 
nCﬁ
, uöt8_à
nRow
) {

300 
nRowOff£ts
[] = { 0x00, 0x40, 0x14, 0x54 };

301 i‡(
nRow
 >
pLCD
->
nLöes
)

302 
nRow
 = 
pLCD
->
nLöes
 - 1;

303 
	`NXCTRLLCDComm™d
(
pLCD
, 
LCD_SETDDRAMADDR
 | (
nCﬁ
 + 
nRowOff£ts
[
nRow
]));

304 
	}
}

307 
	$NXCTRLLCDComm™d
 (
NXCTRLLCD
 *
pLCD
, 
uöt8_t
 
nVÆue
) {

308 
	`__NXCTRLLCDSíd
(
pLCD
, 
nVÆue
, 
NXCTRL_LOW
);

309 
	}
}

311 
size_t


312 
	$NXCTRLLCDWrôe
 (
NXCTRLLCD
 *
pLCD
, 
uöt8_t
 
nVÆue
) {

313 
	`__NXCTRLLCDSíd
(
pLCD
, 
nVÆue
, 
NXCTRL_HIGH
);

315 
	}
}

317 
size_t


318 
	$NXCTRLLCDPutCh¨
 (
NXCTRLLCD
 *
pLCD
, 
ch
) {

319  
	`NXCTRLLCDWrôe
(
pLCD
, 
ch
);

320 
	}
}

322 
size_t


323 
	$NXCTRLLCDPutSå
 (
NXCTRLLCD
 *
pLCD
, c⁄° 
°r
[]) {

324 
i
;

325 
size_t
 
n
 = 
	`°æí
(
°r
);

326 
i
 = 0; i < 
n
; i++)

327 
	`NXCTRLLCDWrôe
(
pLCD
, 
°r
[
i
]);

328  
n
;

329 
	}
}

331 
size_t


332 
	$NXCTRLLCDPröt
 (
NXCTRLLCD
 *
pLCD
, c⁄° *
msg
, ...) {

333 
va_li°
 
¨gp
;

334 
rchBuf
[
BUFSIZ
];

335 
	`va_°¨t
(
¨gp
, 
msg
);

336 
	`v¢¥ötf
(
rchBuf
, 
BUFSIZ
-1, 
msg
, 
¨gp
);

337 
	`va_íd
(
¨gp
);

338  
	`NXCTRLLCDPutSå
(
pLCD
, 
rchBuf
);

339 
	}
}

	@NXCTRL_lcd.h

21 #i‚de‡
__NXCTRL_LCD_HEADER__


22 
	#__NXCTRL_LCD_HEADER__


	)

24 
	~<NXCTRL.h
>

25 
	~<öây≥s.h
>

27 
	s__ègNXCTRLCD
 {

28 
uöt8_t
 
	mnRSB™k
, 
	mnRSPö
;

29 
uöt8_t
 
	mnRWB™k
, 
	mnRWPö
;

30 
uöt8_t
 
	mnE«bÀB™k
, 
	mnE«bÀPö
;

31 
uöt8_t
 
	m∫D©aB™ks
[8], 
	m∫D©aPös
[8];

32 
uöt8_t
 
	mnDi•œyFun˘i⁄
;

33 
uöt8_t
 
	mnDi•œyC⁄åﬁ
;

34 
uöt8_t
 
	mnDi•œyMode
;

35 
uöt8_t
 
	mnInôülized
;

36 
uöt8_t
 
	mnLöes
, 
	mnCuºLöe
;

37 } 
	tNXCTRLLCD
;

39 
NXCTRLLCDInô
 (
NXCTRLLCD
 *
pLCD
,

40 
nRSB™k
, 
nRSPö
,

41 
nRWB™k
, 
nRWPö
,

42 
nE«bÀB™k
, 
nE«bÀPö
,

43 
nD0B™k
, 
nD0Pö
,

44 
nD1B™k
, 
nD1Pö
,

45 
nD2B™k
, 
nD2Pö
,

46 
nD3B™k
, 
nD3Pö
,

47 
nD4B™k
, 
nD4Pö
,

48 
nD5B™k
, 
nD5Pö
,

49 
nD6B™k
, 
nD6Pö
,

50 
nD7B™k
, 
nD7Pö
);

52 
NXCTRLLCDBegö
 (
NXCTRLLCD
 *
pLCD
, 
uöt8_t
 
nCﬁs
, uöt8_à
nRows
);

54 
NXCTRLLCDCÀ¨
 (
NXCTRLLCD
 *
pLCD
);

55 
NXCTRLLCDHome
 (
NXCTRLLCD
 *
pLCD
);

57 
NXCTRLLCDDi•œy
 (
NXCTRLLCD
 *
pLCD
, 
NXCTRL_BOOL
 
f
);

58 
NXCTRLLCDBlök
 (
NXCTRLLCD
 *
pLCD
, 
NXCTRL_BOOL
 
f
);

59 
NXCTRLLCDCurs‹
 (
NXCTRLLCD
 *
pLCD
, 
NXCTRL_BOOL
 
f
);

60 
NXCTRLLCDS¸ﬁlDi•œy
 (
NXCTRLLCD
 *
pLCD
, 
NXCTRL_BOOL
 
fToLe·
);

61 
NXCTRLLCDAutoS¸ﬁl
 (
NXCTRLLCD
 *
pLCD
, 
NXCTRL_BOOL
 
f
);

63 
NXCTRLLCDCª©eCh¨
 (
NXCTRLLCD
 *
pLCD
, 
uöt8_t
 
nLoc
, uöt8_à
rch
[]);

64 
NXCTRLLCDSëCurs‹
 (
NXCTRLLCD
 *
pLCD
, 
uöt8_t
 
nCﬁ
, uöt8_à
nRow
);

65 
size_t
 
NXCTRLLCDWrôe
 (
NXCTRLLCD
 *
pLCD
, 
uöt8_t
 
nVÆue
);

66 
NXCTRLLCDComm™d
 (
NXCTRLLCD
 *
pLCD
, 
uöt8_t
 
nVÆue
);

68 
size_t
 
NXCTRLLCDPutCh¨
 (
NXCTRLLCD
 *
pLCD
, 
ch
);

69 
size_t
 
NXCTRLLCDPutSå
 (
NXCTRLLCD
 *
pLCD
, c⁄° 
°r
[]);

70 
size_t
 
NXCTRLLCDPröt
 (
NXCTRLLCD
 *
pLCD
, c⁄° *
msg
, ...);

	@NXCTRL_oled.c

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<°d¨g.h
>

24 
	~<°rög.h
>

25 
	~<NXCTRL_ﬁed.h
>

26 
	~<NXCTRL_ﬁed_¥iv.h
>

28 
NXCTRL_VOID


29 
	$NXCTRLOLEDComm™d
 (
NXCTRLOLED
 *
pOLED
, 
NXCTRL_UINT8
 
chByã
) {

30 
NXCTRL_UINT8
 
chCmd
[1];

31 
chCmd
[0] = 
chByã
;

32 
	`NXCTRLDigôÆWrôe
(
pOLED
->
nDCB™k
,ÖOLED->
nDCPö
, 
NXCTRL_LOW
);

33 
	`NXCTRLSPIWrôe
(
pOLED
->
nSPIFD
, 
chCmd
, 
NULL
, 1);

34 
	}
}

36 
NXCTRL_VOID


37 
	$NXCTRLOLEDD©a
 (
NXCTRLOLED
 *
pOLED
, 
NXCTRL_UINT8
 
chByã
) {

38 
NXCTRL_UINT8
 
chD©a
[1];

39 
chD©a
[0] = 
chByã
;

40 
	`NXCTRLDigôÆWrôe
(
pOLED
->
nDCB™k
,ÖOLED->
nDCPö
, 
NXCTRL_HIGH
);

41 
	`NXCTRLSPIWrôe
(
pOLED
->
nSPIFD
, 
chD©a
, 
NULL
, 1);

42 
	}
}

44 
NXCTRL_VOID


45 
	$NXCTRLOLEDInô
 (
NXCTRLOLED
 *
pOLED
,

46 
NXCTRL_UINT8
 
nDCB™k
, NXCTRL_UINT8 
nDCPö
,

47 
NXCTRL_UINT8
 
nRSTB™k
, NXCTRL_UINT8 
nRSTPö
,

48 
nSPIFD
) {

49 
	`NXCTRLPöMode
(
nDCB™k
, 
nDCPö
, 
NXCTRL_OUTPUT
);

50 
	`NXCTRLPöMode
(
nRSTB™k
, 
nRSTPö
, 
NXCTRL_OUTPUT
);

52 
pOLED
->
nDCB™k
 =ÇDCBank;

53 
pOLED
->
nDCPö
 =ÇDCPin;

54 
pOLED
->
nRSTB™k
 =ÇRSTBank;

55 
pOLED
->
nRSTPö
 =ÇRSTPin;

56 
pOLED
->
nSPIFD
 =ÇSPIFD;

58 
pOLED
->
nCurs‹X
 =ÖOLED->
nCurs‹Y
 = 0;

60 
	`NXCTRLDigôÆWrôe
(
pOLED
->
nRSTB™k
,ÖOLED->
nRSTPö
, 
NXCTRL_HIGH
);

61 
	`NXCTRLSÀï
(100, 0);

62 
	`NXCTRLDigôÆWrôe
(
pOLED
->
nRSTB™k
,ÖOLED->
nRSTPö
, 
NXCTRL_LOW
);

63 
	`NXCTRLSÀï
(100, 0);

64 
	`NXCTRLDigôÆWrôe
(
pOLED
->
nRSTB™k
,ÖOLED->
nRSTPö
, 
NXCTRL_HIGH
);

65 
	`NXCTRLSÀï
(100, 0);

67 
	`NXCTRLOLEDComm™d
(
pOLED
, 
SSD1306_DISPLAYOFF
);

68 
	`NXCTRLOLEDComm™d
(
pOLED
, 
SSD1306_SETDISPLAYCLOCKDIV
);

69 
	`NXCTRLOLEDComm™d
(
pOLED
, 0x80);

70 
	`NXCTRLOLEDComm™d
(
pOLED
, 
SSD1306_SETMULTIPLEX
);

71 
	`NXCTRLOLEDComm™d
(
pOLED
, 0x3F);

72 
	`NXCTRLOLEDComm™d
(
pOLED
, 
SSD1306_SETDISPLAYOFFSET
);

73 
	`NXCTRLOLEDComm™d
(
pOLED
, 0x00);

74 
	`NXCTRLOLEDComm™d
(
pOLED
, 
SSD1306_SETSTARTLINE
 | 0x0);

75 
	`NXCTRLOLEDComm™d
(
pOLED
, 
SSD1306_CHARGEPUMP
);

76 
	`NXCTRLOLEDComm™d
(
pOLED
, 0x14);

78 
	`NXCTRLOLEDComm™d
(
pOLED
, 
SSD1306_MEMORYMODE
);

79 
	`NXCTRLOLEDComm™d
(
pOLED
, 0x00);

80 
	`NXCTRLOLEDComm™d
(
pOLED
, 
SSD1306_SEGREMAP
 | 0x1);

81 
	`NXCTRLOLEDComm™d
(
pOLED
, 
SSD1306_COMSCANDEC
);

82 
	`NXCTRLOLEDComm™d
(
pOLED
, 
SSD1306_SETCOMPINS
);

83 
	`NXCTRLOLEDComm™d
(
pOLED
, 0x12);

84 
	`NXCTRLOLEDComm™d
(
pOLED
, 
SSD1306_SETCONTRAST
);

85 
	`NXCTRLOLEDComm™d
(
pOLED
, 0xCF);

87 
	`NXCTRLOLEDComm™d
(
pOLED
, 
SSD1306_SETPRECHARGE
);

88 
	`NXCTRLOLEDComm™d
(
pOLED
, 0xF1);

90 
	`NXCTRLOLEDComm™d
(
pOLED
, 
SSD1306_SETVCOMDETECT
);

91 
	`NXCTRLOLEDComm™d
(
pOLED
, 0x40);

93 
	`NXCTRLOLEDComm™d
(
pOLED
, 
SSD1306_COLUMNADDR
);

94 
	`NXCTRLOLEDComm™d
(
pOLED
, 0);

95 
	`NXCTRLOLEDComm™d
(
pOLED
, 127);

97 
	`NXCTRLOLEDComm™d
(
pOLED
, 
SSD1306_PAGEADDR
);

98 
	`NXCTRLOLEDComm™d
(
pOLED
, 0x00);

99 
	`NXCTRLOLEDComm™d
(
pOLED
, 0x07);

101 
	`NXCTRLOLEDComm™d
(
pOLED
, 
SSD1306_DISPLAYALLON_RESUME
);

102 
	`NXCTRLOLEDComm™d
(
pOLED
, 
SSD1306_NORMALDISPLAY
);

104 
	`NXCTRLOLEDComm™d
(
pOLED
, 
SSD1306_DISPLAYON
);

106 
	`mem£t
(
pOLED
->
rchBuf
, 0, 
OLED_BUF_SIZE
);

107 
	`NXCTRLOLEDUpd©eDi•œy
(
pOLED
);

108 
	}
}

110 
NXCTRL_VOID


111 
	$NXCTRLOLEDUpd©eDi•œy
 (
NXCTRLOLED
 *
pOLED
) {

112 
	`NXCTRLDigôÆWrôe
(
pOLED
->
nDCB™k
,ÖOLED->
nDCPö
, 
NXCTRL_HIGH
);

113 
	`NXCTRLSPIWrôe
(
pOLED
->
nSPIFD
,ÖOLED->
rchBuf
, 
NULL
, 
OLED_BUF_SIZE
);

114 
	}
}

116 
NXCTRL_VOID


117 
	$NXCTRLOLEDCÀ¨Di•œy
 (
NXCTRLOLED
 *
pOLED
) {

118 
	`mem£t
(
pOLED
->
rchBuf
, 0, 
OLED_BUF_SIZE
);

119 
	}
}

121 
NXCTRL_VOID


122 
	$NXCTRLOLEDDi•œyN‹mÆ
 (
NXCTRLOLED
 *
pOLED
) {

123 
	`NXCTRLOLEDComm™d
(
pOLED
, 
SSD1306_NORMALDISPLAY
);

124 
	}
}

126 
NXCTRL_VOID


127 
	$NXCTRLOLEDDi•œyInvî£
 (
NXCTRLOLED
 *
pOLED
) {

128 
	`NXCTRLOLEDComm™d
(
pOLED
, 
SSD1306_INVERTDISPLAY
);

129 
	}
}

131 
NXCTRL_VOID


132 
	$NXCTRLOLEDSëB™√r
 (
NXCTRLOLED
 *
pOLED
) {

133 
	`mem˝y
(
pOLED
->
rchBuf
, 
buf„r
, 
OLED_BUF_SIZE
);

134 
	}
}

136 
NXCTRL_VOID


137 
	$NXCTRLOLEDDøwPixñ
 (
NXCTRLOLED
 *
pOLED
,

138 
NXCTRL_INT8
 
x
, NXCTRL_INT8 
y
,

139 
NXCTRL_BOOL
 
⁄Off
) {

140 
NXCTRL_INT16
 
nOff£t
;

142 i‡((
x
 < 0Ë|| (x >
OLED_WIDTH
Ë|| (
y
 < 0Ë|| (y >
OLED_HEIGHT
))

145 
nOff£t
 = 
x
 + (
y
/8Ë* 
OLED_WIDTH
;

147 i‡(
⁄Off
)

148 
pOLED
->
rchBuf
[
nOff£t
] |(1 << (
y
&7));

150 
pOLED
->
rchBuf
[
nOff£t
] &~(1 << (
y
&7));

151 
	}
}

153 
NXCTRL_VOID


154 
	$NXCTRLOLEDDøwLöe
 (
NXCTRLOLED
 *
pOLED
,

155 
NXCTRL_INT8
 
x0
, NXCTRL_INT8 
y0
,

156 
NXCTRL_INT8
 
x1
, NXCTRL_INT8 
y1
,

157 
NXCTRL_BOOL
 
⁄Off
) {

158 
NXCTRL_INT8
 
t
, 
dx
, 
dy
, 
y°ï
;

159 
NXCTRL_INT16
 
îr
;

160 
NXCTRL_INT8
 
nSãï
 = 
	`abs
(
y1
 - 
y0
Ë>ábs(
x1
 - 
x0
);

162 i‡(
nSãï
) {

163 
t
 = 
x0
;

164 
x0
 = 
y0
;

165 
y0
 = 
t
;

166 
t
 = 
x1
;

167 
x1
 = 
y1
;

168 
y1
 = 
t
;

171 i‡(
x0
 > 
x1
) {

172 
t
 = 
x0
;

173 
x0
 = 
x1
;

174 
x1
 = 
t
;

175 
t
 = 
y0
;

176 
y0
 = 
y1
;

177 
y1
 = 
t
;

180 
dx
 = 
x1
 - 
x0
;

181 
dy
 = 
	`abs
(
y1
 - 
y0
);

183 
îr
 = 
dx
 / 2;

185 i‡(
y0
 < 
y1
)

186 
y°ï
 = 1;

188 
y°ï
 = -1;

190 ; 
x0
 <
x1
; x0++) {

191 i‡(
nSãï
)

192 
	`NXCTRLOLEDDøwPixñ
(
pOLED
, 
y0
, 
x0
, 
⁄Off
);

194 
	`NXCTRLOLEDDøwPixñ
(
pOLED
, 
x0
, 
y0
, 
⁄Off
);

195 
îr
 -
dy
;

196 i‡(
îr
 < 0) {

197 
y0
 +
y°ï
;

198 
îr
 +
dx
;

201 
	}
}

203 
NXCTRL_VOID


204 
	$NXCTRLOLEDDøwCh¨
 (
NXCTRLOLED
 *
pOLED
,

205 
NXCTRL_INT8
 
x
, NXCTRL_INT8 
y
,

206 
NXCTRL_UINT8
 
ch
,

207 
NXCTRL_BOOL
 
⁄OffFG
, NXCTRL_BOOL 
⁄OffBG
) {

208 
NXCTRL_INT8
 
i
, 
j
;

210 i‡((
x
 >
OLED_WIDTH
Ë|| (
y
 >
OLED_HEIGHT
) ||

211 ((
x
 + 6 - 1Ë< 0Ë|| ((
y
 + 8 - 1) < 0))

214 
i
 = 0; i < 6; i++) {

215 
NXCTRL_UINT8
 
nLöe
;

216 i‡(
i
 == 5)

217 
nLöe
 = 0x0;

219 
nLöe
 = (*(c⁄° 
NXCTRL_UINT8
 *)(
f⁄t
 + (
ch
 * 5Ë+ 
i
));

220 
j
 = 0; j < 8; j++) {

221 i‡(
nLöe
 & 0x1) {

222 
	`NXCTRLOLEDDøwPixñ
(
pOLED
, 
x
 + 
i
, 
y
 + 
j
, 
⁄OffFG
);

223 } i‡(
⁄OffBG
 !
⁄OffFG
) {

224 
	`NXCTRLOLEDDøwPixñ
(
pOLED
, 
x
 + 
i
, 
y
 + 
j
, 
⁄OffBG
);

226 
nLöe
 >>= 1;

229 
	}
}

231 
NXCTRL_VOID


232 
	$NXCTRLOLEDSëCurs‹
 (
NXCTRLOLED
 *
pOLED
,

233 
NXCTRL_INT8
 
x
, NXCTRL_INT8 
y
) {

234 
pOLED
->
nCurs‹X
 = 
x
;

235 
pOLED
->
nCurs‹Y
 = 
y
;

236 
	}
}

238 
NXCTRL_VOID


239 
	$NXCTRLOLEDWrôeEx
 (
NXCTRLOLED
 *
pOLED
, 
NXCTRL_UINT8
 
ch
, 
NXCTRL_BOOL
 
bWøp
) {

240 i‡(
ch
 == '\n') {

241 
pOLED
->
nCurs‹Y
 += 8+2;

242 
pOLED
->
nCurs‹X
 = 0;

243 } i‡(
ch
 == '\r') {

245 
	`NXCTRLOLEDDøwCh¨
(
pOLED
,ÖOLED->
nCurs‹X
,ÖOLED->
nCurs‹Y
,

246 
ch
,

247 
NXCTRL_ON
, 
NXCTRL_OFF
);

248 
pOLED
->
nCurs‹X
 += 6;

249 i‡(
bWøp
 && (
pOLED
->
nCurs‹X
 > (
OLED_WIDTH
 - 6))) {

250 
pOLED
->
nCurs‹Y
 += 8;

251 
pOLED
->
nCurs‹X
 = 0;

254 
	}
}

256 
NXCTRL_VOID


257 
	$NXCTRLOLEDWrôe
 (
NXCTRLOLED
 *
pOLED
, 
NXCTRL_UINT8
 
ch
) {

258 
	`NXCTRLOLEDWrôeEx
(
pOLED
, 
ch
, 
NXCTRL_ON
);

259 
	}
}

261 
NXCTRL_VOID


262 
	$NXCTRLOLEDDøwFa°HLöe
 (
NXCTRLOLED
 *
pOLED
,

263 
NXCTRL_INT8
 
x
, NXCTRL_INT8 
y
,

264 
NXCTRL_INT8
 
w
, 
NXCTRL_BOOL
 
⁄Off
) {

265 
NXCTRL_UINT8
 *
pBuf
;

266 
NXCTRL_UINT8
 
chMask
;

268 i‡(
y
 < 0 || y >
OLED_HEIGHT
)

271 i‡(
x
 <0) {

272 
w
 +
x
;

273 
x
 = 0;

276 i‡((
x
 + 
w
Ë> 
OLED_WIDTH
)

277 
w
 = 
OLED_HEIGHT
 - 
x
;

279 i‡(
w
 <= 0)

282 
pBuf
 = 
pOLED
->
rchBuf
;

283 
pBuf
 +((
y
/8Ë* 
OLED_WIDTH
);

284 
pBuf
 +
x
;

286 
chMask
 = 1 << (
y
&7);

288 i‡(
⁄Off
)

289 
w
--)

290 *
pBuf
++ |
chMask
;

292 
w
--)

293 *
pBuf
++ &~
chMask
;

294 
	}
}

296 
NXCTRL_VOID


297 
	$NXCTRLOLEDDøwFa°VLöe
 (
NXCTRLOLED
 *
pOLED
,

298 
NXCTRL_INT8
 
x
, NXCTRL_INT8 
y
,

299 
NXCTRL_INT8
 
h
, 
NXCTRL_BOOL
 
⁄Off
) {

300 
NXCTRL_UINT8
 *
pBuf
 = 
pOLED
->
rchBuf
;

301 
NXCTRL_UINT8
 
nMod
;

303 i‡(
x
 < 0 || x >
OLED_WIDTH
)

306 i‡(
y
 < 0) {

307 
h
 +
y
;

308 
y
 = 0;

311 i‡((
y
 + 
h
Ë> 
OLED_HEIGHT
)

312 
h
 = 
OLED_HEIGHT
 - 
y
;

314 i‡(
h
 <= 0)

317 
pBuf
 +((
y
/8Ë* 
OLED_WIDTH
);

318 
pBuf
 +
x
;

320 
nMod
 = 
y
 & 7;

321 i‡(
nMod
) {

322 
NXCTRL_UINT8
 
rchPªMask
[8] = { 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };

323 
NXCTRL_UINT8
 
chMask
;

325 
nMod
 = 8 -ÇMod;

326 
chMask
 = 
rchPªMask
[
nMod
];

328 i‡(
h
 < 
nMod
)

329 
chMask
 &(0xFF >> (
nMod
 - 
h
));

331 i‡(
⁄Off
)

332 *
pBuf
 |
chMask
;

334 *
pBuf
 &~
chMask
;

336 i‡(
h
 < 
nMod
)

339 
h
 -
nMod
;

341 
pBuf
 +
OLED_WIDTH
;

344 i‡(
h
 >= 8) {

345 
NXCTRL_UINT8
 
chVÆ
 = 
⁄Off
 ? 255 : 0;

348 *
pBuf
 = 
chVÆ
;

349 
pBuf
 +
OLED_WIDTH
;

350 
h
 -= 8;

351 } 
h
 >= 8);

354 i‡(
h
) {

355 
NXCTRL_UINT8
 
rchPo°Mask
[8] = { 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };

356 
NXCTRL_UINT8
 
chMask
;

358 
nMod
 = 
h
 & 7;

359 
chMask
 = 
rchPo°Mask
[
nMod
];

361 i‡(
⁄Off
)

362 *
pBuf
 |
chMask
;

364 *
pBuf
 &~
chMask
;

366 
	}
}

368 
NXCTRL_VOID


369 
	$NXCTRLOLEDDøwRe˘
 (
NXCTRLOLED
 *
pOLED
,

370 
NXCTRL_INT8
 
x
, NXCTRL_INT8 
y
,

371 
NXCTRL_INT8
 
w
, NXCTRL_INT8 
h
,

372 
NXCTRL_BOOL
 
⁄Off
) {

373 
	`NXCTRLOLEDDøwFa°HLöe
(
pOLED
, 
x
, 
y
, 
w
, 
⁄Off
);

374 
	`NXCTRLOLEDDøwFa°HLöe
(
pOLED
, 
x
, 
y
 + 
h
 - 1, 
w
, 
⁄Off
);

375 
	`NXCTRLOLEDDøwFa°VLöe
(
pOLED
, 
x
, 
y
, 
h
, 
⁄Off
);

376 
	`NXCTRLOLEDDøwFa°VLöe
(
pOLED
, 
x
 + 
w
 - 1, 
y
, 
h
, 
⁄Off
);

377 
	}
}

379 
NXCTRL_VOID


380 
	$NXCTRLOLEDFûlRe˘
 (
NXCTRLOLED
 *
pOLED
,

381 
NXCTRL_INT8
 
x
, NXCTRL_INT8 
y
,

382 
NXCTRL_INT8
 
w
, NXCTRL_INT8 
h
,

383 
NXCTRL_BOOL
 
⁄Off
) {

384 
i
;

385 
i
 = 
x
; i < x + 
w
; i++)

386 
	`NXCTRLOLEDDøwFa°VLöe
(
pOLED
, 
i
, 
y
, 
h
, 
⁄Off
);

387 
	}
}

389 
NXCTRL_VOID


390 
	$NXCTRLOLEDDøwCú˛e
 (
NXCTRLOLED
 *
pOLED
,

391 
NXCTRL_INT8
 
x0
, NXCTRL_INT8 
y0
,

392 
NXCTRL_INT8
 
r
,

393 
NXCTRL_BOOL
 
⁄Off
) {

394 
NXCTRL_INT16
 
f
 = 1 - 
r
;

395 
NXCTRL_INT16
 
ddFx
 = 1;

396 
NXCTRL_INT16
 
ddFy
 = -2 * 
r
;

397 
NXCTRL_INT16
 
x
 = 0;

398 
NXCTRL_INT16
 
y
 = 
r
;

400 
	`NXCTRLOLEDDøwPixñ
(
pOLED
, 
x0
, 
y0
 + 
r
, 
⁄Off
);

401 
	`NXCTRLOLEDDøwPixñ
(
pOLED
, 
x0
, 
y0
 - 
r
, 
⁄Off
);

402 
	`NXCTRLOLEDDøwPixñ
(
pOLED
, 
x0
 + 
r
, 
y0
, 
⁄Off
);

403 
	`NXCTRLOLEDDøwPixñ
(
pOLED
, 
x0
 - 
r
, 
y0
, 
⁄Off
);

405 
x
 < 
y
) {

406 i‡(
f
 >= 0) {

407 
y
--;

408 
ddFy
 += 2;

409 
f
 +
ddFy
;

411 
x
++;

412 
ddFx
 += 2;

413 
f
 +
ddFx
;

415 
	`NXCTRLOLEDDøwPixñ
(
pOLED
, 
x0
 + 
x
, 
y0
 + 
y
, 
⁄Off
);

416 
	`NXCTRLOLEDDøwPixñ
(
pOLED
, 
x0
 - 
x
, 
y0
 + 
y
, 
⁄Off
);

417 
	`NXCTRLOLEDDøwPixñ
(
pOLED
, 
x0
 + 
x
, 
y0
 - 
y
, 
⁄Off
);

418 
	`NXCTRLOLEDDøwPixñ
(
pOLED
, 
x0
 - 
x
, 
y0
 - 
y
, 
⁄Off
);

419 
	`NXCTRLOLEDDøwPixñ
(
pOLED
, 
x0
 + 
y
, 
y0
 + 
x
, 
⁄Off
);

420 
	`NXCTRLOLEDDøwPixñ
(
pOLED
, 
x0
 - 
y
, 
y0
 + 
x
, 
⁄Off
);

421 
	`NXCTRLOLEDDøwPixñ
(
pOLED
, 
x0
 + 
y
, 
y0
 - 
x
, 
⁄Off
);

422 
	`NXCTRLOLEDDøwPixñ
(
pOLED
, 
x0
 - 
y
, 
y0
 - 
x
, 
⁄Off
);

424 
	}
}

426 
NXCTRL_VOID


427 
	$NXCTRLOLEDFûlCú˛eHñ≥r
 (
NXCTRLOLED
 *
pOLED
,

428 
NXCTRL_INT8
 
x0
, NXCTRL_INT8 
y0
,

429 
NXCTRL_INT8
 
r
,

430 
NXCTRL_INT8
 
nC‹√rName
, NXCTRL_INT8 
nDñè
,

431 
NXCTRL_BOOL
 
⁄Off
) {

432 
NXCTRL_INT16
 
f
 = 1 - 
r
;

433 
NXCTRL_INT16
 
ddFx
 = 1;

434 
NXCTRL_INT16
 
ddFy
 = -2 * 
r
;

435 
NXCTRL_INT16
 
x
 = 0;

436 
NXCTRL_INT16
 
y
 = 
r
;

438 
x
 < 
y
) {

439 i‡(
f
 >= 0) {

440 
y
--;

441 
ddFy
 += 2;

442 
f
 +
ddFy
;

444 
x
++;

445 
ddFx
 += 2;

446 
f
 +
ddFx
;

448 i‡(
nC‹√rName
 & 0x1) {

449 
	`NXCTRLOLEDDøwFa°VLöe
(
pOLED
,

450 
x0
 + 
x
, 
y0
 - 
y
,

451 2*
y
 + 1 + 
nDñè
, 
⁄Off
);

452 
	`NXCTRLOLEDDøwFa°VLöe
(
pOLED
,

453 
x0
 + 
y
, 
y0
 - 
x
,

454 2*
x
 + 1 + 
nDñè
, 
⁄Off
);

456 i‡(
nC‹√rName
 & 0x2) {

457 
	`NXCTRLOLEDDøwFa°VLöe
(
pOLED
,

458 
x0
 - 
x
, 
y0
 - 
y
,

459 2*
y
 + 1 + 
nDñè
, 
⁄Off
);

460 
	`NXCTRLOLEDDøwFa°VLöe
(
pOLED
,

461 
x0
 - 
y
, 
y0
 - 
x
,

462 2*
x
 + 1 + 
nDñè
, 
⁄Off
);

465 
	}
}

467 
NXCTRL_VOID


468 
	$NXCTRLOLEDFûlCú˛e
 (
NXCTRLOLED
 *
pOLED
,

469 
NXCTRL_INT8
 
x0
, NXCTRL_INT8 
y0
,

470 
NXCTRL_INT8
 
r
,

471 
NXCTRL_BOOL
 
⁄Off
) {

472 
	`NXCTRLOLEDDøwFa°VLöe
(
pOLED
, 
x0
, 
y0
 - 
r
, 2*∏+ 1, 
⁄Off
);

473 
	`NXCTRLOLEDFûlCú˛eHñ≥r
(
pOLED
, 
x0
, 
y0
, 
r
, 3, 0, 
⁄Off
);

474 
	}
}

476 
NXCTRL_VOID


477 
	$NXCTRLOLEDDøwCú˛eHñ≥r
 (
NXCTRLOLED
 *
pOLED
,

478 
NXCTRL_INT8
 
x0
, NXCTRL_INT8 
y0
,

479 
NXCTRL_INT8
 
r
,

480 
NXCTRL_INT8
 
nC‹√rName
,

481 
NXCTRL_BOOL
 
⁄Off
) {

482 
NXCTRL_INT16
 
f
 = 1 - 
r
;

483 
NXCTRL_INT16
 
ddFx
 = 1;

484 
NXCTRL_INT16
 
ddFy
 = -2 * 
r
;

485 
NXCTRL_INT16
 
x
 = 0;

486 
NXCTRL_INT16
 
y
 = 
r
;

488 
x
 < 
y
) {

489 i‡(
f
 >= 0) {

490 
y
--;

491 
ddFy
 += 2;

492 
f
 +
ddFy
;

494 
x
++;

495 
ddFx
 += 2;

496 
f
 +
ddFx
;

498 i‡(
nC‹√rName
 & 0x4) {

499 
	`NXCTRLOLEDDøwPixñ
(
pOLED
, 
x0
 + 
x
, 
y0
 + 
y
, 
⁄Off
);

500 
	`NXCTRLOLEDDøwPixñ
(
pOLED
, 
x0
 + 
y
, 
y0
 + 
x
, 
⁄Off
);

502 i‡(
nC‹√rName
 & 0x2) {

503 
	`NXCTRLOLEDDøwPixñ
(
pOLED
, 
x0
 + 
x
, 
y0
 - 
y
, 
⁄Off
);

504 
	`NXCTRLOLEDDøwPixñ
(
pOLED
, 
x0
 + 
y
, 
y0
 - 
x
, 
⁄Off
);

506 i‡(
nC‹√rName
 & 0x8) {

507 
	`NXCTRLOLEDDøwPixñ
(
pOLED
, 
x0
 - 
x
, 
y0
 + 
y
, 
⁄Off
);

508 
	`NXCTRLOLEDDøwPixñ
(
pOLED
, 
x0
 - 
y
, 
y0
 + 
x
, 
⁄Off
);

510 i‡(
nC‹√rName
 & 0x1) {

511 
	`NXCTRLOLEDDøwPixñ
(
pOLED
, 
x0
 - 
x
, 
y0
 - 
y
, 
⁄Off
);

512 
	`NXCTRLOLEDDøwPixñ
(
pOLED
, 
x0
 - 
y
, 
y0
 - 
x
, 
⁄Off
);

515 
	}
}

517 
NXCTRL_VOID


518 
	$NXCTRLOLEDDøwRoundRe˘
 (
NXCTRLOLED
 *
pOLED
,

519 
NXCTRL_INT8
 
x
, NXCTRL_INT8 
y
,

520 
NXCTRL_INT8
 
w
, NXCTRL_INT8 
h
,

521 
NXCTRL_INT8
 
r
,

522 
NXCTRL_BOOL
 
⁄Off
) {

523 
	`NXCTRLOLEDDøwFa°HLöe
(
pOLED
, 
x
 + 
r
, 
y
, 
w
 - 2*r, 
⁄Off
);

524 
	`NXCTRLOLEDDøwFa°HLöe
(
pOLED
, 
x
 + 
r
, 
y
 + 
h
 - 1, 
w
 - 2*r, 
⁄Off
);

525 
	`NXCTRLOLEDDøwFa°VLöe
(
pOLED
, 
x
, 
y
 + 
r
, 
h
 - 2*r, 
⁄Off
);

526 
	`NXCTRLOLEDDøwFa°VLöe
(
pOLED
, 
x
 + 
w
 - 1, 
y
 +
r
, 
h
 - 2*r, 
⁄Off
);

528 
	`NXCTRLOLEDDøwCú˛eHñ≥r
(
pOLED
, 
x
 + 
r
, 
y
 +Ñ,Ñ, 1, 
⁄Off
);

529 
	`NXCTRLOLEDDøwCú˛eHñ≥r
(
pOLED
, 
x
 + 
w
 - 
r
 - 1, 
y
 +Ñ,Ñ, 2, 
⁄Off
);

530 
	`NXCTRLOLEDDøwCú˛eHñ≥r
(
pOLED
, 
x
 + 
w
 - 
r
 - 1, 
y
 + 
h
 -Ñ - 1,Ñ, 4, 
⁄Off
);

531 
	`NXCTRLOLEDDøwCú˛eHñ≥r
(
pOLED
, 
x
 + 
r
, 
y
 + 
h
 -Ñ - 1,Ñ, 8, 
⁄Off
);

532 
	}
}

534 
NXCTRL_VOID


535 
	$NXCTRLOLEDFûlRoundRe˘
 (
NXCTRLOLED
 *
pOLED
,

536 
NXCTRL_INT8
 
x
, NXCTRL_INT8 
y
,

537 
NXCTRL_INT8
 
w
, NXCTRL_INT8 
h
,

538 
NXCTRL_INT8
 
r
,

539 
NXCTRL_BOOL
 
⁄Off
) {

540 
	`NXCTRLOLEDFûlRe˘
(
pOLED
, 
x
 + 
r
, 
y
, 
w
 - 2 *Ñ, 
h
, 
⁄Off
);

542 
	`NXCTRLOLEDFûlCú˛eHñ≥r
(
pOLED
, 
x
 + 
w
 - 
r
 - 1, 
y
 +Ñ,Ñ, 1, 
h
 - 2 *Ñ - 1, 
⁄Off
);

543 
	`NXCTRLOLEDFûlCú˛eHñ≥r
(
pOLED
, 
x
 + 
r
, 
y
 +Ñ,Ñ, 2, 
h
 - 2 *Ñ - 1, 
⁄Off
);

544 
	}
}

546 
NXCTRL_VOID


547 
	$NXCTRLOLEDDøwTrüngÀ
 (
NXCTRLOLED
 *
pOLED
,

548 
NXCTRL_INT8
 
x0
, NXCTRL_INT8 
y0
,

549 
NXCTRL_INT8
 
x1
, NXCTRL_INT8 
y1
,

550 
NXCTRL_INT8
 
x2
, NXCTRL_INT8 
y2
,

551 
NXCTRL_BOOL
 
⁄Off
) {

552 
	`NXCTRLOLEDDøwLöe
(
pOLED
, 
x0
, 
y0
, 
x1
, 
y1
, 
⁄Off
);

553 
	`NXCTRLOLEDDøwLöe
(
pOLED
, 
x1
, 
y1
, 
x2
, 
y2
, 
⁄Off
);

554 
	`NXCTRLOLEDDøwLöe
(
pOLED
, 
x2
, 
y2
, 
x0
, 
y0
, 
⁄Off
);

555 
	}
}

557 
NXCTRL_VOID


558 
	$NXCTRLOLEDFûlTrüngÀ
 (
NXCTRLOLED
 *
pOLED
,

559 
NXCTRL_INT8
 
x0
, NXCTRL_INT8 
y0
,

560 
NXCTRL_INT8
 
x1
, NXCTRL_INT8 
y1
,

561 
NXCTRL_INT8
 
x2
, NXCTRL_INT8 
y2
,

562 
NXCTRL_BOOL
 
⁄Off
) {

563 
NXCTRL_INT16
 
a
, 
b
, 
y
, 
œ°
, 
t
;

564 
NXCTRL_INT16
 
dx01
, 
dx02
, 
dx12
, 
dy01
, 
dy02
, 
dy12
, 
ß
, 
sb
;

566 i‡(
y0
 > 
y1
) {

567 
t
 = 
y0
; y0 = 
y1
; y1 =Å;

568 
t
 = 
x0
; x0 = 
x1
; x1 =Å;

570 i‡(
y1
 > 
y2
) {

571 
t
 = 
y1
; y1 = 
y2
; y2 =Å;

572 
t
 = 
x1
; x1 = 
x2
; x2 =Å;

574 i‡(
y0
 > 
y1
) {

575 
t
 = 
y0
; y0 = 
y1
; y1 =Å;

576 
t
 = 
x0
; x0 = 
x1
; x1 =Å;

579 i‡(
y0
 =
y2
) {

580 
a
 = 
b
 = 
x0
;

581 i‡(
x1
 < 
a
)á = x1;

582 i‡(
x1
 > 
b
) b = x1;

583 i‡(
x2
 < 
a
)á = x2;

584 i‡(
x2
 > 
b
) b = x2;

585 
	`NXCTRLOLEDDøwFa°HLöe
(
pOLED
, 
a
, 
y0
, 
b
 -á + 1, 
⁄Off
);

589 
dx01
 = 
x1
 - 
x0
;

590 
dy01
 = 
y1
 - 
y0
;

591 
dx02
 = 
x2
 - 
x0
;

592 
dy02
 = 
y2
 - 
y0
;

593 
dx12
 = 
x2
 - 
x1
;

594 
dy12
 = 
y2
 - 
y1
;

595 
ß
 = 0;

596 
sb
 = 0;

598 i‡(
y1
 =
y2
Ë
œ°
 = y1;

599 
œ°
 = 
y1
 - 1;

601 
y
 = 
y0
; y <
œ°
; y++) {

602 
a
 = 
x0
 + 
ß
 / 
dy01
;

603 
b
 = 
x0
 + 
sb
 / 
dy02
;

604 
ß
 +
dx01
;

605 
sb
 +
dx02
;

606 i‡(
a
 > 
b
Ë{ 
t
 =á;á = b; b =Å; }

607 
	`NXCTRLOLEDDøwFa°HLöe
(
pOLED
, 
a
, 
y
, 
b
 -á + 1, 
⁄Off
);

610 
ß
 = 
dx12
 * (
y
 - 
y1
);

611 
sb
 = 
dx02
 * (
y
 - 
y0
);

612 ; 
y
 <
y2
; y++) {

613 
a
 = 
x1
 + 
ß
 / 
dy12
;

614 
b
 = 
x0
 + 
sb
 / 
dy02
;

615 
ß
 +
dx12
;

616 
sb
 +
dx02
;

617 i‡(
a
 > 
b
Ë{ 
t
 =á;á = b; b =Å; }

618 
	`NXCTRLOLEDDøwFa°HLöe
(
pOLED
, 
a
, 
y
, 
b
 -á + 1, 
⁄Off
);

620 
	}
}

622 
NXCTRL_VOID


623 
	$NXCTRLOLEDSèπS¸ﬁlRight
 (
NXCTRLOLED
 *
pOLED
,

624 
NXCTRL_UINT8
 
nSèπ
,

625 
NXCTRL_UINT8
 
nSt›
) {

626 
	`NXCTRLOLEDComm™d
(
pOLED
, 
SSD1306_RIGHT_HORIZONTAL_SCROLL
);

627 
	`NXCTRLOLEDComm™d
(
pOLED
, 0x00);

628 
	`NXCTRLOLEDComm™d
(
pOLED
, 
nSèπ
);

629 
	`NXCTRLOLEDComm™d
(
pOLED
, 0x00);

630 
	`NXCTRLOLEDComm™d
(
pOLED
, 
nSt›
);

631 
	`NXCTRLOLEDComm™d
(
pOLED
, 0x00);

632 
	`NXCTRLOLEDComm™d
(
pOLED
, 0xFF);

633 
	`NXCTRLOLEDComm™d
(
pOLED
, 
SSD1306_ACTIVATE_SCROLL
);

634 
	}
}

636 
NXCTRL_VOID


637 
	$NXCTRLOLEDSèπS¸ﬁlLe·
 (
NXCTRLOLED
 *
pOLED
,

638 
NXCTRL_UINT8
 
nSèπ
,

639 
NXCTRL_UINT8
 
nSt›
) {

640 
	`NXCTRLOLEDComm™d
(
pOLED
, 
SSD1306_LEFT_HORIZONTAL_SCROLL
);

641 
	`NXCTRLOLEDComm™d
(
pOLED
, 0x00);

642 
	`NXCTRLOLEDComm™d
(
pOLED
, 
nSèπ
);

643 
	`NXCTRLOLEDComm™d
(
pOLED
, 0x00);

644 
	`NXCTRLOLEDComm™d
(
pOLED
, 
nSt›
);

645 
	`NXCTRLOLEDComm™d
(
pOLED
, 0x00);

646 
	`NXCTRLOLEDComm™d
(
pOLED
, 0xFF);

647 
	`NXCTRLOLEDComm™d
(
pOLED
, 
SSD1306_ACTIVATE_SCROLL
);

648 
	}
}

650 
NXCTRL_VOID


651 
	$NXCTRLOLEDSèπS¸ﬁlDügRight
 (
NXCTRLOLED
 *
pOLED
,

652 
NXCTRL_UINT8
 
nSèπ
,

653 
NXCTRL_UINT8
 
nSt›
) {

654 
	`NXCTRLOLEDComm™d
(
pOLED
, 
SSD1306_SET_VERTICAL_SCROLL_AREA
);

655 
	`NXCTRLOLEDComm™d
(
pOLED
, 0x00);

656 
	`NXCTRLOLEDComm™d
(
pOLED
, 
OLED_HEIGHT
);

657 
	`NXCTRLOLEDComm™d
(
pOLED
, 
SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL
);

658 
	`NXCTRLOLEDComm™d
(
pOLED
, 0x00);

659 
	`NXCTRLOLEDComm™d
(
pOLED
, 
nSèπ
);

660 
	`NXCTRLOLEDComm™d
(
pOLED
, 0x00);

661 
	`NXCTRLOLEDComm™d
(
pOLED
, 
nSt›
);

662 
	`NXCTRLOLEDComm™d
(
pOLED
, 0x01);

663 
	`NXCTRLOLEDComm™d
(
pOLED
, 
SSD1306_ACTIVATE_SCROLL
);

664 
	}
}

666 
NXCTRL_VOID


667 
	$NXCTRLOLEDSèπS¸ﬁlDügLe·
 (
NXCTRLOLED
 *
pOLED
,

668 
NXCTRL_UINT8
 
nSèπ
,

669 
NXCTRL_UINT8
 
nSt›
) {

670 
	`NXCTRLOLEDComm™d
(
pOLED
, 
SSD1306_SET_VERTICAL_SCROLL_AREA
);

671 
	`NXCTRLOLEDComm™d
(
pOLED
, 0x00);

672 
	`NXCTRLOLEDComm™d
(
pOLED
, 
OLED_HEIGHT
);

673 
	`NXCTRLOLEDComm™d
(
pOLED
, 
SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL
);

674 
	`NXCTRLOLEDComm™d
(
pOLED
, 0x00);

675 
	`NXCTRLOLEDComm™d
(
pOLED
, 
nSèπ
);

676 
	`NXCTRLOLEDComm™d
(
pOLED
, 0x00);

677 
	`NXCTRLOLEDComm™d
(
pOLED
, 
nSt›
);

678 
	`NXCTRLOLEDComm™d
(
pOLED
, 0x01);

679 
	`NXCTRLOLEDComm™d
(
pOLED
, 
SSD1306_ACTIVATE_SCROLL
);

680 
	}
}

682 
NXCTRL_VOID


683 
	$NXCTRLOLEDSt›S¸ﬁl
 (
NXCTRLOLED
 *
pOLED
) {

684 
	`NXCTRLOLEDComm™d
(
pOLED
, 
SSD1306_DEACTIVATE_SCROLL
);

685 
	}
}

687 
NXCTRL_VOID


688 
	$NXCTRLOLEDDøwBôm≠
 (
NXCTRLOLED
 *
pOLED
,

689 
NXCTRL_INT8
 
x
, NXCTRL_INT8 
y
,

690 c⁄° 
NXCTRL_UINT8
 *
pBôm≠
,

691 
NXCTRL_UINT16
 
w
, NXCTRL_UINT16 
h
,

692 
NXCTRL_BOOL
 
⁄Off
) {

693 
NXCTRL_INT16
 
i
, 
j
, 
nWidth
 = (
w
 + 7) / 8;

694 
j
 = 0; j < 
h
; j++) {

695 
i
 = 0; i < 
w
; i++) {

696 i‡((*(c⁄° 
NXCTRL_UINT8
 *)(
pBôm≠
 + 
j
 * 
nWidth
 + 
i
 / 8)) &

697 (128 >> (
i
 & 7)))

698 
	`NXCTRLOLEDDøwPixñ
(
pOLED
, 
x
 + 
i
, 
y
 + 
j
, 
⁄Off
);

701 
	}
}

	@NXCTRL_oled.h

21 #i‚de‡
__NXCTRL_OLED_HEADER__


22 
	#__NXCTRL_OLED_HEADER__


	)

27 
	~<NXCTRL.h
>

28 
	~<öây≥s.h
>

30 
	#OLED_WIDTH
 128

	)

31 
	#OLED_HEIGHT
 64

	)

33 
	#OLED_BUF_SIZE
 (
OLED_WIDTH
*
OLED_HEIGHT
/8)

	)

35 
	s__ègNXCTRLOLED
 {

36 
NXCTRL_UINT8
 
	mnDCB™k
, 
	mnDCPö
;

37 
NXCTRL_UINT8
 
	mnRSTB™k
, 
	mnRSTPö
;

38 
	mnSPIFD
;

39 
NXCTRL_UINT8
 
	mrchBuf
[
OLED_BUF_SIZE
];

40 
NXCTRL_INT8
 
	mnCurs‹X
, 
	mnCurs‹Y
;

41 } 
	tNXCTRLOLED
;

43 
NXCTRL_VOID
 
NXCTRLOLEDInô
 (
NXCTRLOLED
 *
pOLED
,

44 
NXCTRL_UINT8
 
nDCB™k
, NXCTRL_UINT8 
nDCPö
,

45 
NXCTRL_UINT8
 
nRSTB™k
, NXCTRL_UINT8 
nRSTPö
,

46 
nSPIFD
);

48 
NXCTRL_VOID
 
NXCTRLOLEDUpd©eDi•œy
 (
NXCTRLOLED
 *
pOLED
);

49 
NXCTRL_VOID
 
NXCTRLOLEDCÀ¨Di•œy
 (
NXCTRLOLED
 *
pOLED
);

50 
NXCTRL_VOID
 
NXCTRLOLEDDi•œyN‹mÆ
 (
NXCTRLOLED
 *
pOLED
);

51 
NXCTRL_VOID
 
NXCTRLOLEDDi•œyInvî£
 (
NXCTRLOLED
 *
pOLED
);

53 
NXCTRL_VOID
 
NXCTRLOLEDSëB™√r
 (
NXCTRLOLED
 *
pOLED
);

55 
NXCTRL_VOID
 
NXCTRLOLEDDøwPixñ
 (
NXCTRLOLED
 *
pOLED
,

56 
NXCTRL_INT8
 
x
, NXCTRL_INT8 
y
,

57 
NXCTRL_BOOL
 
⁄Off
);

58 
NXCTRL_VOID
 
NXCTRLOLEDDøwLöe
 (
NXCTRLOLED
 *
pOLED
,

59 
NXCTRL_INT8
 
x0
, NXCTRL_INT8 
y0
,

60 
NXCTRL_INT8
 
x1
, NXCTRL_INT8 
y1
,

61 
NXCTRL_BOOL
 
⁄Off
);

62 
NXCTRL_VOID
 
NXCTRLOLEDDøwRe˘
 (
NXCTRLOLED
 *
pOLED
,

63 
NXCTRL_INT8
 
x
, NXCTRL_INT8 
y
,

64 
NXCTRL_INT8
 
w
, NXCTRL_INT8 
h
,

65 
NXCTRL_BOOL
 
⁄Off
);

66 
NXCTRL_VOID
 
NXCTRLOLEDDøwRoundRe˘
 (
NXCTRLOLED
 *
pOLED
,

67 
NXCTRL_INT8
 
x
, NXCTRL_INT8 
y
,

68 
NXCTRL_INT8
 
w
, NXCTRL_INT8 
h
,

69 
NXCTRL_INT8
 
r
,

70 
NXCTRL_BOOL
 
⁄Off
);

71 
NXCTRL_VOID
 
NXCTRLOLEDDøwCú˛e
 (
NXCTRLOLED
 *
pOLED
,

72 
NXCTRL_INT8
 
x0
, NXCTRL_INT8 
y0
,

73 
NXCTRL_INT8
 
r
,

74 
NXCTRL_BOOL
 
⁄Off
);

75 
NXCTRL_VOID
 
NXCTRLOLEDDøwTrüngÀ
 (
NXCTRLOLED
 *
pOLED
,

76 
NXCTRL_INT8
 
x0
, NXCTRL_INT8 
y0
,

77 
NXCTRL_INT8
 
x1
, NXCTRL_INT8 
y1
,

78 
NXCTRL_INT8
 
x2
, NXCTRL_INT8 
y2
,

79 
NXCTRL_BOOL
 
⁄Off
);

80 
NXCTRL_VOID
 
NXCTRLOLEDDøwCh¨
 (
NXCTRLOLED
 *
pOLED
,

81 
NXCTRL_INT8
 
x
, NXCTRL_INT8 
y
,

82 
NXCTRL_UINT8
 
ch
,

83 
NXCTRL_BOOL
 
⁄OffFG
, NXCTRL_BOOL 
⁄OffBG
);

84 
NXCTRL_VOID
 
NXCTRLOLEDDøwBôm≠
 (
NXCTRLOLED
 *
pOLED
,

85 
NXCTRL_INT8
 
x
, NXCTRL_INT8 
y
,

86 c⁄° 
NXCTRL_UINT8
 *
pBôm≠
,

87 
NXCTRL_UINT16
 
w
, NXCTRL_UINT16 
h
,

88 
NXCTRL_BOOL
 
⁄Off
);

90 
NXCTRL_VOID
 
NXCTRLOLEDFûlRe˘
 (
NXCTRLOLED
 *
pOLED
,

91 
NXCTRL_INT8
 
x
, NXCTRL_INT8 
y
,

92 
NXCTRL_INT8
 
w
, NXCTRL_INT8 
h
,

93 
NXCTRL_BOOL
 
⁄Off
);

94 
NXCTRL_VOID
 
NXCTRLOLEDFûlRoundRe˘
 (
NXCTRLOLED
 *
pOLED
,

95 
NXCTRL_INT8
 
x
, NXCTRL_INT8 
y
,

96 
NXCTRL_INT8
 
w
, NXCTRL_INT8 
h
,

97 
NXCTRL_INT8
 
r
,

98 
NXCTRL_BOOL
 
⁄Off
);

99 
NXCTRL_VOID
 
NXCTRLOLEDFûlCú˛e
 (
NXCTRLOLED
 *
pOLED
,

100 
NXCTRL_INT8
 
x0
, NXCTRL_INT8 
y0
,

101 
NXCTRL_INT8
 
r
,

102 
NXCTRL_BOOL
 
⁄Off
);

103 
NXCTRL_VOID
 
NXCTRLOLEDFûlTrüngÀ
 (
NXCTRLOLED
 *
pOLED
,

104 
NXCTRL_INT8
 
x0
, NXCTRL_INT8 
y0
,

105 
NXCTRL_INT8
 
x1
, NXCTRL_INT8 
y1
,

106 
NXCTRL_INT8
 
x2
, NXCTRL_INT8 
y2
,

107 
NXCTRL_BOOL
 
⁄Off
);

109 
NXCTRL_VOID
 
NXCTRLOLEDSëCurs‹
 (
NXCTRLOLED
 *
pOLED
,

110 
NXCTRL_INT8
 
x
, NXCTRL_INT8 
y
);

111 
NXCTRL_VOID
 
NXCTRLOLEDWrôe
 (
NXCTRLOLED
 *
pOLED
, 
NXCTRL_UINT8
 
ch
);

112 
NXCTRL_VOID
 
NXCTRLOLEDWrôeEx
 (
NXCTRLOLED
 *
pOLED
, 
NXCTRL_UINT8
 
ch
,

113 
NXCTRL_BOOL
 
bWøp
);

115 
NXCTRL_VOID
 
NXCTRLOLEDSèπS¸ﬁlRight
 (
NXCTRLOLED
 *
pOLED
,

116 
NXCTRL_UINT8
 
nSèπ
,

117 
NXCTRL_UINT8
 
nSt›
);

118 
NXCTRL_VOID
 
NXCTRLOLEDSèπS¸ﬁlLe·
 (
NXCTRLOLED
 *
pOLED
,

119 
NXCTRL_UINT8
 
nSèπ
,

120 
NXCTRL_UINT8
 
nSt›
);

121 
NXCTRL_VOID
 
NXCTRLOLEDSèπS¸ﬁlDügRight
 (
NXCTRLOLED
 *
pOLED
,

122 
NXCTRL_UINT8
 
nSèπ
,

123 
NXCTRL_UINT8
 
nSt›
);

124 
NXCTRL_VOID
 
NXCTRLOLEDSèπS¸ﬁlDügLe·
 (
NXCTRLOLED
 *
pOLED
,

125 
NXCTRL_UINT8
 
nSèπ
,

126 
NXCTRL_UINT8
 
nSt›
);

127 
NXCTRL_VOID
 
NXCTRLOLEDSt›S¸ﬁl
 (
NXCTRLOLED
 *
pOLED
);

	@NXCTRL_oled_priv.h

21 #i‚de‡
__NXCTRL_OLED_PRIV_HEADER__


22 
	#__NXCTRL_OLED_PRIV_HEADER__


	)

24 
	#SSD1306_SETCONTRAST
 0x81

	)

25 
	#SSD1306_DISPLAYALLON_RESUME
 0xA4

	)

26 
	#SSD1306_DISPLAYALLON
 0xA5

	)

27 
	#SSD1306_NORMALDISPLAY
 0xA6

	)

28 
	#SSD1306_INVERTDISPLAY
 0xA7

	)

29 
	#SSD1306_DISPLAYOFF
 0xAE

	)

30 
	#SSD1306_DISPLAYON
 0xAF

	)

32 
	#SSD1306_SETDISPLAYOFFSET
 0xD3

	)

33 
	#SSD1306_SETCOMPINS
 0xDA

	)

35 
	#SSD1306_SETVCOMDETECT
 0xDB

	)

37 
	#SSD1306_SETDISPLAYCLOCKDIV
 0xD5

	)

38 
	#SSD1306_SETPRECHARGE
 0xD9

	)

40 
	#SSD1306_SETMULTIPLEX
 0xA8

	)

42 
	#SSD1306_SETLOWCOLUMN
 0x00

	)

43 
	#SSD1306_SETHIGHCOLUMN
 0x10

	)

45 
	#SSD1306_SETSTARTLINE
 0x40

	)

47 
	#SSD1306_MEMORYMODE
 0x20

	)

48 
	#SSD1306_COLUMNADDR
 0x21

	)

49 
	#SSD1306_PAGEADDR
 0x22

	)

51 
	#SSD1306_COMSCANINC
 0xC0

	)

52 
	#SSD1306_COMSCANDEC
 0xC8

	)

54 
	#SSD1306_SEGREMAP
 0xA0

	)

56 
	#SSD1306_CHARGEPUMP
 0x8D

	)

58 
	#SSD1306_EXTERNALVCC
 0x1

	)

59 
	#SSD1306_SWITCHCAPVCC
 0x2

	)

61 
	#SSD1306_ACTIVATE_SCROLL
 0x2F

	)

62 
	#SSD1306_DEACTIVATE_SCROLL
 0x2E

	)

63 
	#SSD1306_SET_VERTICAL_SCROLL_AREA
 0xA3

	)

64 
	#SSD1306_RIGHT_HORIZONTAL_SCROLL
 0x26

	)

65 
	#SSD1306_LEFT_HORIZONTAL_SCROLL
 0x27

	)

66 
	#SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL
 0x29

	)

67 
	#SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL
 0x2A

	)

69 
NXCTRL_UINT8
 
	gbuf„r
[
OLED_HEIGHT
 * 
OLED_WIDTH
 / 8] = {

138 c⁄° 
NXCTRL_UINT8
 
	gf⁄t
[] = {

	@NXCTRL_private.h

21 
	#NAPIN
 (-1)

	)

22 
	#NOBIT
 (0x0)

	)

24 
	g∫P8B™k
[] = {

25 
NAPIN
, NAPIN,

26 
GPIO1
, GPIO1,

27 
GPIO1
, GPIO1,

28 
GPIO2
, GPIO2,

29 
GPIO2
, GPIO2,

30 
GPIO1
, GPIO1,

31 
GPIO0
, GPIO0,

32 
GPIO1
, GPIO1,

33 
GPIO0
, 
GPIO2
,

34 
GPIO0
, 
GPIO1
,

35 
GPIO1
, GPIO1,

36 
GPIO1
, GPIO1,

37 
GPIO1
, GPIO1,

38 
GPIO2
, GPIO2,

39 
GPIO2
, GPIO2,

40 
GPIO0
, GPIO0,

41 
GPIO0
, 
GPIO2
,

42 
GPIO0
, 
GPIO2
,

43 
GPIO2
, GPIO2,

44 
GPIO2
, GPIO2,

45 
GPIO2
, GPIO2,

46 
GPIO2
, GPIO2,

47 
GPIO2
, GPIO2

49 
	g∫P8Pös
[] = {

50 
NOBIT
, NOBIT,

51 
BIT6
, 
BIT7
,

52 
BIT2
, 
BIT3
,

53 
BIT2
, 
BIT3
,

54 
BIT5
, 
BIT4
,

55 
BIT13
, 
BIT12
,

56 
BIT23
, 
BIT26
,

57 
BIT15
, 
BIT14
,

58 
BIT27
, 
BIT1
,

59 
BIT22
, 
BIT31
,

60 
BIT30
, 
BIT5
,

61 
BIT4
, 
BIT1
,

62 
BIT0
, 
BIT29
,

63 
BIT22
, 
BIT24
,

64 
BIT23
, 
BIT25
,

65 
BIT10
, 
BIT11
,

66 
BIT9
, 
BIT17
,

67 
BIT8
, 
BIT16
,

68 
BIT14
, 
BIT15
,

69 
BIT12
, 
BIT13
,

70 
BIT10
, 
BIT11
,

71 
BIT8
, 
BIT9
,

72 
BIT6
, 
BIT7


74 
	g∫P8CTRLs
[] = {

75 
NOBIT
, NOBIT,

99 
	g∫P8PWMs
[] = {

100 
NAPIN
, NAPIN,

101 
NAPIN
, NAPIN,

102 
NAPIN
, NAPIN,

103 
NAPIN
, NAPIN,

104 
NAPIN
, NAPIN,

105 
NAPIN
, NAPIN,

106 (
BIT5
|
BIT4
), 
NAPIN
,

107 
NAPIN
, NAPIN,

108 
NAPIN
, NAPIN,

109 (
BIT4
), 
NAPIN
,

110 
NAPIN
, NAPIN,

111 
NAPIN
, NAPIN,

112 
NAPIN
, NAPIN,

113 
NAPIN
, NAPIN,

114 
NAPIN
, NAPIN,

115 
NAPIN
, NAPIN,

116 
NAPIN
, NAPIN,

117 
NAPIN
, NAPIN,

118 
NAPIN
, NAPIN,

119 
NAPIN
, NAPIN,

120 
NAPIN
, NAPIN,

121 
NAPIN
, NAPIN,

122 
NAPIN
, NAPIN

125 
	g∫P9B™k
[] = {

126 
NAPIN
, NAPIN,

127 
NAPIN
, NAPIN,

128 
NAPIN
, NAPIN,

129 
NAPIN
, NAPIN,

130 
NAPIN
, NAPIN,

131 
GPIO0
, 
GPIO1
,

132 
GPIO0
, 
GPIO1
,

133 
GPIO1
, GPIO1,

134 
GPIO0
, GPIO0,

135 
GPIO0
, GPIO0,

136 
GPIO0
, GPIO0,

137 
GPIO1
, 
GPIO0
,

138 
GPIO3
, 
GPIO0
,

139 
GPIO3
, GPIO3,

140 
GPIO3
, GPIO3,

141 
GPIO3
, 
NAPIN
,

142 
NAPIN
, NAPIN,

143 
NAPIN
, NAPIN,

144 
NAPIN
, NAPIN,

145 
NAPIN
, NAPIN,

146 
GPIO0
, GPIO0,

147 
NAPIN
, NAPIN,

148 
NAPIN
, NAPIN

150 
	g∫P9Pös
[] = {

151 
NOBIT
, NOBIT,

152 
NOBIT
, NOBIT,

153 
NOBIT
, NOBIT,

154 
NOBIT
, NOBIT,

155 
NOBIT
, NOBIT,

156 
BIT30
, 
BIT28
,

157 
BIT31
, 
BIT18
,

158 
BIT16
, 
BIT19
,

159 
BIT5
, 
BIT4
,

160 
BIT13
, 
BIT12
,

161 
BIT3
, 
BIT2
,

162 
BIT17
, 
BIT15
,

163 
BIT21
, 
BIT14
,

164 
BIT19
, 
BIT17
,

165 
BIT15
, 
BIT16
,

166 
BIT14
, 
NOBIT
,

167 
NOBIT
, NOBIT,

168 
NOBIT
, NOBIT,

169 
NOBIT
, NOBIT,

170 
NOBIT
, NOBIT,

171 
BIT20
, 
BIT7
,

172 
NOBIT
, NOBIT,

173 
NOBIT
, NOBIT

175 
	g∫P9CTRLs
[] = {

176 
NOBIT
, NOBIT,

177 
NOBIT
, NOBIT,

178 
NOBIT
, NOBIT,

179 
NOBIT
, NOBIT,

180 
NOBIT
, NOBIT,

191 0x990, 
NOBIT
,

192 
NOBIT
, NOBIT,

193 
NOBIT
, NOBIT,

194 
NOBIT
, NOBIT,

195 
NOBIT
, NOBIT,

197 
NOBIT
, NOBIT,

198 
NOBIT
, NOBIT

200 
	g∫P9PWMs
[] = {

201 
NAPIN
, NAPIN,

202 
NAPIN
, NAPIN,

203 
NAPIN
, NAPIN,

204 
NAPIN
, NAPIN,

205 
NAPIN
, NAPIN,

206 
NAPIN
, NAPIN,

207 
NAPIN
, (
BIT3
),

208 
NAPIN
, (
BIT5
|
BIT3
),

209 
NAPIN
, NAPIN,

210 
NAPIN
, NAPIN,

211 (
BIT5
), 0x0,

212 
NAPIN
, NAPIN,

213 
NAPIN
, NAPIN,

214 
NAPIN
, NAPIN,

215 (
BIT5
), 
NAPIN
,

216 0x0, 
NAPIN
,

217 
NAPIN
, NAPIN,

218 
NAPIN
, NAPIN,

219 
NAPIN
, NAPIN,

220 
NAPIN
, NAPIN,

221 
NAPIN
, NAPIN,

222 
NAPIN
, NAPIN,

223 
NAPIN
, NAPIN

	@NXCTRL_registers.h

21 #i‚de‡
__NXCTRL_REGISTERS_HEADER__


22 
	#__NXCTRL_REGISTERS_HEADER__


	)

24 
	~<NXCTRL_bôs.h
>

26 
	#GPIO0
 (0)

	)

27 
	#GPIO1
 (1)

	)

28 
	#GPIO2
 (2)

	)

29 
	#GPIO3
 (3)

	)

31 
	#GPIO0_REG_ADDR
 (0x44E07000)

	)

32 
	#GPIO0_REG_SIZE
 (0x44E07FFF-
GPIO0_REG_ADDR
+1)

	)

33 
	#GPIO1_REG_ADDR
 (0x4804C000)

	)

34 
	#GPIO1_REG_SIZE
 (0x4804CFFF-
GPIO1_REG_ADDR
+1)

	)

35 
	#GPIO2_REG_ADDR
 (0x481AC000)

	)

36 
	#GPIO2_REG_SIZE
 (0x481ACFFF-
GPIO2_REG_ADDR
+1)

	)

37 
	#GPIO3_REG_ADDR
 (0x481AE000)

	)

38 
	#GPIO3_REG_SIZE
 (0x481AEFFF-
GPIO3_REG_ADDR
+1)

	)

40 
	#GPIO_SYSCONFIG
 0x010

	)

41 
	#GPIO_OE
 0x134

42 
	#GPIO_SETDATAOUT
 0x194

43 
	#GPIO_CLEARDATAOUT
 0x190

44 
	#GPIO_DATAIN
 0x138

45 
	#GPIO_DEBOUNCENABLE
 0x150

46 
	#GPIO_DEBOUNCINGTIME
 0x154

47 

	)

48 
	#CONTROL_REG_ADDR
 (0x44E10000)

	)

49 
	#CONTROL_REG_SIZE
 (0x44E11FFF-
CONTROL_REG_ADDR
+1)

	)

51 
	#TSCADC_REG_ADDR
 (0x44E0D000)

	)

52 
	#TSCADC_REG_SIZE
 (0x44E0EFFF-
TSCADC_REG_ADDR
+1)

	)

54 
	#CM_PER_REG_ADDR
 (0x44E00000)

	)

55 
	#CM_PER_REG_SIZE
 (0x44E03FFF-
CM_PER_REG_ADDR
+1)

	)

56 
	#CM_WKUP_REG_ADDR
 (0x44E00400)

	)

57 
	#CM_WKUP_REG_OFFSET
 (
CM_WKUP_REG_ADDR
-
CM_PER_REG_ADDR
)

	)

58 
	#PRM_PER_REG_ADDR
 (0x44E00C00)

	)

59 
	#PRM_PER_REG_OFFSET
 (
PRM_PER_REG_ADDR
-
CM_PER_REG_ADDR
)

	)

61 
	#PWMSS0_REG_ADDR
 (0x48300000)

	)

62 
	#PWMSS0_REG_SIZE
 (0x48301FFF-
PWMSS0_REG_ADDR
+1)

	)

63 
	#PWMSS1_REG_ADDR
 (0x48302000)

	)

64 
	#PWMSS1_REG_SIZE
 (0x48303FFF-
PWMSS1_REG_ADDR
+1)

	)

65 
	#PWMSS2_REG_ADDR
 (0x48304000)

	)

66 
	#PWMSS2_REG_SIZE
 (0x48305FFF-
PWMSS2_REG_ADDR
+1)

	)

68 
	#CM_PER_L3S_CLKCTRL
 (0x004)

	)

69 
	#CM_PER_L3_CLKSTCTRL
 (0x00C)

	)

70 
	#CM_PER_L3_INSTR_CLKCTRL
 (0x0DC)

	)

71 
	#CM_PER_L3_CLKCTRL
 (0x0E0)

	)

72 
	#CM_PER_OCPWP_L3_CLKSTCTRL
 (0x12C)

	)

73 
	#CM_PER_L4LS_CLKSTCTRL
 (0x000)

	)

74 
	#CM_PER_L4LS_CLKCTRL
 (0x060)

	)

76 
	#CM_WKUP_CLKSTCTRL
 (0x000)

	)

77 
	#CM_WKUP_ADC_TSC_CLKCTRL
 (0x0BC)

	)

79 
	#CM_WKUP_GPIO0_CLKCTRL
 (0x008)

	)

80 
	#CM_PER_GPIO1_CLKCTRL
 (0x0AC)

	)

81 
	#CM_PER_GPIO2_CLKCTRL
 (0x0B0)

	)

82 
	#CM_PER_GPIO3_CLKCTRL
 (0x0B4)

	)

84 
	#CM_PER_EPWMSS0_CLKCTRL
 (0x0D4)

	)

85 
	#CM_PER_EPWMSS1_CLKCTRL
 (0x0CC)

	)

86 
	#CM_PER_EPWMSS2_CLKCTRL
 (0x0D8)

	)

88 
	#CM_PER_PRU_ICSS_CLKCTRL
 (0x0E8)

	)

90 
	#RM_PER_RSTCTRL
 (0x000)

	)

91 
	#PM_PER_PWRSTST
 (0x008)

	)

92 
	#PM_PER_PWRSTCTRL
 (0x00C)

	)

94 
	#TSC_ADC_SS_CTRL
 (0x040)

	)

95 
	#TSC_ADC_SS_ADC_CLKDIV
 (0x04C)

	)

96 
	#TSC_ADC_SS_STEPCONFIG
(
n
Ë(0x064+(“)*0x008))

	)

97 
	#TSC_ADC_SS_STEPDELAY
(
n
Ë(0x068+(“)*0x008))

	)

98 
	#TSC_ADC_SS_STEPENABLE
 (0x054)

	)

99 
	#TSC_ADC_SS_IRQSTATUS
 (0x028)

	)

100 
	#TSC_ADC_SS_IRQENABLE_SET
 (0x02C)

	)

101 
	#TSC_ADC_SS_FIFODATA
(
n
Ë(0x100 + (“)*0x100))

	)

103 
	#PWMSS_CTRL
 (0x664)

	)

104 
	#PWMSS_CLKCONFIG
 (0x008)

	)

106 
	#PWMSS_ECAP
 (0x100)

	)

107 
	#PWMSS_EQEP
 (0x180)

	)

108 
	#PWMSS_EPWM
 (0x200)

	)

110 
	#EPWM_TBCTL
 (0x000)

	)

111 
	#EPWM_TBPRD
 (0x00A)

	)

112 
	#EPWM_CMPCTL
 (0x00E)

	)

113 
	#EPWM_CMPA
 (0x012)

	)

114 
	#EPWM_CMPB
 (0x014)

	)

115 
	#EPWM_AQCTLA
 (0x016)

	)

116 
	#EPWM_AQCTLB
 (0x018)

	)

117 
	#EPWM_AQSFRC
 (0x01A)

	)

118 
	#EPWM_AQCSFRC
 (0x01C)

	)

120 
	#REGADDR
(
ba£
,
off£t
Ë((ba£)+(off£t))

	)

121 
	#U32REG
(
ba£
,
off£t
Ë*((vﬁ©ûê
NXCTRL_UINT32
 *)
	`REGADDR
(ba£,off£t))

	)

122 
	#U16REG
(
ba£
,
off£t
Ë*((vﬁ©ûê
NXCTRL_UINT16
 *)
	`REGADDR
(ba£,off£t))

	)

123 
	#ASU32REG
(
p
Ë*((vﬁ©ûê
NXCTRL_UINT32
 *)’))

	)

124 
	#ASU16REG
(
p
Ë*((vﬁ©ûê
NXCTRL_UINT16
 *)’))

	)

126 
	#U32REG_CM_WKUP_GPIO0_CLKCTRL
 
	`U32REG
(
__CM_WKUP_ADDR
,
CM_WKUP_GPIO0_CLKCTRL
)

	)

127 
	#U32REG_CM_PER_GPIO1_CLKCTRL
 
	`U32REG
(
__CM_PER_ADDR
,
CM_PER_GPIO1_CLKCTRL
)

	)

128 
	#U32REG_CM_PER_GPIO2_CLKCTRL
 
	`U32REG
(
__CM_PER_ADDR
,
CM_PER_GPIO2_CLKCTRL
)

	)

129 
	#U32REG_CM_PER_GPIO3_CLKCTRL
 
	`U32REG
(
__CM_PER_ADDR
,
CM_PER_GPIO3_CLKCTRL
)

	)

130 
	#U32REG_CM_PER_L3S_CLKCTRL
 
	`U32REG
(
__CM_PER_ADDR
,
CM_PER_L3S_CLKCTRL
)

	)

131 
	#U32REG_CM_PER_L3_CLKSTCTRL
 
	`U32REG
(
__CM_PER_ADDR
,
CM_PER_L3_CLKSTCTRL
)

	)

132 
	#U32REG_CM_PER_L3_INSTR_CLKCTRL
 
	`U32REG
(
__CM_PER_ADDR
,
CM_PER_L3_INSTR_CLKCTRL
)

	)

133 
	#U32REG_CM_PER_L3_CLKCTRL
 
	`U32REG
(
__CM_PER_ADDR
,
CM_PER_L3_CLKCTRL
)

	)

134 
	#U32REG_CM_PER_OCPWP_L3_CLKSTCTRL
 
	`U32REG
(
__CM_PER_ADDR
,
CM_PER_OCPWP_L3_CLKSTCTRL
)

	)

135 
	#U32REG_CM_PER_L4LS_CLKSTCTRL
 
	`U32REG
(
__CM_PER_ADDR
,
CM_PER_L4LS_CLKSTCTRL
)

	)

136 
	#U32REG_CM_PER_L4LS_CLKCTRL
 
	`U32REG
(
__CM_PER_ADDR
,
CM_PER_L4LS_CLKCTRL
)

	)

138 
	#ENABLE_GPIO0_CLK
(
f
Ë(fË? (
U32REG_CM_WKUP_GPIO0_CLKCTRL
 |
BIT1
Ë: (U32REG_CM_WKUP_GPIO0_CLKCTRL &~BIT1)

	)

139 
	#ENABLE_GPIO1_CLK
(
f
Ë(fË? (
U32REG_CM_PER_GPIO1_CLKCTRL
 |
BIT1
Ë: (U32REG_CM_PER_GPIO1_CLKCTRL &~BIT1)

	)

140 
	#ENABLE_GPIO2_CLK
(
f
Ë(fË? (
U32REG_CM_PER_GPIO2_CLKCTRL
 |
BIT1
Ë: (U32REG_CM_PER_GPIO2_CLKCTRL &~BIT1)

	)

141 
	#ENABLE_GPIO3_CLK
(
f
Ë(fË? (
U32REG_CM_PER_GPIO3_CLKCTRL
 |
BIT1
Ë: (U32REG_CM_PER_GPIO3_CLKCTRL &~BIT1)

	)

143 
	#ENABLE_GPIO0_OPTFCLK
(
f
Ë(fË? (
U32REG_CM_WKUP_GPIO0_CLKCTRL
 |
BIT18
Ë: (U32REG_CM_WKUP_GPIO0_CLKCTRL &~BIT18)

	)

144 
	#ENABLE_GPIO1_OPTFCLK
(
f
Ë(fË? (
U32REG_CM_PER_GPIO1_CLKCTRL
 |
BIT18
Ë: (U32REG_CM_PER_GPIO1_CLKCTRL &~BIT18)

	)

145 
	#ENABLE_GPIO2_OPTFCLK
(
f
Ë(fË? (
U32REG_CM_PER_GPIO2_CLKCTRL
 |
BIT18
Ë: (U32REG_CM_PER_GPIO2_CLKCTRL &~BIT18)

	)

146 
	#ENABLE_GPIO3_OPTFCLK
(
f
Ë(fË? (
U32REG_CM_PER_GPIO3_CLKCTRL
 |
BIT18
Ë: (U32REG_CM_PER_GPIO3_CLKCTRL &~BIT18)

	)

148 
	#U32REG_GPIO0_SETDATAOUT
 
	`U32REG
(
__GPIO0_ADDR
,
GPIO_SETDATAOUT
)

	)

149 
	#U32REG_GPIO1_SETDATAOUT
 
	`U32REG
(
__GPIO1_ADDR
,
GPIO_SETDATAOUT
)

	)

150 
	#U32REG_GPIO2_SETDATAOUT
 
	`U32REG
(
__GPIO2_ADDR
,
GPIO_SETDATAOUT
)

	)

151 
	#U32REG_GPIO3_SETDATAOUT
 
	`U32REG
(
__GPIO3_ADDR
,
GPIO_SETDATAOUT
)

	)

152 
	#U32REG_GPIO0_CLEARDATAOUT
 
	`U32REG
(
__GPIO0_ADDR
,
GPIO_CLEARDATAOUT
)

	)

153 
	#U32REG_GPIO1_CLEARDATAOUT
 
	`U32REG
(
__GPIO1_ADDR
,
GPIO_CLEARDATAOUT
)

	)

154 
	#U32REG_GPIO2_CLEARDATAOUT
 
	`U32REG
(
__GPIO2_ADDR
,
GPIO_CLEARDATAOUT
)

	)

155 
	#U32REG_GPIO3_CLEARDATAOUT
 
	`U32REG
(
__GPIO3_ADDR
,
GPIO_CLEARDATAOUT
)

	)

156 
	#U32REG_GPIO0_DATAIN
 
	`U32REG
(
__GPIO0_ADDR
,
GPIO_DATAIN
)

	)

157 
	#U32REG_GPIO1_DATAIN
 
	`U32REG
(
__GPIO1_ADDR
,
GPIO_DATAIN
)

	)

158 
	#U32REG_GPIO2_DATAIN
 
	`U32REG
(
__GPIO2_ADDR
,
GPIO_DATAIN
)

	)

159 
	#U32REG_GPIO3_DATAIN
 
	`U32REG
(
__GPIO3_ADDR
,
GPIO_DATAIN
)

	)

160 
	#U32REG_GPIO0_SYSCONFIG
 
	`U32REG
(
__GPIO0_ADDR
,
GPIO_SYSCONFIG
)

	)

161 
	#U32REG_GPIO1_SYSCONFIG
 
	`U32REG
(
__GPIO1_ADDR
,
GPIO_SYSCONFIG
)

	)

162 
	#U32REG_GPIO2_SYSCONFIG
 
	`U32REG
(
__GPIO2_ADDR
,
GPIO_SYSCONFIG
)

	)

163 
	#U32REG_GPIO3_SYSCONFIG
 
	`U32REG
(
__GPIO3_ADDR
,
GPIO_SYSCONFIG
)

	)

165 
	#U32REG_CM_WKUP_ADC_TSC_CLKCTRL
 
	`U32REG
(
__CM_WKUP_ADDR
,
CM_WKUP_ADC_TSC_CLKCTRL
)

	)

167 
	#ENABLE_ADC_TSC_CLK
(
f
Ë(fË? (
U32REG_CM_WKUP_ADC_TSC_CLKCTRL
 |
BIT1
Ë: (U32REG_CM_WKUP_ADC_TSC_CLKCTRL &~BIT1)

	)

169 
	#U32REG_CM_PER_L3S_CLKCTRL
 
	`U32REG
(
__CM_PER_ADDR
,
CM_PER_L3S_CLKCTRL
)

	)

170 
	#U32REG_CM_PER_L3_CLKSTCTRL
 
	`U32REG
(
__CM_PER_ADDR
,
CM_PER_L3_CLKSTCTRL
)

	)

171 
	#U32REG_CM_L3_INSTR_CLKCTRL
 
	`U32REG
(
__CM_PER_ADDR
,
CM_PER_L3_INSTR_CLKCTRL
)

	)

172 
	#U32REG_CM_L3_CLKCTRL
 
	`U32REG
(
__CM_PER_ADDR
,
CM_PER_L3_CLKCTRL
)

	)

173 
	#U32REG_CM_PER_OCPWP_L3_CLKSTCTRL
 
	`U32REG
(
__CM_PER_ADDR
,
CM_PER_OCPWP_L3_CLKSTCTRL
)

	)

174 
	#U32REG_CM_PER_L4LS_CLKSTCTRL
 
	`U32REG
(
__CM_PER_ADDR
,
CM_PER_L4LS_CLKSTCTRL
)

	)

175 
	#U32REG_CM_PER_L4LS_CLKCTRL
 
	`U32REG
(
__CM_PER_ADDR
,
CM_PER_L4LS_CLKCTRL
)

	)

177 
	#U32REG_TSC_ADC_SS_CTRL
 
	`U32REG
(
__TSCADC_ADDR
,
TSC_ADC_SS_CTRL
)

	)

178 
	#U32REG_TSC_ADC_SS_ADC_CLKDIV
 
	`U32REG
(
__TSCADC_ADDR
,
TSC_ADC_SS_ADC_CLKDIV
)

	)

179 
	#U32REG_TSC_ADC_SS_STEPCONFIG
(
n
Ë
	`U32REG
(
__TSCADC_ADDR
,
	`TSC_ADC_SS_STEPCONFIG
“))

	)

180 
	#U32REG_TSC_ADC_SS_STEPDELAY
(
n
Ë
	`U32REG
(
__TSCADC_ADDR
,
	`TSC_ADC_SS_STEPDELAY
“))

	)

181 
	#U32REG_TSC_ADC_SS_STEPENABLE
 
	`U32REG
(
__TSCADC_ADDR
,
TSC_ADC_SS_STEPENABLE
)

	)

182 
	#U32REG_TSC_ADC_SS_IRQSTATUS
 
	`U32REG
(
__TSCADC_ADDR
,
TSC_ADC_SS_IRQSTATUS
)

	)

183 
	#U32REG_TSC_ADC_SS_IRQENABLE_SET
 
	`U32REG
(
__TSCADC_ADDR
,
TSC_ADC_SS_IRQENABLE_SET
)

	)

184 
	#U32REG_TSC_ADC_SS_FIFODATA
(
n
Ë
	`U32REG
(
__TSCADC_ADDR
,
	`TSC_ADC_SS_FIFODATA
“))

	)

186 
	#ENABLE_TSC_ADC_SS_MODULE
(
f
Ë(fË? (
U32REG_TSC_ADC_SS_CTRL
 |
BIT0
Ë: (U32REG_TSC_ADC_SS_CTRL &~BIT0)

	)

187 
	#ENABLE_TSC_ADC_SS_STEP_ID_TAG
(
f
Ë(fË? (
U32REG_TSC_ADC_SS_CTRL
 |
BIT1
Ë: (U32REG_TSC_ADC_SS_CTRL &~BIT1)

	)

188 
	#ENABLE_TSC_ADC_SS_STEP_CONFIG_WRITE
(
f
Ë(fË? (
U32REG_TSC_ADC_SS_CTRL
 |
BIT2
Ë: (U32REG_TSC_ADC_SS_CTRL &~BIT2)

	)

189 
	#SET_TSC_ADC_SS_ADC_CLKDIV
(
n
Ë
U32REG_TSC_ADC_SS_ADC_CLKDIV
 = (0x00007FFF & (“)-1))

	)

190 
	#SET_TSC_ADC_SS_STEPCONFIG_MODE
(
n
,
v
Ë
	`U32REG_TSC_ADC_SS_STEPCONFIG
“Ë&~(
BIT0
|
BIT1
); U32REG_TSC_ADC_SS_STEPCONFIG“Ë|((v)<<0)

	)

191 
	#SET_TSC_ADC_SS_STEPCONFIG_INP
(
n
,
p
Ë
	`U32REG_TSC_ADC_SS_STEPCONFIG
“Ë&~(
BIT19
|
BIT20
|
BIT21
|
BIT22
); U32REG_TSC_ADC_SS_STEPCONFIG“Ë|(’)<<19)

	)

192 
	#ENABLE_TSC_ADC_SS_STEPCONFIG_DIFF
(
n
,
f
Ë(fË? (
	`U32REG_TSC_ADC_SS_STEPCONFIG
“Ë|
BIT25
Ë: (U32REG_TSC_ADC_SS_STEPCONFIG“Ë&~BIT25)

	)

193 
	#SET_TSC_ADC_SS_STEPCONFIG_FIFO
(
n
,
f
Ë(fË? (
	`U32REG_TSC_ADC_SS_STEPCONFIG
“Ë|
BIT26
Ë: (U32REG_TSC_ADC_SS_STEPCONFIG“Ë&~BIT26)

	)

194 
	#SET_TSC_ADC_SS_STEPCONFIG_AVG
(
n
,
m
Ë
	`U32REG_TSC_ADC_SS_STEPCONFIG
“Ë&~(
BIT2
|
BIT3
|
BIT4
); U32REG_TSC_ADC_SS_STEPCONFIG“Ë|((m)<<2)

	)

195 
	#SET_TSC_ADC_SS_STEPENABLE
(
n
, 
f
Ë
U32REG_TSC_ADC_SS_STEPENABLE
 &~(1<<(“)+1)); U32REG_TSC_ADC_SS_STEPENABLE |((f)<<(“)+1))

	)

196 
	#CLEAR_TSC_ADC_SS_IRQSTATUS
 
U32REG_TSC_ADC_SS_IRQSTATUS
 = 0x7FF

	)

197 
	#SET_TSC_ADC_SS_IRQENABLE_SET
(
n
Ë
U32REG_TSC_ADC_SS_IRQENABLE_SET
 |“)

	)

198 
	#SET_TSC_ADC_SS_STEPDELAY_SAMPLE
(
n
,
m
Ë
	`U32REG_TSC_ADC_SS_STEPDELAY
“Ë&~(
BIT24
|
BIT25
|
BIT26
|
BIT27
|
BIT28
|
BIT29
|
BIT30
|
BIT31
); U32REG_TSC_ADC_SS_STEPDELAY“Ë|((m)<<24)

	)

199 
	#SET_TSC_ADC_SS_STEPDELAY_OPEN
(
n
,
m
Ë
	`U32REG_TSC_ADC_SS_STEPDELAY
“Ë&~(
BIT0
|
BIT1
|
BIT2
|
BIT3
|
BIT4
|
BIT5
|
BIT6
|
BIT7
|
BIT8
|
BIT9
|
BIT10
|
BIT11
|
BIT12
|
BIT13
|
BIT14
|
BIT15
|
BIT16
|
BIT17
); U32REG_TSC_ADC_SS_STEPDELAY“Ë|((m)<<0)

	)

201 
	#U32REG_CM_PER_EPWMSS0_CLKCTRL
 
	`U32REG
(
__CM_PER_ADDR
,
CM_PER_EPWMSS0_CLKCTRL
)

	)

202 
	#U32REG_CM_PER_EPWMSS1_CLKCTRL
 
	`U32REG
(
__CM_PER_ADDR
,
CM_PER_EPWMSS1_CLKCTRL
)

	)

203 
	#U32REG_CM_PER_EPWMSS2_CLKCTRL
 
	`U32REG
(
__CM_PER_ADDR
,
CM_PER_EPWMSS2_CLKCTRL
)

	)

205 
	#ENABLE_EPWMSS0_CLK
(
f
Ë(fË? (
U32REG_CM_PER_EPWMSS0_CLKCTRL
 |
BIT1
Ë: (U32REG_CM_PER_EPWMSS0_CLKCTRL &~BIT1)

	)

206 
	#ENABLE_EPWMSS1_CLK
(
f
Ë(fË? (
U32REG_CM_PER_EPWMSS1_CLKCTRL
 |
BIT1
Ë: (U32REG_CM_PER_EPWMSS1_CLKCTRL &~BIT1)

	)

207 
	#ENABLE_EPWMSS2_CLK
(
f
Ë(fË? (
U32REG_CM_PER_EPWMSS2_CLKCTRL
 |
BIT1
Ë: (U32REG_CM_PER_EPWMSS2_CLKCTRL &~BIT1)

	)

209 
	#U32REG_CM_PER_PRU_ICSS_CLKCTRL
 
	`U32REG
(
__CM_PER_ADDR
,
CM_PER_PRU_ICSS_CLKCTRL
)

	)

210 
	#U32REG_RM_PER_RSTCTRL
 
	`U32REG
(
__PRM_PER_ADDR
,
RM_PER_RSTCTRL
)

	)

211 
	#U32REG_PM_PER_PWRSTST
 
	`U32REG
(
__PRM_PER_ADDR
,
PM_PER_PWRSTST
)

	)

212 
	#U32REG_PM_PER_PWRSTCTRL
 
	`U32REG
(
__PRM_PER_ADDR
,
PM_PER_PWRSTCTRL
)

	)

214 
	#ENABLE_PRU_ICSS_CLK
(
f
Ë(fË? (
U32REG_CM_PER_PRU_ICSS_CLKCTRL
 |
BIT1
Ë: (U32REG_CM_PER_PRU_ICSS_CLKCTRL &~BIT1)

	)

216 
	#U32REG_PWMSS0_CLKCONFIG
 
	`U32REG
(
__PWMSS0_ADDR
,
PWMSS_CLKCONFIG
)

	)

217 
	#U32REG_PWMSS1_CLKCONFIG
 
	`U32REG
(
__PWMSS1_ADDR
,
PWMSS_CLKCONFIG
)

	)

218 
	#U32REG_PWMSS2_CLKCONFIG
 
	`U32REG
(
__PWMSS2_ADDR
,
PWMSS_CLKCONFIG
)

	)

220 
	#ENABLE_PWMSS0_CLK
(
f
Ë(fË? (
U32REG_PWMSS0_CLKCONFIG
 |(
BIT0
|
BIT4
|
BIT8
)Ë: (U32REG_PWMSS0_CLKCONFIG &~(BIT0|BIT4|BIT8))

	)

221 
	#ENABLE_PWMSS1_CLK
(
f
Ë(fË? (
U32REG_PWMSS1_CLKCONFIG
 |(
BIT0
|
BIT4
|
BIT8
)Ë: (U32REG_PWMSS1_CLKCONFIG &~(BIT0|BIT4|BIT8))

	)

222 
	#ENABLE_PWMSS2_CLK
(
f
Ë(fË? (
U32REG_PWMSS2_CLKCONFIG
 |(
BIT0
|
BIT4
|
BIT8
)Ë: (U32REG_PWMSS2_CLKCONFIG &~(BIT0|BIT4|BIT8))

	)

224 
	#U16REG_EPWMSS0_TBCTL
 
	`U16REG
(
__PWMSS0_ADDR
+
PWMSS_EPWM
,
EPWM_TBCTL
)

	)

225 
	#U16REG_EPWMSS1_TBCTL
 
	`U16REG
(
__PWMSS1_ADDR
+
PWMSS_EPWM
,
EPWM_TBCTL
)

	)

226 
	#U16REG_EPWMSS2_TBCTL
 
	`U16REG
(
__PWMSS2_ADDR
+
PWMSS_EPWM
,
EPWM_TBCTL
)

	)

228 
	#SET_EPWMSS0_TBCTL_CLKDIV
(
n
Ë
U16REG_EPWMSS0_TBCTL
 &~(
BIT10
|
BIT11
|
BIT12
); U16REG_EPWMSS0_TBCTL |(“)<<10)

	)

229 
	#SET_EPWMSS0_TBCTL_HSPCLKDIV
(
n
Ë
U16REG_EPWMSS0_TBCTL
 &~(
BIT7
|
BIT8
|
BIT9
); U16REG_EPWMSS0_TBCTL |(“)<<7)

	)

230 
	#SET_EPWMSS1_TBCTL_CLKDIV
(
n
Ë
U16REG_EPWMSS1_TBCTL
 &~(
BIT10
|
BIT11
|
BIT12
); U16REG_EPWMSS1_TBCTL |(“)<<10)

	)

231 
	#SET_EPWMSS1_TBCTL_HSPCLKDIV
(
n
Ë
U16REG_EPWMSS1_TBCTL
 &~(
BIT7
|
BIT8
|
BIT9
); U16REG_EPWMSS1_TBCTL |(“)<<7)

	)

232 
	#SET_EPWMSS2_TBCTL_CLKDIV
(
n
Ë
U16REG_EPWMSS2_TBCTL
 &~(
BIT10
|
BIT11
|
BIT12
); U16REG_EPWMSS2_TBCTL |(“)<<10)

	)

233 
	#SET_EPWMSS2_TBCTL_HSPCLKDIV
(
n
Ë
U16REG_EPWMSS2_TBCTL
 &~(
BIT7
|
BIT8
|
BIT9
); U16REG_EPWMSS2_TBCTL |(“)<<7)

	)

235 
	#SET_EPWMSS0_TBCTL_CTRMODE
(
n
Ë
U16REG_EPWMSS0_TBCTL
 &~(
BIT0
|
BIT1
); U16REG_EPWMSS0_TBCTL |(“)<<0)

	)

236 
	#SET_EPWMSS1_TBCTL_CTRMODE
(
n
Ë
U16REG_EPWMSS1_TBCTL
 &~(
BIT0
|
BIT1
); U16REG_EPWMSS1_TBCTL |(“)<<0)

	)

237 
	#SET_EPWMSS2_TBCTL_CTRMODE
(
n
Ë
U16REG_EPWMSS2_TBCTL
 &~(
BIT0
|
BIT1
); U16REG_EPWMSS2_TBCTL |(“)<<0)

	)

239 
	#U16REG_EPWMSS0_TBPRD
 
	`U16REG
(
__PWMSS0_ADDR
+
PWMSS_EPWM
,
EPWM_TBPRD
)

	)

240 
	#U16REG_EPWMSS1_TBPRD
 
	`U16REG
(
__PWMSS1_ADDR
+
PWMSS_EPWM
,
EPWM_TBPRD
)

	)

241 
	#U16REG_EPWMSS2_TBPRD
 
	`U16REG
(
__PWMSS2_ADDR
+
PWMSS_EPWM
,
EPWM_TBPRD
)

	)

243 
	#SET_EPWMSS0_TBPRD
(
n
Ë
U16REG_EPWMSS0_TBPRD
 = (n)

	)

244 
	#SET_EPWMSS1_TBPRD
(
n
Ë
U16REG_EPWMSS1_TBPRD
 = (n)

	)

245 
	#SET_EPWMSS2_TBPRD
(
n
Ë
U16REG_EPWMSS2_TBPRD
 = (n)

	)

247 
	#U16REG_EPWMSS0_CMPCTL
 
	`U16REG
(
__PWMSS0_ADDR
+
PWMSS_EPWM
,
EPWM_CMPCTL
)

	)

248 
	#U16REG_EPWMSS1_CMPCTL
 
	`U16REG
(
__PWMSS1_ADDR
+
PWMSS_EPWM
,
EPWM_CMPCTL
)

	)

249 
	#U16REG_EPWMSS2_CMPCTL
 
	`U16REG
(
__PWMSS2_ADDR
+
PWMSS_EPWM
,
EPWM_CMPCTL
)

	)

251 
	#SET_EPWMSS0_CMPCTRL_LOADAMODE
(
n
Ë
U16REG_EPWMSS0_CMPCTL
 &~(
BIT0
|
BIT1
); U16REG_EPWMSS0_CMPCTL |(“)<<0)

	)

252 
	#SET_EPWMSS0_CMPCTRL_LOADBMODE
(
n
Ë
U16REG_EPWMSS0_CMPCTL
 &~(
BIT2
|
BIT3
); U16REG_EPWMSS0_CMPCTL |(“)<<2)

	)

253 
	#SET_EPWMSS1_CMPCTRL_LOADAMODE
(
n
Ë
U16REG_EPWMSS1_CMPCTL
 &~(
BIT0
|
BIT1
); U16REG_EPWMSS1_CMPCTL |(“)<<0)

	)

254 
	#SET_EPWMSS1_CMPCTRL_LOADBMODE
(
n
Ë
U16REG_EPWMSS1_CMPCTL
 &~(
BIT2
|
BIT3
); U16REG_EPWMSS1_CMPCTL |(“)<<2)

	)

255 
	#SET_EPWMSS2_CMPCTRL_LOADAMODE
(
n
Ë
U16REG_EPWMSS2_CMPCTL
 &~(
BIT0
|
BIT1
); U16REG_EPWMSS2_CMPCTL |(“)<<0)

	)

256 
	#SET_EPWMSS2_CMPCTRL_LOADBMODE
(
n
Ë
U16REG_EPWMSS2_CMPCTL
 &~(
BIT2
|
BIT3
); U16REG_EPWMSS2_CMPCTL |(“)<<2)

	)

258 
	#ENABLE_EPWMSS0_CMPCTL_SHDWAMODE
(
f
Ë(fË? (
U16REG_EPWMSS0_CMPCTL
 &~(
BIT4
)Ë: (U16REG_EPWMSS0_CMPCTL |BIT4)

	)

259 
	#ENABLE_EPWMSS0_CMPCTL_SHDWBMODE
(
f
Ë(fË? (
U16REG_EPWMSS0_CMPCTL
 &~(
BIT6
)Ë: (U16REG_EPWMSS0_CMPCTL |BIT6)

	)

260 
	#ENABLE_EPWMSS1_CMPCTL_SHDWAMODE
(
f
Ë(fË? (
U16REG_EPWMSS1_CMPCTL
 &~(
BIT4
)Ë: (U16REG_EPWMSS1_CMPCTL |BIT4)

	)

261 
	#ENABLE_EPWMSS1_CMPCTL_SHDWBMODE
(
f
Ë(fË? (
U16REG_EPWMSS1_CMPCTL
 &~(
BIT6
)Ë: (U16REG_EPWMSS1_CMPCTL |BIT6)

	)

262 
	#ENABLE_EPWMSS2_CMPCTL_SHDWAMODE
(
f
Ë(fË? (
U16REG_EPWMSS2_CMPCTL
 &~(
BIT4
)Ë: (U16REG_EPWMSS2_CMPCTL |BIT4)

	)

263 
	#ENABLE_EPWMSS2_CMPCTL_SHDWBMODE
(
f
Ë(fË? (
U16REG_EPWMSS2_CMPCTL
 &~(
BIT6
)Ë: (U16REG_EPWMSS2_CMPCTL |BIT6)

	)

265 
	#U16REG_EPWMSS0_CMPA
 
	`U16REG
(
__PWMSS0_ADDR
+
PWMSS_EPWM
,
EPWM_CMPA
)

	)

266 
	#U16REG_EPWMSS0_CMPB
 
	`U16REG
(
__PWMSS0_ADDR
+
PWMSS_EPWM
,
EPWM_CMPB
)

	)

267 
	#U16REG_EPWMSS1_CMPA
 
	`U16REG
(
__PWMSS1_ADDR
+
PWMSS_EPWM
,
EPWM_CMPA
)

	)

268 
	#U16REG_EPWMSS1_CMPB
 
	`U16REG
(
__PWMSS1_ADDR
+
PWMSS_EPWM
,
EPWM_CMPB
)

	)

269 
	#U16REG_EPWMSS2_CMPA
 
	`U16REG
(
__PWMSS2_ADDR
+
PWMSS_EPWM
,
EPWM_CMPA
)

	)

270 
	#U16REG_EPWMSS2_CMPB
 
	`U16REG
(
__PWMSS2_ADDR
+
PWMSS_EPWM
,
EPWM_CMPB
)

	)

272 
	#SET_EPWMSS0_CMPA
(
n
Ë
U16REG_EPWMSS0_CMPA
 = (nË& 0xFFFF

	)

273 
	#SET_EPWMSS0_CMPB
(
n
Ë
U16REG_EPWMSS0_CMPB
 = (nË& 0xFFFF

	)

274 
	#SET_EPWMSS1_CMPA
(
n
Ë
U16REG_EPWMSS1_CMPA
 = (nË& 0xFFFF

	)

275 
	#SET_EPWMSS1_CMPB
(
n
Ë
U16REG_EPWMSS1_CMPB
 = (nË& 0xFFFF

	)

276 
	#SET_EPWMSS2_CMPA
(
n
Ë
U16REG_EPWMSS2_CMPA
 = (nË& 0xFFFF

	)

277 
	#SET_EPWMSS2_CMPB
(
n
Ë
U16REG_EPWMSS2_CMPB
 = (nË& 0xFFFF

	)

279 
	#U16REG_EPWMSS0_AQCTLA
 
	`U16REG
(
__PWMSS0_ADDR
+
PWMSS_EPWM
,
EPWM_AQCTLA
)

	)

280 
	#U16REG_EPWMSS0_AQCTLB
 
	`U16REG
(
__PWMSS0_ADDR
+
PWMSS_EPWM
,
EPWM_AQCTLB
)

	)

281 
	#U16REG_EPWMSS1_AQCTLA
 
	`U16REG
(
__PWMSS1_ADDR
+
PWMSS_EPWM
,
EPWM_AQCTLA
)

	)

282 
	#U16REG_EPWMSS1_AQCTLB
 
	`U16REG
(
__PWMSS1_ADDR
+
PWMSS_EPWM
,
EPWM_AQCTLB
)

	)

283 
	#U16REG_EPWMSS2_AQCTLA
 
	`U16REG
(
__PWMSS2_ADDR
+
PWMSS_EPWM
,
EPWM_AQCTLA
)

	)

284 
	#U16REG_EPWMSS2_AQCTLB
 
	`U16REG
(
__PWMSS2_ADDR
+
PWMSS_EPWM
,
EPWM_AQCTLB
)

	)

286 
	#SET_EPWMSS0_AQCTLA
(
z
,
p
,
au
,
ad
,
bu
,
bd
Ë
U16REG_EPWMSS0_AQCTLA
 = ((bd<<10)&(
BIT10
|
BIT11
))|((bu<<8)&(
BIT8
|
BIT9
))|(◊d<<6)&(
BIT6
|
BIT7
))|(◊u<<4)&(
BIT4
|
BIT5
))|(’<<2)&(
BIT2
|
BIT3
))|((z<<0)&(
BIT0
|
BIT1
))

	)

287 
	#SET_EPWMSS0_AQCTLB
(
z
,
p
,
au
,
ad
,
bu
,
bd
Ë
U16REG_EPWMSS0_AQCTLB
 = ((bd<<10)&(
BIT10
|
BIT11
))|((bu<<8)&(
BIT8
|
BIT9
))|(◊d<<6)&(
BIT6
|
BIT7
))|(◊u<<4)&(
BIT4
|
BIT5
))|(’<<2)&(
BIT2
|
BIT3
))|((z<<0)&(
BIT0
|
BIT1
))

	)

288 
	#SET_EPWMSS1_AQCTLA
(
z
,
p
,
au
,
ad
,
bu
,
bd
Ë
U16REG_EPWMSS1_AQCTLA
 = ((bd<<10)&(
BIT10
|
BIT11
))|((bu<<8)&(
BIT8
|
BIT9
))|(◊d<<6)&(
BIT6
|
BIT7
))|(◊u<<4)&(
BIT4
|
BIT5
))|(’<<2)&(
BIT2
|
BIT3
))|((z<<0)&(
BIT0
|
BIT1
))

	)

289 
	#SET_EPWMSS1_AQCTLB
(
z
,
p
,
au
,
ad
,
bu
,
bd
Ë
U16REG_EPWMSS1_AQCTLB
 = ((bd<<10)&(
BIT10
|
BIT11
))|((bu<<8)&(
BIT8
|
BIT9
))|(◊d<<6)&(
BIT6
|
BIT7
))|(◊u<<4)&(
BIT4
|
BIT5
))|(’<<2)&(
BIT2
|
BIT3
))|((z<<0)&(
BIT0
|
BIT1
))

	)

290 
	#SET_EPWMSS2_AQCTLA
(
z
,
p
,
au
,
ad
,
bu
,
bd
Ë
U16REG_EPWMSS2_AQCTLA
 = ((bd<<10)&(
BIT10
|
BIT11
))|((bu<<8)&(
BIT8
|
BIT9
))|(◊d<<6)&(
BIT6
|
BIT7
))|(◊u<<4)&(
BIT4
|
BIT5
))|(’<<2)&(
BIT2
|
BIT3
))|((z<<0)&(
BIT0
|
BIT1
))

	)

291 
	#SET_EPWMSS2_AQCTLB
(
z
,
p
,
au
,
ad
,
bu
,
bd
Ë
U16REG_EPWMSS2_AQCTLB
 = ((bd<<10)&(
BIT10
|
BIT11
))|((bu<<8)&(
BIT8
|
BIT9
))|(◊d<<6)&(
BIT6
|
BIT7
))|(◊u<<4)&(
BIT4
|
BIT5
))|(’<<2)&(
BIT2
|
BIT3
))|((z<<0)&(
BIT0
|
BIT1
))

	)

293 
	#U16REG_EPWMSS0_AQSFRC
 
	`U16REG
(
__PWMSS0_ADDR
+
PWMSS_EPWM
,
EPWM_AQSFRC
)

	)

294 
	#U16REG_EPWMSS1_AQSFRC
 
	`U16REG
(
__PWMSS1_ADDR
+
PWMSS_EPWM
,
EPWM_AQSFRC
)

	)

295 
	#U16REG_EPWMSS2_AQSFRC
 
	`U16REG
(
__PWMSS2_ADDR
+
PWMSS_EPWM
,
EPWM_AQSFRC
)

	)

297 
	#SET_EPWMSS0_AQSFRC_ACTSFA
(
n
Ë
U16REG_EPWMSS0_AQSFRC
 &~(
BIT0
|
BIT1
); U16REG_EPWMSS0_AQSFRC |(“)<<0)

	)

298 
	#SET_EPWMSS0_AQSFRC_ACTSFB
(
n
Ë
U16REG_EPWMSS0_AQSFRC
 &~(
BIT3
|
BIT4
); U16REG_EPWMSS0_AQSFRC |(“)<<3)

	)

299 
	#SET_EPWMSS1_AQSFRC_ACTSFA
(
n
Ë
U16REG_EPWMSS1_AQSFRC
 &~(
BIT0
|
BIT1
); U16REG_EPWMSS1_AQSFRC |(“)<<0)

	)

300 
	#SET_EPWMSS1_AQSFRC_ACTSFB
(
n
Ë
U16REG_EPWMSS1_AQSFRC
 &~(
BIT3
|
BIT4
); U16REG_EPWMSS1_AQSFRC |(“)<<3)

	)

301 
	#SET_EPWMSS2_AQSFRC_ACTSFA
(
n
Ë
U16REG_EPWMSS2_AQSFRC
 &~(
BIT0
|
BIT1
); U16REG_EPWMSS2_AQSFRC |(“)<<0)

	)

302 
	#SET_EPWMSS2_AQSFRC_ACTSFB
(
n
Ë
U16REG_EPWMSS2_AQSFRC
 &~(
BIT3
|
BIT4
); U16REG_EPWMSS2_AQSFRC |(“)<<3)

	)

307 vﬁ©ûê*
__CM_PER_ADDR
;

308 vﬁ©ûê*
__CM_WKUP_ADDR
;

309 vﬁ©ûê*
__PRM_PER_ADDR
;

310 vﬁ©ûê*
__GPIO0_ADDR
;

311 vﬁ©ûê*
__GPIO1_ADDR
;

312 vﬁ©ûê*
__GPIO2_ADDR
;

313 vﬁ©ûê*
__GPIO3_ADDR
;

314 vﬁ©ûê*
__CTRL_ADDR
;

315 vﬁ©ûê*
__TSCADC_ADDR
;

316 vﬁ©ûê*
__PWMSS0_ADDR
;

317 vﬁ©ûê*
__PWMSS1_ADDR
;

318 vﬁ©ûê*
__PWMSS2_ADDR
;

	@NXCTRL_types.h

1 #i‚de‡
__NXCTRL_TYPES_HEADER__


2 
	#__NXCTRL_TYPES_HEADER__


	)

4 
	tNXCTRL_UINT32
;

5 
	tNXCTRL_UINT16
;

6 
	tNXCTRL_UINT8
;

7 
	tNXCTRL_VOID
;

8 
	tNXCTRL_INT32
;

9 
	tNXCTRL_INT16
;

10 
	tNXCTRL_INT8
;

12 
	tNXCTRL_BOOL
;

13 
	#NXCTRL_TRUE
 ((
NXCTRL_BOOL
)1)

	)

14 
	#NXCTRL_FALSE
 ((
NXCTRL_BOOL
)0)

	)

15 
	#NXCTRL_ON
 
NXCTRL_TRUE


	)

16 
	#NXCTRL_OFF
 
NXCTRL_FALSE


	)

17 
	#NXCTRL_HIGH
 
NXCTRL_TRUE


	)

18 
	#NXCTRL_LOW
 
NXCTRL_FALSE


	)

20 
	tNXCTRL_DIR
;

21 
	#NXCTRL_INPUT
 ((
NXCTRL_DIR
)0)

	)

22 
	#NXCTRL_OUTPUT
 ((
NXCTRL_DIR
)1)

	)

23 
	#NXCTRL_INPUT_PULLUP
 ((
NXCTRL_DIR
)2)

	)

24 
	#NXCTRL_OUTPUT_PULLUP
 ((
NXCTRL_DIR
)3)

	)

25 
	#NXCTRL_INPUT_PULLDN
 ((
NXCTRL_DIR
)4)

	)

26 
	#NXCTRL_OUTPUT_PULLDN
 ((
NXCTRL_DIR
)5)

	)

28 
	tNXCTRL_PWM_AQ_MODE
;

29 
	#PWM_AQ_NONE
 ((
NXCTRL_PWM_AQ_MODE
)0x0)

	)

30 
	#PWM_AQ_LOW
 ((
NXCTRL_PWM_AQ_MODE
)0x1)

	)

31 
	#PWM_AQ_HIGH
 ((
NXCTRL_PWM_AQ_MODE
)0x2)

	)

32 
	#PWM_AQ_TOGGLE
 ((
NXCTRL_PWM_AQ_MODE
)0x3)

	)

33 
	tNXCTRL_BANK
;

34 
	#NXCTRL_P8
 ((
NXCTRL_BANK
)0)

	)

35 
	#NXCTRL_P9
 ((
NXCTRL_BANK
)1)

	)

37 
	tNXCTRL_PIN
;

38 
	#NXCTRL_PIN01
 ((
NXCTRL_PIN
)1)

	)

39 
	#NXCTRL_PIN02
 ((
NXCTRL_PIN
)2)

	)

40 
	#NXCTRL_PIN03
 ((
NXCTRL_PIN
)3)

	)

41 
	#NXCTRL_PIN04
 ((
NXCTRL_PIN
)4)

	)

42 
	#NXCTRL_PIN05
 ((
NXCTRL_PIN
)5)

	)

43 
	#NXCTRL_PIN06
 ((
NXCTRL_PIN
)6)

	)

44 
	#NXCTRL_PIN07
 ((
NXCTRL_PIN
)7)

	)

45 
	#NXCTRL_PIN08
 ((
NXCTRL_PIN
)8)

	)

46 
	#NXCTRL_PIN09
 ((
NXCTRL_PIN
)9)

	)

47 
	#NXCTRL_PIN10
 ((
NXCTRL_PIN
)10)

	)

48 
	#NXCTRL_PIN11
 ((
NXCTRL_PIN
)11)

	)

49 
	#NXCTRL_PIN12
 ((
NXCTRL_PIN
)12)

	)

50 
	#NXCTRL_PIN13
 ((
NXCTRL_PIN
)13)

	)

51 
	#NXCTRL_PIN14
 ((
NXCTRL_PIN
)14)

	)

52 
	#NXCTRL_PIN15
 ((
NXCTRL_PIN
)15)

	)

53 
	#NXCTRL_PIN16
 ((
NXCTRL_PIN
)16)

	)

54 
	#NXCTRL_PIN17
 ((
NXCTRL_PIN
)17)

	)

55 
	#NXCTRL_PIN18
 ((
NXCTRL_PIN
)18)

	)

56 
	#NXCTRL_PIN19
 ((
NXCTRL_PIN
)19)

	)

57 
	#NXCTRL_PIN20
 ((
NXCTRL_PIN
)20)

	)

58 
	#NXCTRL_PIN21
 ((
NXCTRL_PIN
)21)

	)

59 
	#NXCTRL_PIN22
 ((
NXCTRL_PIN
)22)

	)

60 
	#NXCTRL_PIN23
 ((
NXCTRL_PIN
)23)

	)

61 
	#NXCTRL_PIN24
 ((
NXCTRL_PIN
)24)

	)

62 
	#NXCTRL_PIN25
 ((
NXCTRL_PIN
)25)

	)

63 
	#NXCTRL_PIN26
 ((
NXCTRL_PIN
)26)

	)

64 
	#NXCTRL_PIN27
 ((
NXCTRL_PIN
)27)

	)

65 
	#NXCTRL_PIN28
 ((
NXCTRL_PIN
)28)

	)

66 
	#NXCTRL_PIN29
 ((
NXCTRL_PIN
)29)

	)

67 
	#NXCTRL_PIN30
 ((
NXCTRL_PIN
)30)

	)

68 
	#NXCTRL_PIN31
 ((
NXCTRL_PIN
)31)

	)

69 
	#NXCTRL_PIN32
 ((
NXCTRL_PIN
)32)

	)

70 
	#NXCTRL_PIN33
 ((
NXCTRL_PIN
)33)

	)

71 
	#NXCTRL_PIN34
 ((
NXCTRL_PIN
)34)

	)

72 
	#NXCTRL_PIN35
 ((
NXCTRL_PIN
)35)

	)

73 
	#NXCTRL_PIN36
 ((
NXCTRL_PIN
)36)

	)

74 
	#NXCTRL_PIN37
 ((
NXCTRL_PIN
)37)

	)

75 
	#NXCTRL_PIN38
 ((
NXCTRL_PIN
)38)

	)

76 
	#NXCTRL_PIN39
 ((
NXCTRL_PIN
)39)

	)

77 
	#NXCTRL_PIN40
 ((
NXCTRL_PIN
)40)

	)

78 
	#NXCTRL_PIN41
 ((
NXCTRL_PIN
)41)

	)

79 
	#NXCTRL_PIN42
 ((
NXCTRL_PIN
)42)

	)

80 
	#NXCTRL_PIN43
 ((
NXCTRL_PIN
)43)

	)

81 
	#NXCTRL_PIN44
 ((
NXCTRL_PIN
)44)

	)

82 
	#NXCTRL_PIN45
 ((
NXCTRL_PIN
)45)

	)

83 
	#NXCTRL_PIN46
 ((
NXCTRL_PIN
)46)

	)

85 
	tNXCTRL_AIN
;

86 
	#NXCTRL_A0
 ((
NXCTRL_AIN
)0)

	)

87 
	#NXCTRL_A1
 ((
NXCTRL_AIN
)1)

	)

88 
	#NXCTRL_A2
 ((
NXCTRL_AIN
)2)

	)

89 
	#NXCTRL_A3
 ((
NXCTRL_AIN
)3)

	)

90 
	#NXCTRL_A4
 ((
NXCTRL_AIN
)4)

	)

91 
	#NXCTRL_A5
 ((
NXCTRL_AIN
)5)

	)

92 
	#NXCTRL_A6
 ((
NXCTRL_AIN
)6)

	)

94 
	tNXCTRL_MODE
;

95 
	#NXCTRL_MODE0
 ((
NXCTRL_MODE
)0)

	)

96 
	#NXCTRL_MODE1
 ((
NXCTRL_MODE
)1)

	)

97 
	#NXCTRL_MODE2
 ((
NXCTRL_MODE
)2)

	)

98 
	#NXCTRL_MODE3
 ((
NXCTRL_MODE
)3)

	)

99 
	#NXCTRL_MODE4
 ((
NXCTRL_MODE
)4)

	)

100 
	#NXCTRL_MODE5
 ((
NXCTRL_MODE
)5)

	)

101 
	#NXCTRL_MODE6
 ((
NXCTRL_MODE
)6)

	)

102 
	#NXCTRL_MODE7
 ((
NXCTRL_MODE
)7)

	)

104 
	tNXCTRL_PULLTYPE
;

105 
	#NXCTRL_NOPULL
 ((
NXCTRL_PULLTYPE
)0)

	)

106 
	#NXCTRL_PULLUP
 ((
NXCTRL_PULLTYPE
)1)

	)

107 
	#NXCTRL_PULLDN
 ((
NXCTRL_PULLTYPE
)2)

	)

109 (*
	tNXCTRL_SIG_HANDLER
) ();

	@adc-test.c

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<NXCTRL.h
>

27 
	#ANALOG_IN1
 
NXCTRL_A0


	)

28 
	#ANALOG_IN2
 
NXCTRL_A4


	)

30 
	gnCou¡
 = 0;

32 
NXCTRL_VOID


33 
	$NXCTRLSëup
 (
NXCTRL_VOID
) {

34 
nCou¡
 < 40) {

35 
	`¥ötf
("%03d: %04d %04d\n", 1 + 
nCou¡
++,

36 
	`NXCTRLA«logRód
(
ANALOG_IN1
),

37 
	`NXCTRLA«logRód
(
ANALOG_IN2
));

38 
	`NXCTRLSÀï
(500, 0);

40 
	}
}

42 
NXCTRL_VOID


43 
	$NXCTRLLo›
 (
NXCTRL_VOID
) {

44 
	`NXCTRLExôLo›
();

45 
	}
}

48 
	$maö
 () {

49  
	`NXCTRLMaö
();

50 
	}
}

	@adcpru-test.c

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 
	~<î∫o.h
>

27 
	~<NXCTRL.h
>

29 
	~<uni°d.h
>

30 
	~<sys/mm™.h
>

31 
	~<f˙é.h
>

32 
	~<î∫o.h
>

34 
	~<¥ussdrv.h
>

35 
	~<¥uss_ötc_m≠pög.h
>

37 
	#PRU_NUM
 
PRU0


38 
	#PRU_PATH
 "./ad˝ru-ã°.bö"

	)

40 
	#OFFSET_SHAREDRAM
 2048

	)

42 
NXCTRL_VOID


43 
	$NXCTRLSëup
 (
NXCTRL_VOID
) {

44 
nRë
;

45 *
pSh¨edMem
;

46 *
≤Sh¨edMem
;

47 
çruss_ötc_öôd©a
 
ötc
 = 
PRUSS_INTC_INITDATA
;

50 i‡((
nRë
 = 
	`¥ussdrv_öô
())) {

51 
	`Ârötf
(
°dîr
, "prussdrv_init() failed\n");

52 
	`exô
(
nRë
);

56 i‡((
nRë
 = 
	`¥ussdrv_›í
(
PRU_EVTOUT_0
))) {

57 
	`Ârötf
(
°dîr
, "¥ussdrv_›í(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
));

58 
	`exô
(
nRë
);

62 i‡((
nRë
 = 
	`¥ussdrv_¥uötc_öô
(&
ötc
))) {

63 
	`Ârötf
(
°dîr
, "prussdrv_pruintc_init() failed\n");

64 
	`exô
(
nRë
);

68 i‡((
nRë
 = 
	`¥ussdrv_exec_¥ogøm
(
PRU_NUM
, 
PRU_PATH
))) {

69 
	`Ârötf
(
°dîr
, "prussdrv_exec_program() failed\n");

70 
	`exô
(
nRë
);

74 
	`¥ötf
("waiting for interrupt from PRU0...\n");

75 
nRë
 = 
	`¥ussdrv_¥u_waô_evít
(
PRU_EVTOUT_0
);

76 
	`¥ötf
("PRUÖrogøm com∂ëed wôh: %d\n", 
nRë
);

79 i‡(
	`¥ussdrv_¥u_˛ór_evít
(
PRU_EVTOUT_0
, 
PRU0_ARM_INTERRUPT
))

80 
	`Ârötf
(
°dîr
, "prussdrv_pru_clear_event() failed\n");

83 i‡((
nRë
 = 
	`¥ussdrv_m≠_¥umem
(
PRUSS0_SHARED_DATARAM
, &
pSh¨edMem
))) {

84 
	`Ârötf
(
°dîr
, "prussdrv_map_prumem() failed\n");

85 
	`exô
(
nRë
);

88 
≤Sh¨edMem
 = (*)
pSh¨edMem
 + 
OFFSET_SHAREDRAM
;

89 
	`¥ötf
("AIN0 VL: %04d\n", 
≤Sh¨edMem
[0] & 0xFFF);

90 
	`¥ötf
("IRQSTAT: "); 
	`¥ötINT32
(
≤Sh¨edMem
[1]);

91 
	`¥ötf
("EXITCNT: %02d\n", 
≤Sh¨edMem
[2]);

94 i‡(
	`¥ussdrv_¥u_dißbÀ
(
PRU_NUM
))

95 
	`Ârötf
(
°dîr
, "prussdrv_pru_disable() failed\n");

98 i‡(
	`¥ussdrv_exô
())

99 
	`Ârötf
(
°dîr
, "prussdrv_exit() failed\n");

100 
	}
}

102 
NXCTRL_VOID


103 
	$NXCTRLLo›
 (
NXCTRL_VOID
) {

104 
	`NXCTRLExôLo›
();

105 
	}
}

108 
	$maö
 () {

109  
	`NXCTRLMaö
();

110 
	}
}

	@ak8448-test.c

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 
	~<NXCTRL.h
>

28 
	~<uni°d.h
>

29 
	~<°döt.h
>

30 
	~<f˙é.h
>

31 
	~<sys/io˘l.h
>

32 
	~<löux/ty≥s.h
>

33 
	~<löux/•i/•idev.h
>

35 
	#USE_SPI1
 0

36 

	)

37 #i‡
USE_SPI1


38 
	#SPI_CS0
 17

39 
	#SPI_D1
 18

40 
	#SPI_D0
 21

41 
	#SPI_CLK
 22

42 
	#SPI_DEV
 "/dev/•idev1.0"

	)

44 
	#SPI_CS0
 28

45 
	#SPI_D1
 30

46 
	#SPI_D0
 29

47 
	#SPI_CLK
 31

48 
	#SPI_DEV
 "/dev/•idev2.0"

	)

51 
	#DELAY_USEC
 0

	)

53 
	#CHECK_USER
 0

	)

56 
	$__checkUSR
 () {

57 #i‡
CHECK_USER


58 
	`¥ötf
("Pªs†™y keyÅÿc⁄töue..."); 
	`gëch¨
();

60 
	}
}

63 
	$__SPI_ªad
 (
nFD
) {

64 
nSètus
;

65 
•i_ioc_å™s„r
 
x„r
[2];

66 
rchTXD©a
[2];

67 
rchRXD©a
[2];

70 
	`mem£t
(
x„r
, 0, (xfer));

72 
rchTXD©a
[0] = 0;

73 
rchTXD©a
[1] = 0;

74 
rchRXD©a
[0] = 0;

75 
rchRXD©a
[1] = 0;

77 
rchTXD©a
[0] |
BIT7
;

79 
x„r
[0].
tx_buf
 = ()
rchTXD©a
;

80 
x„r
[0].
rx_buf
 = ()
rchRXD©a
;

81 
x„r
[0].
Àn
 = 2;

82 
x„r
[0].
dñay_u£cs
 = 
DELAY_USEC
;

84 
	`__checkUSR
();

86 
nSètus
 = 
	`io˘l
(
nFD
, 
	`SPI_IOC_MESSAGE
(1), 
x„r
);

87 i‡(
nSètus
 < 0) {

88 
	`≥º‹
("SPI_IOC_MESSAGE");

92 
	`¥ötf
("TX: "); 
	`¥ötINT16
(
rchTXD©a
[0] | (rchTXData[1] << 8));

93 
	`¥ötf
("RX: "); 
	`¥ötINT16
(
rchRXD©a
[0] | (rchRXData[1] << 8));

96 
	`mem£t
(
x„r
, 0, (xfer));

98 
rchTXD©a
[0] = 0;

99 
rchTXD©a
[1] = 0;

100 
rchRXD©a
[0] = 0;

101 
rchRXD©a
[1] = 0;

103 
rchTXD©a
[0] |
BIT7
;

104 
rchTXD©a
[0] |
BIT0
;

106 
x„r
[0].
tx_buf
 = ()
rchTXD©a
;

107 
x„r
[0].
rx_buf
 = ()
rchRXD©a
;

108 
x„r
[0].
Àn
 = 2;

109 
x„r
[0].
dñay_u£cs
 = 
DELAY_USEC
;

111 
	`__checkUSR
();

113 
nSètus
 = 
	`io˘l
(
nFD
, 
	`SPI_IOC_MESSAGE
(1), 
x„r
);

114 i‡(
nSètus
 < 0) {

115 
	`≥º‹
("SPI_IOC_MESSAGE");

119 
	`¥ötf
("TX: "); 
	`¥ötINT16
(
rchTXD©a
[0] | (rchTXData[1] << 8));

120 
	`¥ötf
("RX: "); 
	`¥ötINT16
(
rchRXD©a
[0] | (rchRXData[1] << 8));

123 
	}
}

126 
	$__SPI_wrôe
 (
nFD
) {

127 
nSètus
;

128 
•i_ioc_å™s„r
 
x„r
[2];

129 
rchTXD©a
[2];

130 
rchRXD©a
[2];

133 
	`mem£t
(
x„r
, 0, (xfer));

135 
rchTXD©a
[0] = 0;

136 
rchTXD©a
[1] = 0;

137 
rchRXD©a
[0] = 0;

138 
rchRXD©a
[1] = 0;

140 
rchTXD©a
[1] |
BIT7
;

141 
rchTXD©a
[1] |
BIT5
;

143 
x„r
[0].
tx_buf
 = ()
rchTXD©a
;

144 
x„r
[0].
rx_buf
 = ()
rchRXD©a
;

145 
x„r
[0].
Àn
 = 2;

146 
x„r
[0].
dñay_u£cs
 = 
DELAY_USEC
;

148 
	`__checkUSR
();

150 
nSètus
 = 
	`io˘l
(
nFD
, 
	`SPI_IOC_MESSAGE
(1), 
x„r
);

151 i‡(
nSètus
 < 0) {

152 
	`≥º‹
("SPI_IOC_MESSAGE");

156 
	`¥ötf
("TX: "); 
	`¥ötINT16
(
rchTXD©a
[0] | (rchTXData[1] << 8));

157 
	`¥ötf
("RX: "); 
	`¥ötINT16
(
rchRXD©a
[0] | (rchRXData[1] << 8));

160 
	`mem£t
(
x„r
, 0, (xfer));

162 
rchTXD©a
[0] = 0;

163 
rchTXD©a
[1] = 0;

164 
rchRXD©a
[0] = 0;

165 
rchRXD©a
[1] = 0;

167 
rchTXD©a
[0] |
BIT0
;

168 
rchTXD©a
[1] |
BIT5
;

169 
rchTXD©a
[1] |
BIT3
;

171 
x„r
[0].
tx_buf
 = ()
rchTXD©a
;

172 
x„r
[0].
rx_buf
 = ()
rchRXD©a
;

173 
x„r
[0].
Àn
 = 2;

174 
x„r
[0].
dñay_u£cs
 = 
DELAY_USEC
;

176 
	`__checkUSR
();

178 
nSètus
 = 
	`io˘l
(
nFD
, 
	`SPI_IOC_MESSAGE
(1), 
x„r
);

179 i‡(
nSètus
 < 0) {

180 
	`≥º‹
("SPI_IOC_MESSAGE");

184 
	`¥ötf
("TX: "); 
	`¥ötINT16
(
rchTXD©a
[0] | (rchTXData[1] << 8));

185 
	`¥ötf
("RX: "); 
	`¥ötINT16
(
rchRXD©a
[0] | (rchRXData[1] << 8));

188 
	}
}

190 
NXCTRL_VOID


191 
	$NXCTRLSëup
 (
NXCTRL_VOID
) {

192 
nFD
;

193 
uöt8_t
 
nLSB
;

194 
uöt32_t
 
nS≥ed
, 
nSPIMode
;

196 #i‡
USE_SPI1


197 
	`NXCTRLPöMux
(
NXCTRL_P9
, 
SPI_CS0
, 
NXCTRL_MODE0
, 
NXCTRL_PULLDN
, 
NXCTRL_LOW
);

198 
	`NXCTRLPöMux
(
NXCTRL_P9
, 
SPI_D1
, 
NXCTRL_MODE0
, 
NXCTRL_PULLDN
, 
NXCTRL_LOW
);

199 
	`NXCTRLPöMux
(
NXCTRL_P9
, 
SPI_D0
, 
NXCTRL_MODE0
, 
NXCTRL_PULLUP
, 
NXCTRL_HIGH
);

200 
	`NXCTRLPöMux
(
NXCTRL_P9
, 
SPI_CLK
, 
NXCTRL_MODE0
, 
NXCTRL_PULLUP
, 
NXCTRL_HIGH
);

202 
	`NXCTRLPöMux
(
NXCTRL_P9
, 
SPI_CS0
, 
NXCTRL_MODE3
, 
NXCTRL_PULLDN
, 
NXCTRL_LOW
);

203 
	`NXCTRLPöMux
(
NXCTRL_P9
, 
SPI_D1
, 
NXCTRL_MODE3
, 
NXCTRL_PULLDN
, 
NXCTRL_LOW
);

204 
	`NXCTRLPöMux
(
NXCTRL_P9
, 
SPI_D0
, 
NXCTRL_MODE3
, 
NXCTRL_PULLUP
, 
NXCTRL_HIGH
);

205 
	`NXCTRLPöMux
(
NXCTRL_P9
, 
SPI_CLK
, 
NXCTRL_MODE3
, 
NXCTRL_PULLUP
, 
NXCTRL_HIGH
);

208 
nFD
 = 
	`›í
(
SPI_DEV
, 
O_RDWR
);

210 
nLSB
 = 0;

211 
	`io˘l
(
nFD
, 
SPI_IOC_WR_LSB_FIRST
, &
nLSB
);

212 
nS≥ed
 = 10000000;

213 
	`io˘l
(
nFD
, 
SPI_IOC_WR_MAX_SPEED_HZ
, &
nS≥ed
);

214 
nSPIMode
 = 
SPI_MODE_3
;

215 
	`io˘l
(
nFD
, 
SPI_IOC_WR_MODE
, &
nSPIMode
);

217 
	`__SPI_wrôe
(
nFD
);

218 
	`__SPI_ªad
(
nFD
);

220 
	`˛o£
(
nFD
);

221 
	}
}

223 
NXCTRL_VOID


224 
	$NXCTRLLo›
 (
NXCTRL_VOID
) {

225 
	`NXCTRLExôLo›
();

226 
	}
}

229 
	$maö
 () {

230  
	`NXCTRLMaö
();

231 
	}
}

	@am335x-bandgap/am335x-bandgap.c

15 
	~<löux/hwm⁄.h
>

16 
	~<löux/hwm⁄-sysfs.h
>

17 
	~<löux/îr.h
>

18 
	~<löux/io.h
>

19 
	~<löux/dñay.h
>

20 
	~<löux/moduÀ.h
>

21 
	~<löux/of.h
>

22 
	~<löux/∂©f‹m_devi˚.h
>

23 
	~<löux/¶ab.h
>

24 
	~<löux/sysfs.h
>

26 
	#DRV_NAME
 "am335x-b™dg≠"

	)

28 
	#BANDGAP_CTRL
 0x0

	)

29 
	#BANDGAP_CTRL_DTEMP_MASK
 0x0000FF00

	)

30 
	#BANDGAP_CTRL_DTEMP_OFF
 8

	)

31 
	#BANDGAP_CTRL_BGROFF
 
	`BIT
(6)

	)

32 
	#BANDGAP_CTRL_SOC
 
	`BIT
(4)

	)

33 
	#BANDGAP_CTRL_CLRZ
 
	`BIT
(3Ë

	)

34 
	#BANDGAP_CTRL_CONTCONV
 
	`BIT
(2)

	)

35 
	#BANDGAP_CTRL_ECOZ
 
	`BIT
(1)

	)

36 
	#BANDGAP_CTRL_TSHUT
 
	`BIT
(0)

	)

38 
	#BANDGAP_TRIM
 0x4

	)

39 
	#BANDGAP_TRIM_DTRBGAPC_MASK
 0xFF000000

	)

40 
	#BANDGAP_TRIM_DTRBGAPC_OFF
 24

	)

41 
	#BANDGAP_TRIM_DTRBGAPV_MASK
 0x00FF0000

	)

42 
	#BANDGAP_TRIM_DTRBGAPV_OFF
 16

	)

43 
	#BANDGAP_TRIM_DTRTEMPS_MASK
 0x0000FF00

	)

44 
	#BANDGAP_TRIM_DTRTEMPS_OFF
 8

	)

45 
	#BANDGAP_TRIM_DTRTEMPSC_MASK
 0x000000FF

	)

46 
	#BANDGAP_TRIM_DTRTEMPSC_OFF
 0

	)

48 
	sam335x_b™dg≠
 {

49 
u32
 
__iomem
 *
	mªgs
;

50 
devi˚
 *
	mhwm⁄_dev
;

53 
ssize_t
 
	$show_«me
(
devi˚
 *
dev
, 
devi˚_©åibuã


54 *
dev©å
, *
buf
)

56  
	`•rötf
(
buf
, "%s\n", 
DRV_NAME
);

57 
	}
}

59 
ssize_t
 
	$show_öput
(
devi˚
 *
dev
,

60 
devi˚_©åibuã
 *
dev©å
, *
buf
)

62 
am335x_b™dg≠
 *
d©a
 = 
	`dev_gë_drvd©a
(
dev
);

63 
u32
 
vÆ
, 
ãmp
;

66 
vÆ
 = 
	`ªadl
(
d©a
->
ªgs
 + 
BANDGAP_CTRL
);

69 
vÆ
 = (vÆ & 
BANDGAP_CTRL_DTEMP_MASK
Ë>> 
BANDGAP_CTRL_DTEMP_OFF
;

70 
ãmp
 = 
vÆ
 * 1000;

72  
	`•rötf
(
buf
, "%d\n", 
ãmp
);

73 
	}
}

75 
SENSOR_DEVICE_ATTR
(
«me
, 
S_IRUGO
, 
show_«me
, 
NULL
, 0);

76 
SENSOR_DEVICE_ATTR
(
ãmp1_öput
, 
S_IRUGO
, 
show_öput
, 
NULL
, 0);

78 
©åibuã
 *
	gam335x_b™dg≠_©åibuãs
[] = {

79 &
£ns‹_dev_©å_«me
.
dev_©å
.
©å
,

80 &
£ns‹_dev_©å_ãmp1_öput
.
dev_©å
.
©å
,

81 
NULL


84 c⁄° 
©åibuã_group
 
	gam335x_b™dg≠_group
 = {

85 .
©ås
 = 
am335x_b™dg≠_©åibuãs
,

88 
	$am335x_b™dg≠_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

90 
am335x_b™dg≠
 *
d©a
;

91 
ªsour˚
 *
ªs
;

92 
îr
;

94 
d©a
 = 
	`devm_kzÆloc
(&
pdev
->
dev
, (*d©a), 
GFP_KERNEL
);

95 i‡(!
d©a
)

96  -
ENOMEM
;

98 
ªs
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

99 i‡(!
ªs
)

100  -
ENODEV
;

102 
d©a
->
ªgs
 = 
	`devm_ªque°_™d_i‹em≠
(&
pdev
->
dev
, 
ªs
);

103 i‡(!
d©a
->
ªgs
)

104  -
ENODEV
;

106 
	`∂©f‹m_£t_drvd©a
(
pdev
, 
d©a
);

108 
îr
 = 
	`sysfs_¸óã_group
(&
pdev
->
dev
.
kobj
, &
am335x_b™dg≠_group
);

109 i‡(
îr
 < 0) {

110 
	`dev_îr
(&
pdev
->
dev
, "Cª©êsysf†grou∞Áûed (%d)\n", 
îr
);

111  
îr
;

114 
d©a
->
hwm⁄_dev
 = 
	`hwm⁄_devi˚_ªgi°î
(&
pdev
->
dev
);

115 i‡(
	`IS_ERR
(
d©a
->
hwm⁄_dev
)) {

116 
îr
 = 
	`PTR_ERR
(
d©a
->
hwm⁄_dev
);

117 
	`dev_îr
(&
pdev
->
dev
, "Cœs†ªgi°øti⁄ faûed (%d)\n", 
îr
);

118 
exô_sysfs_group
;

122 
	`wrôñ
(
BANDGAP_CTRL_SOC
 | 
BANDGAP_CTRL_CLRZ
 | 
BANDGAP_CTRL_CONTCONV
,

123 
d©a
->
ªgs
 + 
BANDGAP_CTRL
);

127 
exô_sysfs_group
:

128 
	`sysfs_ªmove_group
(&
pdev
->
dev
.
kobj
, &
am335x_b™dg≠_group
);

129  
îr
;

130 
	}
}

132 
	$am335x_b™dg≠_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

134 
am335x_b™dg≠
 *
d©a
 = 
	`∂©f‹m_gë_drvd©a
(
pdev
);

137 
	`wrôñ
(0x0, 
d©a
->
ªgs
 + 
BANDGAP_CTRL
);

139 
	`hwm⁄_devi˚_uƒegi°î
(
d©a
->
hwm⁄_dev
);

140 
	`sysfs_ªmove_group
(&
pdev
->
dev
.
kobj
, &
am335x_b™dg≠_group
);

143 
	}
}

145 c⁄° 
of_devi˚_id
 
	gam335x_b™dg≠_m©ch
[] = {

146 { .
com∑tibÀ
 = "ti,am335x-bandgap" },

150 
∂©f‹m_drivî
 
	gam335x_b™dg≠_drivî
 = {

151 .
drivî
 = {

152 .
ow√r
 = 
THIS_MODULE
,

153 .
	g«me
 = 
DRV_NAME
,

154 .
	gof_m©ch_èbÀ
 = 
of_m©ch_±r
(
am335x_b™dg≠_m©ch
),

156 .
	g¥obe
 = 
am335x_b™dg≠_¥obe
,

157 .
	gªmove
 = 
am335x_b™dg≠_ªmove
,

160 
moduÀ_∂©f‹m_drivî
(
am335x_b™dg≠_drivî
);

162 
MODULE_AUTHOR
("Jan Luebbe <j.luebbe@pengutronix.de>");

163 
MODULE_DESCRIPTION
("AM335xÅemperature sensor driver");

164 
MODULE_LICENSE
("GPL");

	@app-blank.c

23 
	~<uni°d.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°rög.h
>

27 
	~<sig«l.h
>

28 
	~<sys/time.h
>

29 
	~<time.h
>

30 
	~<NXCTRL_≠pEx.h
>

32 
NXCTRL_BOOL
 
	gMENU_BUTTON_STATE
 = 
NXCTRL_LOW
;

34 
NXCTRL_VOID


35 
	$upd©eMíuBuâ⁄Sèã
 (
LPNXCTRLAPP
 
pAµ
) {

36 i‡(
MENU_BUTTON_STATE
 =
NXCTRL_LOW
) {

37 i‡(
pAµ
->
	`digôÆRód
(
MENU_BUTTON_BANK
, 
MENU_BUTTON_PIN
Ë=
NXCTRL_HIGH
) {

38 
MENU_BUTTON_STATE
 = 
NXCTRL_HIGH
;

41 i‡(
pAµ
->
	`digôÆRód
(
MENU_BUTTON_BANK
, 
MENU_BUTTON_PIN
Ë=
NXCTRL_LOW
) {

42 
MENU_BUTTON_STATE
 = 
NXCTRL_LOW
;

45 
	}
}

47 
NXCTRL_VOID


48 
	$NXCTRLAPP_öô
 (
LPNXCTRLAPP
 
pAµ
) {

49 
MENU_BUTTON_STATE
 = 
NXCTRL_LOW
;

51 
pAµ
->
	`˛órDi•œy
();

52 
pAµ
->
	`upd©eDi•œy
();

53 
	}
}

55 
NXCTRL_VOID


56 
	$NXCTRLAPP_˛ón
 (
LPNXCTRLAPP
 
pAµ
) {

57 
	}
}

59 
NXCTRL_VOID


60 
	$NXCTRLAPP_run
 (
LPNXCTRLAPP
 
pAµ
) {

61 
	`upd©eMíuBuâ⁄Sèã
(
pAµ
);

63 i‡(
MENU_BUTTON_STATE
 =
NXCTRL_ON
) {

64 
pAµ
->
nCmd
 = 0;

67 
	}
}

	@app-conninfo.c

23 
	#_GNU_SOURCE


	)

25 
	~<uni°d.h
>

26 
	~<f˙é.h
>

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

29 
	~<°rög.h
>

30 
	~<sig«l.h
>

31 
	~<sys/time.h
>

32 
	~<time.h
>

33 
	~<sys/io˘l.h
>

34 
	~<¨∑/öë.h
>

35 
	~<sys/sockë.h
>

36 
	~<√tdb.h
>

37 
	~<iÁddrs.h
>

38 
	~<˘y≥.h
>

39 
	~<NXCTRL_≠pEx.h
>

41 
	#FONT_WIDTH
 6

	)

42 
	#FONT_HEIGHT
 8

	)

43 
	#MENU_SEL_CHAR
 (()16)

	)

45 
	#DPY_IDLE_COUNT_MAX
 300

	)

46 
	#MIN_ACTION_DURATION
 200

	)

48 
	#MENU_IDX_COUNT
 4

	)

50 
	#MENU_IDX_SYSTEM_MENU
 0

	)

51 
	#MENU_IDX_RELOAD_MENU
 1

	)

52 
	#MENU_IDX_PING_GW_MENU
 2

	)

53 
	#MENU_IDX_EXIT_MENU
 3

	)

55 
NXCTRL_BOOL
 
	gMENU_BUTTON_STATE
 = 
NXCTRL_LOW
;

56 
NXCTRL_BOOL
 
	gEXEC_BUTTON_STATE
 = 
NXCTRL_LOW
;

57 
	gDPY_IDLE_COUNT
 = 0;

58 
	gMENU_IDX
 = 
MENU_IDX_SYSTEM_MENU
;

59 
NXCTRL_BOOL
 
	gIN_MENU
 = 
NXCTRL_FALSE
;

60 
	gLAST_ACTION_TIME
 = 0;

62 
NXCTRL_BOOL


63 
	$ˇnA˘i⁄
 (
NXCTRL_VOID
) {

64 
time•ec
 
tm
;

65 
timeInMûlis
;

66 
	`˛ock_gëtime
(, 
time•ec
 *);

67 
	`˛ock_gëtime
(
_POSIX_CPUTIME
, &
tm
);

68 
timeInMûlis
 = 
tm
.
tv_£c
 * 1000 +Åm.
tv_n£c
/1000000;

69 i‡((
timeInMûlis
 - 
LAST_ACTION_TIME
Ë> 
MIN_ACTION_DURATION
) {

70 
LAST_ACTION_TIME
 = 
timeInMûlis
;

71  
NXCTRL_TRUE
;

73  
NXCTRL_FALSE
;

74 
	}
}

76 
NXCTRL_BOOL


77 
	$gëMacAddªss
 (*
pszIFName
, *
pszMacIP
) {

78 
rchIFName
[
BUFSIZ
];

79 
FILE
 *
pFûe
;

80 
i
;

82 
	`•rötf
(
rchIFName
, "/sys/˛ass/√t/%s/addªss", 
pszIFName
);

83 
pFûe
 = 
	`f›í
(
rchIFName
, "r");

84 i‡(!
pFûe
)

85  
NXCTRL_FALSE
;

87 
	`fsˇnf
(
pFûe
, "%s", 
pszMacIP
);

88 
	`f˛o£
(
pFûe
);

89 
i
 = 0; i < 
	`°æí
(
pszMacIP
); i++)

90 
pszMacIP
[
i
] = 
	`touµî
(pszMacIP[i]);

91  
NXCTRL_TRUE
;

92 
	}
}

94 
NXCTRL_BOOL


95 
	$gëWIFIInfo
 (*
≤Lök
, *
≤Levñ
, *
≤Noi£
) {

96 
FILE
 *
pFûe
 = 
	`f›í
("/proc/net/wireless", "r");

97 
rch
[1024];

98 
rchLabñ
[8];

100 i‡(!
pFûe
)

101  
NXCTRL_FALSE
;

103 
	`fgës
(
rch
, 1023, 
pFûe
)) {

104 
	`ssˇnf
(
rch
, "%s", 
rchLabñ
);

105 i‡(!
	`°rcmp
(
rchLabñ
, "wlan0:")) {

107 
	`ssˇnf
(
rch
, "%†%†%d. %d. %d.", 
rchLabñ
,ÑchLabñ, 
≤Lök
, 
≤Levñ
, 
≤Noi£
);

110 
	`f˛o£
(
pFûe
);

112  
NXCTRL_TRUE
;

113 
	}
}

115 
NXCTRL_BOOL


116 
	$gëDeÁu…GW
 (*
pszGW
) {

117 
FILE
 *
pFûe
 = 
	`f›í
("/proc/net/route", "r");

118 
rch
[1024];

119 
rchIFa˚
[32], 
rchDe°
[32], 
rchGW
[32];

120 
NXCTRL_BOOL
 
bFound
 = 
NXCTRL_OFF
;

121 
i0
, 
i1
, 
i2
, 
i3
;

123 i‡(!
pFûe
)

124  
NXCTRL_FALSE
;

126 
	`fgës
(
rch
, 1023, 
pFûe
)) {

127 
	`ssˇnf
(
rch
, "%†%†%s", 
rchIFa˚
, 
rchDe°
, 
rchGW
);

128 i‡(!
	`°rcmp
(
rchDe°
, "00000000")) {

129 
bFound
 = 
NXCTRL_ON
;

133 
	`f˛o£
(
pFûe
);

135 i‡(!
bFound
)

136  
NXCTRL_FALSE
;

138 
	`ssˇnf
(
rchGW
, "%2x%2x%2x%2x", &
i0
, &
i1
, &
i2
, &
i3
);

139 
	`•rötf
(
pszGW
, "%d.%d.%d.%d", 
i3
, 
i2
, 
i1
, 
i0
);

141  
NXCTRL_TRUE
;

142 
	}
}

144 
NXCTRL_VOID


145 
	$pögToDeÁu…GW
 (
NXCTRL_VOID
) {

146 
rch
[1024], 
rchGW
[32];

147 i‡(
	`gëDeÁu…GW
(
rchGW
)) {

148 
	`•rötf
(
rch
, "pög -¯1 -W 1 %†>& /dev/nuŒ", 
rchGW
);

149 
	`sy°em
(
rch
);

151 
	}
}

153 
NXCTRL_VOID


154 
	$di•œyC⁄nInfo
 (
LPNXCTRLAPP
 
pAµ
) {

155 
iÁddrs
 *
iÁddr
, *
iÁ
;

156 
n
;

157 
rchHo°
[
NI_MAXHOST
];

158 
rchBuf„r
[1024];

159 
rchGW
[32];

160 
rchMacIP
[20];

161 
nLök
, 
nLevñ
, 
nNoi£
;

163 
pAµ
->
	`˛órDi•œy
();

164 
pAµ
->
	`£tCurs‹
(0, 0);

166 i‡(
	`gëiÁddrs
(&
iÁddr
) == -1) {

167 
pAµ
->
	`wrôeSTR
("ERROR IN CONN INFO");

168 
pAµ
->
	`upd©eDi•œy
();

172 
pAµ
->
	`£tCurs‹
(
FONT_WIDTH
*3, 0);

173 
pAµ
->
	`wrôeSTR
("CONNECTION INFO");

175 
pAµ
->
	`£tCurs‹
(0, 
FONT_HEIGHT
 + 8);

177 
iÁ
 = 
iÁddr
; iÁ !
NULL
; iÁ = iÁ->
iÁ_√xt
) {

178 i‡(
iÁ
->
iÁ_addr
 =
NULL
) ;

179 
n
 = 
	`gë«meöfo
(
iÁ
->
iÁ_addr
, (
sockaddr_ö
),

180 
rchHo°
, 
NI_MAXHOST
, 
NULL
, 0, 
NI_NUMERICHOST
);

181 i‡(
n
 =0 && 
	`°rcmp
("lo", 
iÁ
->
iÁ_«me
)) {

182 
	`mem£t
(
rchBuf„r
, 0, 1024);

183 
	`•rötf
(
rchBuf„r
, "%5s: %s\n", 
iÁ
->
iÁ_«me
, 
rchHo°
);

184 
pAµ
->
	`wrôeSTR
(
rchBuf„r
);

187 i‡(
	`gëDeÁu…GW
(
rchGW
)) {

188 
	`•rötf
(
rchBuf„r
, "%5s: %s\n", "gw", 
rchGW
);

189 
pAµ
->
	`wrôeSTR
(
rchBuf„r
);

192 i‡(
	`gëWIFIInfo
(&
nLök
, &
nLevñ
, &
nNoi£
)) {

193 
nCou¡
;

194 
	`•rötf
(
rchBuf„r
, "%d/%d/%d", 
nLök
, 
nLevñ
, 
nNoi£
);

195 
nCou¡
 = (21 - 
	`°æí
(
rchBuf„r
))/2;

196 
nCou¡
 =ÇCount < 0 ? 0 :ÇCount;

197 
pAµ
->
	`£tCurs‹
(
nCou¡
*
FONT_WIDTH
, 47);

198 
pAµ
->
	`wrôeSTR
(
rchBuf„r
);

201 
pAµ
->
	`£tCurs‹
(0, 57);

202 i‡(
	`gëMacAddªss
("wœn0", 
rchMacIP
)) {

203 
	`•rötf
(
rchBuf„r
, " %s", 
rchMacIP
);

204 
pAµ
->
	`wrôeSTR
(
rchBuf„r
);

207 
pAµ
->
	`upd©eDi•œy
();

208 
	}
}

210 
NXCTRL_VOID


211 
	$upd©eMíuBuâ⁄Sèã
 (
LPNXCTRLAPP
 
pAµ
) {

212 i‡(
MENU_BUTTON_STATE
 =
NXCTRL_LOW
) {

213 i‡(
pAµ
->
	`digôÆRód
(
MENU_BUTTON_BANK
, 
MENU_BUTTON_PIN
Ë=
NXCTRL_HIGH
) {

214 
MENU_BUTTON_STATE
 = 
NXCTRL_HIGH
;

215 
DPY_IDLE_COUNT
 = 0;

218 i‡(
pAµ
->
	`digôÆRód
(
MENU_BUTTON_BANK
, 
MENU_BUTTON_PIN
Ë=
NXCTRL_LOW
) {

219 
MENU_BUTTON_STATE
 = 
NXCTRL_LOW
;

220 
DPY_IDLE_COUNT
 = 0;

223 
	}
}

225 
NXCTRL_VOID


226 
	$upd©eExecBuâ⁄Sèã
 (
LPNXCTRLAPP
 
pAµ
) {

227 i‡(
EXEC_BUTTON_STATE
 =
NXCTRL_LOW
) {

228 i‡(
pAµ
->
	`digôÆRód
(
EXEC_BUTTON_BANK
, 
EXEC_BUTTON_PIN
Ë=
NXCTRL_HIGH
) {

229 
EXEC_BUTTON_STATE
 = 
NXCTRL_HIGH
;

230 
DPY_IDLE_COUNT
 = 0;

233 i‡(
pAµ
->
	`digôÆRód
(
EXEC_BUTTON_BANK
, 
EXEC_BUTTON_PIN
Ë=
NXCTRL_LOW
) {

234 
EXEC_BUTTON_STATE
 = 
NXCTRL_LOW
;

235 
DPY_IDLE_COUNT
 = 0;

238 
	}
}

241 
	$mkMíuSTR
 (*
rch
, c⁄° *
pszName
, 
nMíu
) {

242 
	`•rötf
(
rch
, "%c %s\n",

243 (
MENU_IDX
 =
nMíu
 ? 
MENU_SEL_CHAR
 : ' '),

244 
pszName
);

245  
rch
;

246 
	}
}

248 
NXCTRL_VOID


249 
	$di•œyMíu
 (
LPNXCTRLAPP
 
pAµ
) {

250 
rch
[21];

252 
pAµ
->
	`˛órDi•œy
();

254 
pAµ
->
	`£tCurs‹
(0, 0);

255 
pAµ
->
	`wrôeSTR
("CONNECTION");

256 
pAµ
->
	`døwLöe
(61, 6, 127, 6, 
NXCTRL_ON
);

257 
pAµ
->
	`£tCurs‹
(0, 16);

259 
pAµ
->
	`wrôeSTR
(
	`mkMíuSTR
(
rch
, "TC>>", 
MENU_IDX_SYSTEM_MENU
));

260 
pAµ
->
	`wrôeSTR
(
	`mkMíuSTR
(
rch
, "RELOAD INFO", 
MENU_IDX_RELOAD_MENU
));

261 
pAµ
->
	`wrôeSTR
(
	`mkMíuSTR
(
rch
, "PING TO GW", 
MENU_IDX_PING_GW_MENU
));

262 
pAµ
->
	`wrôeSTR
(
	`mkMíuSTR
(
rch
, "EXIT MENU", 
MENU_IDX_EXIT_MENU
));

264 
pAµ
->
	`upd©eDi•œy
();

265 
	}
}

267 
NXCTRL_VOID


268 
	$NXCTRLAPP_öô
 (
LPNXCTRLAPP
 
pAµ
) {

269 
MENU_BUTTON_STATE
 = 
pAµ
->
	`digôÆRód
(
MENU_BUTTON_BANK
, 
MENU_BUTTON_PIN
);

270 
EXEC_BUTTON_STATE
 = 
pAµ
->
	`digôÆRód
(
EXEC_BUTTON_BANK
, 
EXEC_BUTTON_PIN
);

271 
DPY_IDLE_COUNT
 = 0;

272 
MENU_IDX
 = 
MENU_IDX_SYSTEM_MENU
;

273 
IN_MENU
 = 
NXCTRL_FALSE
;

274 
LAST_ACTION_TIME
 = 0;

276 
MENU_BUTTON_STATE
 =
NXCTRL_HIGH
) {

277 
pAµ
->
	`¶ìp
(100, 0);

278 
MENU_BUTTON_STATE
 = 
pAµ
->
	`digôÆRód
(
MENU_BUTTON_BANK
, 
MENU_BUTTON_PIN
);

281 
pAµ
->
	`˛órDi•œy
();

282 
pAµ
->
	`upd©eDi•œy
();

283 
	`di•œyC⁄nInfo
(
pAµ
);

284 
	}
}

286 
NXCTRL_VOID


287 
	$NXCTRLAPP_˛ón
 (
LPNXCTRLAPP
 
pAµ
) {

288 
	}
}

290 
NXCTRL_VOID


291 
	$NXCTRLAPP_run
 (
LPNXCTRLAPP
 
pAµ
) {

292 
	`upd©eMíuBuâ⁄Sèã
(
pAµ
);

293 
	`upd©eExecBuâ⁄Sèã
(
pAµ
);

295 i‡(
MENU_BUTTON_STATE
 !
NXCTRL_HIGH
 && 
EXEC_BUTTON_STATE
 != NXCTRL_HIGH) {

296 
DPY_IDLE_COUNT
++;

297 i‡(
DPY_IDLE_COUNT
 > 
DPY_IDLE_COUNT_MAX
) {

298 
pAµ
->
nCmd
 = 2;

304 i‡(
MENU_BUTTON_STATE
 =
NXCTRL_ON
) {

305 i‡(
IN_MENU
) {

306 i‡(
	`ˇnA˘i⁄
()) {

307 
MENU_IDX
++;

308 i‡(
MENU_IDX
 >
MENU_IDX_COUNT
)

309 
MENU_IDX
 = 
MENU_IDX_SYSTEM_MENU
;

310 
	`di•œyMíu
(
pAµ
);

313 
IN_MENU
 = 
NXCTRL_TRUE
;

314 
	`di•œyMíu
(
pAµ
);

315 
	`ˇnA˘i⁄
();

319 i‡(
EXEC_BUTTON_STATE
 =
NXCTRL_ON
) {

320 i‡(
IN_MENU
) {

321 i‡(
	`ˇnA˘i⁄
()) {

322 
MENU_IDX
) {

323 
MENU_IDX_EXIT_MENU
:

324 
IN_MENU
 = 
NXCTRL_FALSE
;

325 
	`di•œyC⁄nInfo
(
pAµ
);

327 
MENU_IDX_SYSTEM_MENU
:

328 
pAµ
->
nCmd
 = 1;

330 
MENU_IDX_RELOAD_MENU
:

331 
IN_MENU
 = 
NXCTRL_FALSE
;

332 
	`di•œyC⁄nInfo
(
pAµ
);

334 
MENU_IDX_PING_GW_MENU
:

335 
pAµ
->
	`˛órDi•œy
();

336 
pAµ
->
	`£tCurs‹
(
FONT_WIDTH
*5, 
FONT_HEIGHT
*3);

337 
pAµ
->
	`wrôeSTR
("PING TO GW...");

338 
pAµ
->
	`upd©eDi•œy
();

339 
	`pögToDeÁu…GW
();

340 
IN_MENU
 = 
NXCTRL_FALSE
;

341 
	`di•œyC⁄nInfo
(
pAµ
);

349 
	}
}

	@app-main.c

23 
	~<uni°d.h
>

24 
	~<f˙é.h
>

25 
	~<°dio.h
>

26 
	~<°dlib.h
>

27 
	~<°rög.h
>

28 
	~<sig«l.h
>

29 
	~<sys/time.h
>

30 
	~<time.h
>

31 
	~<NXCTRL_≠pEx.h
>

33 
	#TMP36_PIN
 
NXCTRL_A1


	)

35 
	#TMP36_DELTA
 0.00

	)

36 
	#CPUTEMP_BASE
 56.0

	)

37 
	#CPUTEMP_SSG
 60.0

	)

38 
	#SSG_DELTA
 0.00

	)

39 
	#TMP_MAX_DELTA
 9.00

	)

41 
	#TEMP_UPDATE_COUNT
 20

	)

43 
	#LOGO_WIDTH
 128

	)

44 
	#LOGO_HEIGHT
 64

	)

46 
	#FONT_WIDTH
 6

	)

47 
	#FONT_HEIGHT
 8

	)

48 
	#MENU_SEL_CHAR
 (()16)

	)

50 
	#DPY_IDLE_COUNT_MAX
 300

	)

51 
	#MIN_ACTION_DURATION
 200

	)

53 
	#MENU_IDX_COUNT
 3

	)

55 
	#MENU_IDX_SYSTEM_MENU
 0

	)

56 
	#MENU_IDX_UPDATE_TIME
 1

	)

57 
	#MENU_IDX_EXIT_MENU
 2

	)

59 
NXCTRL_BOOL
 
	gMENU_BUTTON_STATE
 = 
NXCTRL_LOW
;

60 
NXCTRL_BOOL
 
	gEXEC_BUTTON_STATE
 = 
NXCTRL_LOW
;

61 
	gDPY_IDLE_COUNT
 = 0;

62 
	gMENU_IDX
 = 
MENU_IDX_SYSTEM_MENU
;

63 
NXCTRL_BOOL
 
	gIN_MENU
 = 
NXCTRL_FALSE
;

64 
	gLAST_ACTION_TIME
 = 0;

65 
	gDPY_UPDATE_TIME
 = 10000;

66 
	gCPUTEMP
 = 0;

69 
	$gëCPUTemp
 (
NXCTRL_VOID
) {

70 c⁄° *
psz
 = "/sys/class/hwmon/hwmon0/device/temp1_input";

72 
nFD
 = 
	`›í
(
psz
, 
O_RDONLY
);

73 i‡(
nFD
 < 0) {

74 
	`sy°em
("rmmodám335x_bandgap");

75 
	`sy°em
("modprobeám335x_bandgap");

78 
rch
[8];

79 
n
 = 
	`ªad
(
nFD
, 
rch
, 7);

80 
rch
[
n
] = 0;

81 
n
 = 
	`©oi
(
rch
);

82 
	`˛o£
(
nFD
);

83 i‡(
n
 > 120000) {

84 
	`sy°em
("rmmodám335x_bandgap");

85 
	`sy°em
("modprobeám335x_bandgap");

88  
n
;

91 
	}
}

94 
	$gëTMP36VÆue
 (
LPNXCTRLAPP
 
pAµ
) {

95  
pAµ
->
	`™ÆogRód
(
TMP36_PIN
)*1.8/4096.0;

96 
	}
}

99 
	$gëTem≥øtuª
 (
LPNXCTRLAPP
 
pAµ
) {

100 
nUpd©e
 = -1;

101 
fTemp
 = 0.0;

103 i‡(
nUpd©e
 < 0 ||ÇUpd©ê> 
TEMP_UPDATE_COUNT
) {

104 
fTmp
 = (
	`gëTMP36VÆue
(
pAµ
Ë+ 
TMP36_DELTA
 - 0.5) * 100;

105 
fCPUTemp
 = 
	`gëCPUTemp
()/1000.0;

107 
fCPUTemp
 = (fCPUTemp > 120) ? (fCPUTemp - 74) : fCPUTemp;

108 i‡(
fCPUTemp
 < 
CPUTEMP_SSG
)

109 
fTmp
 -(
fCPUTemp
 > 
CPUTEMP_BASE
) ? (fCPUTemp - CPUTEMP_BASE) : 0;

111 
fD
 = (
fCPUTemp
 > 
CPUTEMP_BASE
) ?

112 (
fCPUTemp
 - 
CPUTEMP_BASE
 + 
SSG_DELTA
) : 0;

113 i‡(
fD
 > 
TMP_MAX_DELTA
) fD = TMP_MAX_DELTA;

114 
fTmp
 -
fD
;

117 
CPUTEMP
 = 
fCPUTemp
;

118 i‡(
fTmp
 < -30 || fTmp > 50) fTmp = 0;

120 
fTemp
 = 
fTmp
;

121 
nUpd©e
 = 0;

123 
nUpd©e
++;

125  
fTemp
;

126 
	}
}

128 
NXCTRL_BOOL


129 
	$ˇnA˘i⁄
 (
NXCTRL_VOID
) {

130 
time•ec
 
tm
;

131 
timeInMûlis
;

132 
	`˛ock_gëtime
(, 
time•ec
 *);

133 
	`˛ock_gëtime
(
_POSIX_CPUTIME
, &
tm
);

134 
timeInMûlis
 = 
tm
.
tv_£c
 * 1000 +Åm.
tv_n£c
/1000000;

135 i‡((
timeInMûlis
 - 
LAST_ACTION_TIME
Ë> 
MIN_ACTION_DURATION
) {

136 
LAST_ACTION_TIME
 = 
timeInMûlis
;

137  
NXCTRL_TRUE
;

139  
NXCTRL_FALSE
;

140 
	}
}

142 
NXCTRL_VOID


143 
	$di•œyInfo
 (
LPNXCTRLAPP
 
pAµ
) {

144 i‡(
DPY_UPDATE_TIME
 < 9)

147 
i
;

148 
rch
[22];

149 
time_t
 
t
 = 
	`time
(
NULL
);

150 
tm
Åm = *
	`loˇ…ime
(&
t
);

151 
fTmp
 = 
	`gëTem≥øtuª
(
pAµ
);

152 
nWidth
 = 0;

153 
	`•rötf
(
rch
,

155 (
tm
.
tm_yór
 + 1900),

156 (
tm
.
tm_m⁄
 + 1) > 9 ? "" : "0",Åm.tm_mon + 1,

157 
tm
.
tm_mday
 > 9 ? "" : "0",Åm.tm_mday,

158 
tm
.
tm_hour
 > 9 ? "" : "0",Åm.tm_hour,

159 
tm
.
tm_mö
 > 9 ? "" : "0",Åm.tm_min,

160 
tm
.
tm_£c
 > 9 ? "" : "0",Åm.tm_sec);

161 
i
 = 
	`°æí
(
rch
); i < 21; i++)

162 
rch
[
i
] = ' ';

163 
rch
[21] = 0;

164 
pAµ
->
	`˛órDi•œy
();

165 
pAµ
->
	`£tCurs‹
(0, 
FONT_HEIGHT
*2);

166 
pAµ
->
	`wrôeSTR
(
rch
);

167 
pAµ
->
	`£tCurs‹
(3*
FONT_WIDTH
+0, 
FONT_HEIGHT
*4);

168 
	`•rötf
(
rch
, "TEMP: %2.0fC / %2.0fC", 
fTmp
, 
CPUTEMP
);

169 
pAµ
->
	`wrôeSTR
(
rch
);

171 
pAµ
->
	`døwLöe
(2*
FONT_WIDTH
, 
FONT_HEIGHT
*5+5, 127-2*FONT_WIDTH, FONT_HEIGHT*5+5, 
NXCTRL_ON
);

172 
pAµ
->
	`døwLöe
(2*
FONT_WIDTH
, 
FONT_HEIGHT
*5+5, 2*FONT_WIDTH, FONT_HEIGHT*5+5+4, 
NXCTRL_ON
);

173 
pAµ
->
	`døwLöe
(127-2*
FONT_WIDTH
, 
FONT_HEIGHT
*5+5, 127-2*FONT_WIDTH, FONT_HEIGHT*5+5+4, 
NXCTRL_ON
);

174 
pAµ
->
	`døwLöe
(2*
FONT_WIDTH
, 
FONT_HEIGHT
*5+5+4, 127-2*FONT_WIDTH, FONT_HEIGHT*5+5+4, 
NXCTRL_ON
);

175 
nWidth
 = ()((0.0+20.0Ë/ (50.0+20.0Ë* (127 - 4*
FONT_WIDTH
));

176 
pAµ
->
	`døwPixñ
(2*
FONT_WIDTH
+
nWidth
, 
FONT_HEIGHT
*5+6, 
NXCTRL_ON
);

177 
nWidth
 = ()((20.0+20.0Ë/ (50.0+20.0Ë* (127 - 4*
FONT_WIDTH
));

178 
pAµ
->
	`døwPixñ
(2*
FONT_WIDTH
+
nWidth
, 
FONT_HEIGHT
*5+6, 
NXCTRL_ON
);

179 
nWidth
 = ()((40.0+20.0Ë/ (50.0+20.0Ë* (127 - 4*
FONT_WIDTH
));

180 
pAµ
->
	`døwPixñ
(2*
FONT_WIDTH
+
nWidth
, 
FONT_HEIGHT
*5+6, 
NXCTRL_ON
);

181 
nWidth
 = ()((
fTmp
+20.0Ë/ (50.0+20.0Ë* (127 - 4*
FONT_WIDTH
));

182 
pAµ
->
	`døwLöe
(2*
FONT_WIDTH
, 
FONT_HEIGHT
*5+7, 2*FONT_WIDTH+
nWidth
, FONT_HEIGHT*5+7, 
NXCTRL_ON
);

183 
pAµ
->
	`døwLöe
(2*
FONT_WIDTH
, 
FONT_HEIGHT
*5+8, 2*FONT_WIDTH+
nWidth
, FONT_HEIGHT*5+8, 
NXCTRL_ON
);

185 
pAµ
->
	`upd©eDi•œy
();

187 
	}
}

189 
NXCTRL_VOID


190 
	$upd©eMíuBuâ⁄Sèã
 (
LPNXCTRLAPP
 
pAµ
) {

191 i‡(
MENU_BUTTON_STATE
 =
NXCTRL_LOW
) {

192 i‡(
pAµ
->
	`digôÆRód
(
MENU_BUTTON_BANK
, 
MENU_BUTTON_PIN
Ë=
NXCTRL_HIGH
) {

193 
MENU_BUTTON_STATE
 = 
NXCTRL_HIGH
;

194 
DPY_IDLE_COUNT
 = 0;

197 i‡(
pAµ
->
	`digôÆRód
(
MENU_BUTTON_BANK
, 
MENU_BUTTON_PIN
Ë=
NXCTRL_LOW
) {

198 
MENU_BUTTON_STATE
 = 
NXCTRL_LOW
;

199 
DPY_IDLE_COUNT
 = 0;

202 
	}
}

204 
NXCTRL_VOID


205 
	$upd©eExecBuâ⁄Sèã
 (
LPNXCTRLAPP
 
pAµ
) {

206 i‡(
EXEC_BUTTON_STATE
 =
NXCTRL_LOW
) {

207 i‡(
pAµ
->
	`digôÆRód
(
EXEC_BUTTON_BANK
, 
EXEC_BUTTON_PIN
Ë=
NXCTRL_HIGH
) {

208 
EXEC_BUTTON_STATE
 = 
NXCTRL_HIGH
;

209 
DPY_IDLE_COUNT
 = 0;

212 i‡(
pAµ
->
	`digôÆRód
(
EXEC_BUTTON_BANK
, 
EXEC_BUTTON_PIN
Ë=
NXCTRL_LOW
) {

213 
EXEC_BUTTON_STATE
 = 
NXCTRL_LOW
;

214 
DPY_IDLE_COUNT
 = 0;

217 
	}
}

220 
	$mkMíuSTR
 (*
rch
, c⁄° *
pszName
, 
nMíu
) {

221 
	`•rötf
(
rch
, "%c %s\n",

222 (
MENU_IDX
 =
nMíu
 ? 
MENU_SEL_CHAR
 : ' '),

223 
pszName
);

224 i‡(
nMíu
 =
MENU_IDX_SYSTEM_MENU
)

225 
rch
[19] = 
MENU_SEL_CHAR
;

226  
rch
;

227 
	}
}

229 
NXCTRL_VOID


230 
	$di•œyMíu
 (
LPNXCTRLAPP
 
pAµ
) {

231 
rch
[21];

233 
pAµ
->
	`˛órDi•œy
();

235 
pAµ
->
	`£tCurs‹
(0, 0);

236 
pAµ
->
	`wrôeSTR
("MAIN");

237 
pAµ
->
	`døwLöe
(25, 6, 127, 6, 
NXCTRL_ON
);

238 
pAµ
->
	`£tCurs‹
(0, 16);

240 
pAµ
->
	`wrôeSTR
(
	`mkMíuSTR
(
rch
, "TC>>", 
MENU_IDX_SYSTEM_MENU
));

241 
pAµ
->
	`wrôeSTR
(
	`mkMíuSTR
(
rch
, "UPDATE TIME", 
MENU_IDX_UPDATE_TIME
));

242 
pAµ
->
	`wrôeSTR
(
	`mkMíuSTR
(
rch
, "EXIT MENU", 
MENU_IDX_EXIT_MENU
));

244 
pAµ
->
	`upd©eDi•œy
();

245 
	}
}

247 
NXCTRL_VOID


248 
	$NXCTRLAPP_öô
 (
LPNXCTRLAPP
 
pAµ
) {

249 
MENU_BUTTON_STATE
 = 
pAµ
->
	`digôÆRód
(
MENU_BUTTON_BANK
, 
MENU_BUTTON_PIN
);

250 
EXEC_BUTTON_STATE
 = 
pAµ
->
	`digôÆRód
(
EXEC_BUTTON_BANK
, 
EXEC_BUTTON_PIN
);

251 
DPY_IDLE_COUNT
 = 0;

252 
MENU_IDX
 = 
MENU_IDX_SYSTEM_MENU
;

253 
IN_MENU
 = 
NXCTRL_FALSE
;

254 
LAST_ACTION_TIME
 = 0;

256 
MENU_BUTTON_STATE
 =
NXCTRL_HIGH
) {

257 
pAµ
->
	`¶ìp
(100, 0);

258 
MENU_BUTTON_STATE
 = 
pAµ
->
	`digôÆRód
(
MENU_BUTTON_BANK
, 
MENU_BUTTON_PIN
);

261 
pAµ
->
	`˛órDi•œy
();

262 
pAµ
->
	`upd©eDi•œy
();

263 
	}
}

265 
NXCTRL_VOID


266 
	$NXCTRLAPP_˛ón
 (
LPNXCTRLAPP
 
pAµ
) {

267 
	}
}

269 
NXCTRL_VOID


270 
	$NXCTRLAPP_run
 (
LPNXCTRLAPP
 
pAµ
) {

271 
	`upd©eMíuBuâ⁄Sèã
(
pAµ
);

272 
	`upd©eExecBuâ⁄Sèã
(
pAµ
);

274 i‡(!
IN_MENU
)

275 
	`di•œyInfo
(
pAµ
);

277 i‡(
MENU_BUTTON_STATE
 !
NXCTRL_HIGH
 && 
EXEC_BUTTON_STATE
 != NXCTRL_HIGH) {

278 
DPY_IDLE_COUNT
++;

279 i‡(
DPY_IDLE_COUNT
 > 
DPY_IDLE_COUNT_MAX
) {

280 
pAµ
->
nCmd
 = 2;

286 i‡(
MENU_BUTTON_STATE
 =
NXCTRL_ON
) {

287 i‡(
IN_MENU
) {

288 i‡(
	`ˇnA˘i⁄
()) {

289 
MENU_IDX
++;

290 i‡(
MENU_IDX
 >
MENU_IDX_COUNT
)

291 
MENU_IDX
 = 
MENU_IDX_SYSTEM_MENU
;

292 
	`di•œyMíu
(
pAµ
);

295 
IN_MENU
 = 
NXCTRL_TRUE
;

296 
	`di•œyMíu
(
pAµ
);

297 
	`ˇnA˘i⁄
();

301 i‡(
EXEC_BUTTON_STATE
 =
NXCTRL_ON
) {

302 i‡(
IN_MENU
) {

303 i‡(
	`ˇnA˘i⁄
()) {

304 
MENU_IDX
) {

305 
MENU_IDX_EXIT_MENU
:

306 
IN_MENU
 = 
NXCTRL_FALSE
;

307 
	`di•œyInfo
(
pAµ
);

309 
MENU_IDX_SYSTEM_MENU
:

310 
pAµ
->
nCmd
 = 1;

312 
MENU_IDX_UPDATE_TIME
:

313 
pAµ
->
	`˛órDi•œy
();

314 
pAµ
->
	`£tCurs‹
(
FONT_WIDTH
*5, 
FONT_HEIGHT
*3);

315 
pAµ
->
	`wrôeSTR
("UPDATING...");

316 
pAµ
->
	`upd©eDi•œy
();

317 
	`sy°em
("/usr/bin/ntpd -gq");

318 
IN_MENU
 = 
NXCTRL_FALSE
;

319 
	`di•œyInfo
(
pAµ
);

327 
	}
}

	@app-peri.c

23 
	~<uni°d.h
>

24 
	~<f˙é.h
>

25 
	~<°dio.h
>

26 
	~<°dlib.h
>

27 
	~<°rög.h
>

28 
	~<sig«l.h
>

29 
	~<sys/time.h
>

30 
	~<time.h
>

31 
	~<î∫o.h
>

32 
	~<¥ussdrv.h
>

33 
	~<¥uss_ötc_m≠pög.h
>

34 
	~<NXCTRL_≠pEx.h
>

35 
	~<NXCTRL_bôs.h
>

36 
	~<°döt.h
>

37 
	~<sys/io˘l.h
>

38 
	~<löux/ty≥s.h
>

39 
	~<löux/•i/•idev.h
>

40 
	~<m©h.h
>

42 
	#FONT_WIDTH
 6

	)

43 
	#FONT_HEIGHT
 8

	)

44 
	#MENU_SEL_CHAR
 (()16)

	)

46 
	#DPY_IDLE_COUNT_MAX
 300

	)

47 
	#MIN_ACTION_DURATION
 200

	)

49 
	#MENU_IDX_COUNT
 9

	)

51 
	#MENU_IDX_SYSTEM_MENU
 0

	)

52 
	#MENU_IDX_UPDATE_MENU
 1

	)

53 
	#MENU_IDX_P8_13_PWM_MENU
 2

	)

54 
	#MENU_IDX_P8_19_PWM_MENU
 3

	)

55 
	#MENU_IDX_AK8448_CFG_MENU
 4

	)

56 
	#MENU_IDX_AK8448_READ_MENU
 5

	)

57 
	#MENU_IDX_TR_A3_MENU
 6

	)

58 
	#MENU_IDX_DCMOTOR_MENU
 7

	)

59 
	#MENU_IDX_EXIT_MENU
 8

	)

61 
	#PRU_NUM
 
PRU0


	)

62 
	#PRU_PATH
 "/u§/bö/˘æ-≠p.bö"

	)

64 
	#HCSR04_BANK
 
NXCTRL_P8


	)

65 
	#HCSR04_MAX_CNT
 1

	)

66 
	#HCSR04_MAX_DIST
 100

	)

68 
	#TRIGGER_PIN
 
NXCTRL_PIN11


	)

69 
	#ECHO_PIN
 
NXCTRL_PIN15


	)

71 
	#PWM1_BANK
 
NXCTRL_P8


	)

72 
	#PWM2_BANK
 
NXCTRL_P8


	)

73 
	#PWM1_PIN
 
NXCTRL_PIN13


	)

74 
	#PWM2_PIN
 
NXCTRL_PIN19


	)

76 
	#SPI_CS0
 
NXCTRL_PIN28


77 
	#SPI_D1
 
NXCTRL_PIN30


78 
	#SPI_D0
 
NXCTRL_PIN29


79 
	#SPI_CLK
 
NXCTRL_PIN31


80 
	#SPI_DEV
 "/dev/•idev2.0"

	)

81 
	#DELAY_USEC
 0

	)

83 
	#AKBANK
 
NXCTRL_P8


	)

84 
	#AKPIN0
 
NXCTRL_PIN45


	)

85 
	#AKPIN1
 
NXCTRL_PIN46


	)

86 
	#AKPIN2
 
NXCTRL_PIN43


	)

87 
	#AKPIN3
 
NXCTRL_PIN44


	)

88 
	#AKPIN4
 
NXCTRL_PIN41


	)

89 
	#AKPIN5
 
NXCTRL_PIN42


	)

90 
	#AKPIN6
 
NXCTRL_PIN39


	)

91 
	#AKPIN7
 
NXCTRL_PIN40


	)

92 
	#AKPIN8
 
NXCTRL_PIN27


	)

93 
	#AKPIN9
 
NXCTRL_PIN29


	)

94 
	#AKCLK
 
NXCTRL_PIN28


	)

95 
	#AKADCK
 
NXCTRL_PIN16


	)

97 
	#DCBANK
 
NXCTRL_P8


	)

98 
	#DCCTRL1
 
NXCTRL_PIN26


	)

99 
	#DCCTRL2
 
NXCTRL_PIN30


	)

100 
	#DCENABLE
 
NXCTRL_PIN19


	)

102 
	#CHART_HEIGHT
 50

	)

103 
	#CHART_WIDTH
 110

	)

105 
NXCTRL_BOOL
 
	gMENU_BUTTON_STATE
 = 
NXCTRL_LOW
;

106 
NXCTRL_BOOL
 
	gEXEC_BUTTON_STATE
 = 
NXCTRL_LOW
;

107 
	gDPY_IDLE_COUNT
 = 0;

108 
	gMENU_IDX
 = 
MENU_IDX_SYSTEM_MENU
;

109 
NXCTRL_BOOL
 
	gIN_MENU
 = 
NXCTRL_FALSE
;

110 
	gLAST_ACTION_TIME
 = 0;

112 
ölöe
 

113 
	$•rötINT16
 (*
rch
, 
v16
) {

114 
INT16
 
v
 = { .
v16
 = v16 };

115 
	`•rötf
(
rch
, "%d%d%d%d %d%d%d%d %d%d%d%d %d%d%d%d",

116 
v
.
bô
.
b0
, v.bô.
b1
, v.bô.
b2
, v.bô.
b3
, v.bô.
b4
, v.bô.
b5
,

117 
v
.
bô
.
b6
, v.bô.
b7
, v.bô.
b8
, v.bô.
b9
, v.bô.
b10
, v.bô.
b11
,

118 
v
.
bô
.
b12
, v.bô.
b13
, v.bô.
b14
, v.bô.
b15
);

119 
	}
}

122 
	$__SPI_ªad
 (
LPNXCTRLAPP
 
pAµ
, 
nFD
) {

123 
nSètus
;

124 
•i_ioc_å™s„r
 
x„r
[2];

125 
rchTXD©a
[2];

126 
rchRXD©a
[2];

127 
rch
[22];

130 
	`mem£t
(
x„r
, 0, (xfer));

132 
rchTXD©a
[0] = 0;

133 
rchTXD©a
[1] = 0;

134 
rchRXD©a
[0] = 0;

135 
rchRXD©a
[1] = 0;

137 
rchTXD©a
[0] |
BIT7
;

139 
x„r
[0].
tx_buf
 = ()
rchTXD©a
;

140 
x„r
[0].
rx_buf
 = ()
rchRXD©a
;

141 
x„r
[0].
Àn
 = 2;

142 
x„r
[0].
dñay_u£cs
 = 
DELAY_USEC
;

144 
nSètus
 = 
	`io˘l
(
nFD
, 
	`SPI_IOC_MESSAGE
(1), 
x„r
);

145 i‡(
nSètus
 < 0) {

146 
	`≥º‹
("SPI_IOC_MESSAGE");

150 
pAµ
->
	`wrôeSTR
("R:");

151 
	`•rötINT16
(
rch
, 
rchRXD©a
[0] | (rchRXData[1] << 8));

152 
pAµ
->
	`wrôeSTR
(
rch
);

155 
	`mem£t
(
x„r
, 0, (xfer));

157 
rchTXD©a
[0] = 0;

158 
rchTXD©a
[1] = 0;

159 
rchRXD©a
[0] = 0;

160 
rchRXD©a
[1] = 0;

162 
rchTXD©a
[0] |
BIT7
;

163 
rchTXD©a
[0] |
BIT0
;

165 
x„r
[0].
tx_buf
 = ()
rchTXD©a
;

166 
x„r
[0].
rx_buf
 = ()
rchRXD©a
;

167 
x„r
[0].
Àn
 = 2;

168 
x„r
[0].
dñay_u£cs
 = 
DELAY_USEC
;

170 
nSètus
 = 
	`io˘l
(
nFD
, 
	`SPI_IOC_MESSAGE
(1), 
x„r
);

171 i‡(
nSètus
 < 0) {

172 
	`≥º‹
("SPI_IOC_MESSAGE");

176 
pAµ
->
	`wrôeSTR
("R:");

177 
	`•rötINT16
(
rch
, 
rchRXD©a
[0] | (rchRXData[1] << 8));

178 
pAµ
->
	`wrôeSTR
(
rch
);

181 
	}
}

184 
	$__SPI_wrôe
 (
LPNXCTRLAPP
 
pAµ
, 
nFD
) {

185 
nSètus
;

186 
•i_ioc_å™s„r
 
x„r
[2];

187 
rchTXD©a
[2];

188 
rchRXD©a
[2];

189 
rch
[22];

192 
	`mem£t
(
x„r
, 0, (xfer));

194 
rchTXD©a
[0] = 0;

195 
rchTXD©a
[1] = 0;

196 
rchRXD©a
[0] = 0;

197 
rchRXD©a
[1] = 0;

199 
rchTXD©a
[1] |
BIT7
;

200 
rchTXD©a
[1] |
BIT5
;

202 
x„r
[0].
tx_buf
 = ()
rchTXD©a
;

203 
x„r
[0].
rx_buf
 = ()
rchRXD©a
;

204 
x„r
[0].
Àn
 = 2;

205 
x„r
[0].
dñay_u£cs
 = 
DELAY_USEC
;

207 
nSètus
 = 
	`io˘l
(
nFD
, 
	`SPI_IOC_MESSAGE
(1), 
x„r
);

208 i‡(
nSètus
 < 0) {

209 
	`≥º‹
("SPI_IOC_MESSAGE");

213 
pAµ
->
	`wrôeSTR
("T:");

214 
	`•rötINT16
(
rch
, 
rchTXD©a
[0] | (rchTXData[1] << 8));

215 
pAµ
->
	`wrôeSTR
(
rch
);

218 
	`mem£t
(
x„r
, 0, (xfer));

220 
rchTXD©a
[0] = 0;

221 
rchTXD©a
[1] = 0;

222 
rchRXD©a
[0] = 0;

223 
rchRXD©a
[1] = 0;

225 
rchTXD©a
[0] |
BIT0
;

226 
rchTXD©a
[1] |
BIT5
;

227 
rchTXD©a
[1] |
BIT3
;

229 
x„r
[0].
tx_buf
 = ()
rchTXD©a
;

230 
x„r
[0].
rx_buf
 = ()
rchRXD©a
;

231 
x„r
[0].
Àn
 = 2;

232 
x„r
[0].
dñay_u£cs
 = 
DELAY_USEC
;

234 
nSètus
 = 
	`io˘l
(
nFD
, 
	`SPI_IOC_MESSAGE
(1), 
x„r
);

235 i‡(
nSètus
 < 0) {

236 
	`≥º‹
("SPI_IOC_MESSAGE");

240 
pAµ
->
	`wrôeSTR
("T:");

241 
	`•rötINT16
(
rch
, 
rchTXD©a
[0] | (rchTXData[1] << 8));

242 
pAµ
->
	`wrôeSTR
(
rch
);

245 
	}
}

248 
	$gëFëchDi°™˚
 (
NXCTRL_VOID
) {

249 
nRë
;

250 
çruss_ötc_öôd©a
 
nINTC
 = 
PRUSS_INTC_INITDATA
;

251 *
pPRUD©aMem
 = 
NULL
;

252 *
≤PRUD©a
 = 
NULL
;

253 
fDi°
 = 0.0f;

256 i‡((
nRë
 = 
	`¥ussdrv_öô
())) {

257 
	`Ârötf
(
°dîr
, "prussdrv_init() failed\n");

262 i‡((
nRë
 = 
	`¥ussdrv_›í
(
PRU_EVTOUT_0
))) {

263 
	`Ârötf
(
°dîr
, "¥ussdrv_›í(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
));

268 i‡((
nRë
 = 
	`¥ussdrv_¥uötc_öô
(&
nINTC
))) {

269 
	`Ârötf
(
°dîr
, "prussdrv_pruintc_init() failed\n");

273 
	`¥ussdrv_m≠_¥umem
(
PRUSS0_PRU0_DATARAM
, &
pPRUD©aMem
);

274 
≤PRUD©a
 = (*)
pPRUD©aMem
;

277 i‡((
nRë
 = 
	`¥ussdrv_exec_¥ogøm
(
PRU_NUM
, 
PRU_PATH
))) {

278 
	`Ârötf
(
°dîr
, "prussdrv_exec_program() failed\n");

282 
	`¥ussdrv_¥u_waô_evít
(
PRU_EVTOUT_0
);

283 i‡(
	`¥ussdrv_¥u_˛ór_evít
(
PRU_EVTOUT_0
, 
PRU0_ARM_INTERRUPT
))

284 
	`Ârötf
(
°dîr
, "prussdrv_pru_clear_event() failed\n");

285 
fDi°
 = ()
≤PRUD©a
[0]/2.0/29.1;

288 i‡(
	`¥ussdrv_¥u_dißbÀ
(
PRU_NUM
))

289 
	`Ârötf
(
°dîr
, "prussdrv_pru_disable() failed\n");

292 i‡(
	`¥ussdrv_exô
())

293 
	`Ârötf
(
°dîr
, "prussdrv_exit() failed\n");

295  
fDi°
;

296 
	}
}

298 
NXCTRL_VOID


299 
	$åa˚A3
 (
LPNXCTRLAPP
 
pAµ
) {

300 
i
 = 0, 
j
;

301 
∫ADC
[
CHART_WIDTH
];

303 
pAµ
->
	`˛órDi•œy
();

304 
pAµ
->
	`£tCurs‹
(0, 0);

305 
pAµ
->
	`wrôeSTR
("Y");

306 
pAµ
->
	`døwLöe
(8, 2, 8, 2+
CHART_HEIGHT
, 
NXCTRL_ON
);

307 
pAµ
->
	`døwLöe
(8, 
CHART_HEIGHT
+2, 8+
CHART_WIDTH
, 2+CHART_HEIGHT, 
NXCTRL_ON
);

308 
pAµ
->
	`£tCurs‹
(8+
CHART_WIDTH
+2, 
CHART_HEIGHT
);

309 
pAµ
->
	`wrôeSTR
("X");

310 
pAµ
->
	`upd©eDi•œy
();

312 
pAµ
->
	`£tCurs‹
(0, 7*
FONT_HEIGHT
+1);

313 
pAµ
->
	`wrôeSTR
(" PRESS MENU TO STOP");

314 
pAµ
->
	`upd©eDi•œy
();

316 
MENU_BUTTON_STATE
 = 
NXCTRL_LOW
;

319 
nADC
 = 
pAµ
->
	`™ÆogRód
(
NXCTRL_A3
);

320 
nADC
 = ()((nADC / 4095.0) * 50);

322 i‡(
i
 >
CHART_WIDTH
) {

323 
i
 = 
CHART_WIDTH
;

325 
MENU_BUTTON_STATE
 = 
pAµ
->
	`digôÆRód
(
MENU_BUTTON_BANK
, 
MENU_BUTTON_PIN
);

326 i‡(
MENU_BUTTON_STATE
 =
NXCTRL_HIGH
) { ; }

328 
j
 = 0; j < 
CHART_WIDTH
 - 1; j++) {

329 i‡(
∫ADC
[
j
])

330 
pAµ
->
	`døwPixñ
(8 + 1 + 
j
, 
CHART_HEIGHT
 - 
∫ADC
[j] + 2, 
NXCTRL_OFF
);

331 
∫ADC
[
j
] =ÑnADC[j + 1];

332 
pAµ
->
	`døwPixñ
(8 + 1 + 
j
, 
CHART_HEIGHT
 - 
∫ADC
[j] + 2, 
NXCTRL_ON
);

334 i‡(
∫ADC
[
j
])

335 
pAµ
->
	`døwPixñ
(8 + 1 + 
j
, 
CHART_HEIGHT
 - 
∫ADC
[j] + 2, 
NXCTRL_OFF
);

336 
∫ADC
[
j
] = 
nADC
;

337 
pAµ
->
	`døwPixñ
(8 + 1 + 
j
, 
CHART_HEIGHT
 - 
∫ADC
[j] + 2, 
NXCTRL_ON
);

338 
pAµ
->
	`upd©eDi•œy
();

340 
∫ADC
[
i
] = 
nADC
;

343 
pAµ
->
	`døwPixñ
(8 + 1 + 
i
, 
CHART_HEIGHT
 - 
∫ADC
[i] + 2, 
NXCTRL_ON
);

344 
pAµ
->
	`upd©eDi•œy
();

347 
pAµ
->
	`¶ìp
(10, 0);

348 
i
++;

351 
pAµ
->
	`£tCurs‹
(0, 7*
FONT_HEIGHT
+1);

352 
pAµ
->
	`wrôeSTR
(" PRESS EXEC TO EXIT");

353 
pAµ
->
	`upd©eDi•œy
();

355 
pAµ
->
	`¶ìp
(1000, 0);

357 
EXEC_BUTTON_STATE
 = 
NXCTRL_LOW
;

358 
EXEC_BUTTON_STATE
 =
NXCTRL_LOW
) {

359 
pAµ
->
	`¶ìp
(100, 0);

360 
EXEC_BUTTON_STATE
 = 
pAµ
->
	`digôÆRód
(
EXEC_BUTTON_BANK
, 
EXEC_BUTTON_PIN
);

362 
	}
}

364 
NXCTRL_VOID


365 
	$dcMŸ‹Te°
 (
LPNXCTRLAPP
 
pAµ
) {

366 
pAµ
->
	`˛órDi•œy
();

367 
pAµ
->
	`£tCurs‹
(0, 3*
FONT_HEIGHT
);

368 
pAµ
->
	`wrôeSTR
(" DC MOTOR DRV");

369 
pAµ
->
	`£tCurs‹
(0, 4*
FONT_HEIGHT
 + 2);

370 
pAµ
->
	`wrôeSTR
(" H-BRIGDE DRV");

371 
pAµ
->
	`upd©eDi•œy
();

373 
pAµ
->
	`digôÆWrôe
(
DCBANK
, 
DCCTRL1
, 
NXCTRL_HIGH
);

374 
pAµ
->
	`digôÆWrôe
(
DCBANK
, 
DCCTRL2
, 
NXCTRL_LOW
);

375 
pAµ
->
	`™ÆogWrôe
(
DCBANK
, 
DCENABLE
, 540);

376 
pAµ
->
	`¶ìp
(3000, 0);

378 
pAµ
->
	`digôÆWrôe
(
DCBANK
, 
DCCTRL1
, 
NXCTRL_LOW
);

379 
pAµ
->
	`digôÆWrôe
(
DCBANK
, 
DCCTRL2
, 
NXCTRL_LOW
);

380 
pAµ
->
	`™ÆogWrôe
(
DCBANK
, 
DCENABLE
, 0);

381 
pAµ
->
	`¶ìp
(1000, 0);

383 
pAµ
->
	`digôÆWrôe
(
DCBANK
, 
DCCTRL1
, 
NXCTRL_LOW
);

384 
pAµ
->
	`digôÆWrôe
(
DCBANK
, 
DCCTRL2
, 
NXCTRL_HIGH
);

385 
pAµ
->
	`™ÆogWrôe
(
DCBANK
, 
DCENABLE
, 540);

386 
pAµ
->
	`¶ìp
(3000, 0);

388 
pAµ
->
	`digôÆWrôe
(
DCBANK
, 
DCCTRL1
, 
NXCTRL_LOW
);

389 
pAµ
->
	`digôÆWrôe
(
DCBANK
, 
DCCTRL2
, 
NXCTRL_LOW
);

390 
pAµ
->
	`™ÆogWrôe
(
DCBANK
, 
DCENABLE
, 0);

391 
pAµ
->
	`¶ìp
(1000, 0);

392 
	}
}

394 
NXCTRL_VOID


395 
	$di•œyPîiInfo
 (
LPNXCTRLAPP
 
pAµ
) {

396 
i
, 
n
 = 
HCSR04_MAX_CNT
;

397 
fs
 = 0;

398 
rch
[22];

400 
pAµ
->
	`˛órDi•œy
();

401 
pAµ
->
	`£tCurs‹
(5*
FONT_WIDTH
, 0);

402 
pAµ
->
	`wrôeSTR
("PERIPHERAL\n");

404 
pAµ
->
	`£tCurs‹
(0, 
FONT_HEIGHT
 + 8);

406 
i
 = 0; i < 
n
; i++) {

407 
fs
 +
	`gëFëchDi°™˚
();

409 
fs
 /
n
;

411 i‡(
fs
 > 
HCSR04_MAX_DIST
)

412 
	`•rötf
(
rch
, "DIST(HCSR04): >%1.1fm\n", (
HCSR04_MAX_DIST
/100.0));

414 
	`•rötf
(
rch
, "DIST(HCSR04): %2.1fcm\n", 
fs
);

415 
pAµ
->
	`wrôeSTR
(
rch
);

417 
	`•rötf
(
rch
, "A0: %04d/4095\n", 
pAµ
->
	`™ÆogRód
(
NXCTRL_A0
));

418 
pAµ
->
	`wrôeSTR
(
rch
);

419 
	`•rötf
(
rch
, "A1: %04d/4095 (T)\n", 
pAµ
->
	`™ÆogRód
(
NXCTRL_A1
));

420 
pAµ
->
	`wrôeSTR
(
rch
);

421 
	`•rötf
(
rch
, "A2: %04d/4095\n", 
pAµ
->
	`™ÆogRód
(
NXCTRL_A2
));

422 
pAµ
->
	`wrôeSTR
(
rch
);

423 
	`•rötf
(
rch
, "A3: %04d/4095\n", 
pAµ
->
	`™ÆogRód
(
NXCTRL_A3
));

424 
pAµ
->
	`wrôeSTR
(
rch
);

426 
pAµ
->
	`upd©eDi•œy
();

427 
	}
}

429 
NXCTRL_VOID


430 
	$runPWM1
 (
LPNXCTRLAPP
 
pAµ
) {

431 
i
, 
j
;

432 
PWM_RES
 = 1000;

433 
PULSE_CNT
 = 5;

434 
PULSE_RES
 = 200;

435 
PULSE_TM
 = 8;

436 
fLogPul£
 = 
	`log
(
PULSE_RES
);

438 
pAµ
->
	`˛órDi•œy
();

439 
pAµ
->
	`£tCurs‹
(0, 3*
FONT_HEIGHT
);

440 
pAµ
->
	`wrôeSTR
(" PWM ON P8:13");

441 
pAµ
->
	`£tCurs‹
(0, 4*
FONT_HEIGHT
 + 2);

442 
pAµ
->
	`wrôeSTR
(" PULSING LED");

443 
pAµ
->
	`upd©eDi•œy
();

445 
j
 = 0; j < 
PULSE_CNT
; j++) {

446 
i
 = 
PULSE_RES
; i > 1; i--) {

447 
logF
 = 
	`log
(
i
Ë/ 
fLogPul£
;

448 
nDC
 = ()((1 - 
logF
Ë* 
PWM_RES
);

449 
pAµ
->
	`™ÆogWrôe
(
PWM1_BANK
, 
PWM1_PIN
, 
nDC
);

450 
pAµ
->
	`¶ìp
(
PULSE_TM
, 0);

452 
i
 = 0; i < 
PULSE_RES
; i++) {

453 
logF
 = 
	`log
(
i
+1Ë/ 
fLogPul£
;

454 
nDC
 = ()((1 - 
logF
Ë* 
PWM_RES
);

455 
pAµ
->
	`™ÆogWrôe
(
PWM1_BANK
, 
PWM1_PIN
, 
nDC
);

456 
pAµ
->
	`¶ìp
(
PULSE_TM
, 0);

459 
pAµ
->
	`™ÆogWrôe
(
PWM1_BANK
, 
PWM1_PIN
, 0);

460 
pAµ
->
	`¶ìp
(100, 0);

461 
	}
}

463 
NXCTRL_VOID


464 
	$runPWM2
 (
LPNXCTRLAPP
 
pAµ
) {

465 
i
;

467 
pAµ
->
	`˛órDi•œy
();

468 
pAµ
->
	`£tCurs‹
(0, 3*
FONT_HEIGHT
);

469 
pAµ
->
	`wrôeSTR
(" PWM ON P8:19");

470 
pAµ
->
	`£tCurs‹
(0, 4*
FONT_HEIGHT
 + 2);

471 
pAµ
->
	`wrôeSTR
(" SERVO CONTROL");

472 
pAµ
->
	`upd©eDi•œy
();

474 
pAµ
->
	`£rvoWrôe
(
PWM2_BANK
, 
PWM2_PIN
, 82);

475 
pAµ
->
	`¶ìp
(800, 0);

476 
pAµ
->
	`£rvoWrôe
(
PWM2_BANK
, 
PWM2_PIN
, 30);

477 
pAµ
->
	`¶ìp
(800, 0);

478 
pAµ
->
	`£rvoWrôe
(
PWM2_BANK
, 
PWM2_PIN
, 150);

479 
pAµ
->
	`¶ìp
(800, 0);

481 
pAµ
->
	`£rvoWrôe
(
PWM2_BANK
, 
PWM2_PIN
, 0);

482 
pAµ
->
	`¶ìp
(500, 0);

484 
i
 = 0; i <= 180; i += 2) {

485 
pAµ
->
	`£rvoWrôe
(
PWM2_BANK
, 
PWM2_PIN
, 
i
);

486 
pAµ
->
	`¶ìp
(20, 0);

489 
pAµ
->
	`£rvoWrôe
(
PWM2_BANK
, 
PWM2_PIN
, 0);

490 
pAµ
->
	`¶ìp
(800, 0);

491 
pAµ
->
	`£rvoWrôe
(
PWM2_BANK
, 
PWM2_PIN
, 180);

492 
pAµ
->
	`¶ìp
(800, 0);

493 
pAµ
->
	`£rvoWrôe
(
PWM2_BANK
, 
PWM2_PIN
, 82);

494 
pAµ
->
	`¶ìp
(800, 0);

497 
pAµ
->
	`£rvoWrôe
(
PWM2_BANK
, 
PWM2_PIN
, 0);

498 
pAµ
->
	`¶ìp
(500, 0);

500 
	}
}

502 
NXCTRL_VOID


503 
	$ªadAK8448Pös
 (
LPNXCTRLAPP
 
pAµ
, 
NXCTRL_BOOL
 
rbRes
[10]) {

504 
rbRes
[0] = 
pAµ
->
	`digôÆRód
(
AKBANK
, 
AKPIN0
);

505 
rbRes
[1] = 
pAµ
->
	`digôÆRód
(
AKBANK
, 
AKPIN1
);

506 
rbRes
[2] = 
pAµ
->
	`digôÆRód
(
AKBANK
, 
AKPIN2
);

507 
rbRes
[3] = 
pAµ
->
	`digôÆRód
(
AKBANK
, 
AKPIN3
);

508 
rbRes
[4] = 
pAµ
->
	`digôÆRód
(
AKBANK
, 
AKPIN4
);

509 
rbRes
[5] = 
pAµ
->
	`digôÆRód
(
AKBANK
, 
AKPIN5
);

510 
rbRes
[6] = 
pAµ
->
	`digôÆRód
(
AKBANK
, 
AKPIN6
);

511 
rbRes
[7] = 
pAµ
->
	`digôÆRód
(
AKBANK
, 
AKPIN7
);

512 
rbRes
[8] = 
pAµ
->
	`digôÆRód
(
AKBANK
, 
AKPIN8
);

513 
rbRes
[9] = 
pAµ
->
	`digôÆRód
(
AKBANK
, 
AKPIN9
);

514 
	}
}

516 
NXCTRL_VOID


517 
	$ªadAK8448
 (
LPNXCTRLAPP
 
pAµ
) {

518 
i
, 
j
;

519 
NXCTRL_BOOL
 
rbRes
[10];

521 
pAµ
->
	`˛órDi•œy
();

523 
j
 = 0; j < 6; j++) {

524 
pAµ
->
	`£tCurs‹
(0, 
j
*
FONT_HEIGHT
);

526 
pAµ
->
	`digôÆWrôe
(
AKBANK
, 
AKADCK
, 
NXCTRL_LOW
);

527 
pAµ
->
	`¶ìp
(50, 0);

528 
pAµ
->
	`digôÆWrôe
(
AKBANK
, 
AKADCK
, 
NXCTRL_HIGH
);

529 
pAµ
->
	`¶ìp
(50, 0);

530 
	`ªadAK8448Pös
(
pAµ
, 
rbRes
);

532 
i
 = 0; i < 10; i++)

533 
pAµ
->
	`wrôeSTR
(
rbRes
[
i
] ? "1" : "0");

534 
pAµ
->
	`wrôeSTR
(" ");

535 
pAµ
->
	`upd©eDi•œy
();

537 
pAµ
->
	`digôÆWrôe
(
AKBANK
, 
AKADCK
, 
NXCTRL_HIGH
);

538 
pAµ
->
	`¶ìp
(50, 0);

539 
pAµ
->
	`digôÆWrôe
(
AKBANK
, 
AKADCK
, 
NXCTRL_LOW
);

540 
pAµ
->
	`¶ìp
(50, 0);

541 
	`ªadAK8448Pös
(
pAµ
, 
rbRes
);

543 
i
 = 0; i < 10; i++)

544 
pAµ
->
	`wrôeSTR
(
rbRes
[
i
] ? "1" : "0");

545 
pAµ
->
	`upd©eDi•œy
();

548 
pAµ
->
	`¶ìp
(2000, 0);

550 
pAµ
->
	`£tCurs‹
(0, 7*
FONT_HEIGHT
+1);

551 
pAµ
->
	`wrôeSTR
(" PRESS EXEC TO EXIT");

552 
pAµ
->
	`upd©eDi•œy
();

554 
EXEC_BUTTON_STATE
 = 
NXCTRL_LOW
;

555 
EXEC_BUTTON_STATE
 =
NXCTRL_LOW
) {

556 
pAµ
->
	`¶ìp
(100, 0);

557 
EXEC_BUTTON_STATE
 = 
pAµ
->
	`digôÆRód
(
EXEC_BUTTON_BANK
, 
EXEC_BUTTON_PIN
);

559 
	}
}

561 
NXCTRL_VOID


562 
	$runAK8448
 (
LPNXCTRLAPP
 
pAµ
) {

563 
uöt8_t
 
nLSB
;

564 
uöt32_t
 
nS≥ed
, 
nSPIMode
;

565 
nFD
 = 
	`›í
(
SPI_DEV
, 
O_RDWR
);

567 
nLSB
 = 0;

568 
	`io˘l
(
nFD
, 
SPI_IOC_WR_LSB_FIRST
, &
nLSB
);

569 
nS≥ed
 = 10000000;

570 
	`io˘l
(
nFD
, 
SPI_IOC_WR_MAX_SPEED_HZ
, &
nS≥ed
);

571 
nSPIMode
 = 
SPI_MODE_3
;

572 
	`io˘l
(
nFD
, 
SPI_IOC_WR_MODE
, &
nSPIMode
);

574 
pAµ
->
	`˛órDi•œy
();

575 
pAµ
->
	`£tCurs‹
(5*
FONT_WIDTH
, 0);

577 
pAµ
->
	`wrôeSTR
("AK8448 CFG\n\n");

579 
	`__SPI_wrôe
(
pAµ
, 
nFD
);

580 
	`__SPI_ªad
(
pAµ
, 
nFD
);

582 
	`˛o£
(
nFD
);

584 
pAµ
->
	`upd©eDi•œy
();

586 
pAµ
->
	`¶ìp
(2000, 0);

588 
pAµ
->
	`£tCurs‹
(0, 7*
FONT_HEIGHT
+1);

589 
pAµ
->
	`wrôeSTR
(" PRESS EXEC TO EXIT");

590 
pAµ
->
	`upd©eDi•œy
();

592 
EXEC_BUTTON_STATE
 = 
NXCTRL_LOW
;

593 
EXEC_BUTTON_STATE
 =
NXCTRL_LOW
) {

594 
pAµ
->
	`¶ìp
(100, 0);

595 
EXEC_BUTTON_STATE
 = 
pAµ
->
	`digôÆRód
(
EXEC_BUTTON_BANK
, 
EXEC_BUTTON_PIN
);

597 
	}
}

599 
NXCTRL_BOOL


600 
	$ˇnA˘i⁄
 (
NXCTRL_VOID
) {

601 
time•ec
 
tm
;

602 
timeInMûlis
;

603 
	`˛ock_gëtime
(, 
time•ec
 *);

604 
	`˛ock_gëtime
(
_POSIX_CPUTIME
, &
tm
);

605 
timeInMûlis
 = 
tm
.
tv_£c
 * 1000 +Åm.
tv_n£c
/1000000;

606 i‡((
timeInMûlis
 - 
LAST_ACTION_TIME
Ë> 
MIN_ACTION_DURATION
) {

607 
LAST_ACTION_TIME
 = 
timeInMûlis
;

608  
NXCTRL_TRUE
;

610  
NXCTRL_FALSE
;

611 
	}
}

613 
NXCTRL_VOID


614 
	$upd©eMíuBuâ⁄Sèã
 (
LPNXCTRLAPP
 
pAµ
) {

615 i‡(
MENU_BUTTON_STATE
 =
NXCTRL_LOW
) {

616 i‡(
pAµ
->
	`digôÆRód
(
MENU_BUTTON_BANK
, 
MENU_BUTTON_PIN
Ë=
NXCTRL_HIGH
) {

617 
MENU_BUTTON_STATE
 = 
NXCTRL_HIGH
;

618 
DPY_IDLE_COUNT
 = 0;

621 i‡(
pAµ
->
	`digôÆRód
(
MENU_BUTTON_BANK
, 
MENU_BUTTON_PIN
Ë=
NXCTRL_LOW
) {

622 
MENU_BUTTON_STATE
 = 
NXCTRL_LOW
;

623 
DPY_IDLE_COUNT
 = 0;

626 
	}
}

628 
NXCTRL_VOID


629 
	$upd©eExecBuâ⁄Sèã
 (
LPNXCTRLAPP
 
pAµ
) {

630 i‡(
EXEC_BUTTON_STATE
 =
NXCTRL_LOW
) {

631 i‡(
pAµ
->
	`digôÆRód
(
EXEC_BUTTON_BANK
, 
EXEC_BUTTON_PIN
Ë=
NXCTRL_HIGH
) {

632 
EXEC_BUTTON_STATE
 = 
NXCTRL_HIGH
;

633 
DPY_IDLE_COUNT
 = 0;

636 i‡(
pAµ
->
	`digôÆRód
(
EXEC_BUTTON_BANK
, 
EXEC_BUTTON_PIN
Ë=
NXCTRL_LOW
) {

637 
EXEC_BUTTON_STATE
 = 
NXCTRL_LOW
;

638 
DPY_IDLE_COUNT
 = 0;

641 
	}
}

644 
	$mkMíuSTR
 (*
rch
, c⁄° *
pszName
, 
nMíu
) {

645 
	`•rötf
(
rch
, "%c %s\n",

646 (
MENU_IDX
 =
nMíu
 ? 
MENU_SEL_CHAR
 : ' '),

647 
pszName
);

648  
rch
;

649 
	}
}

651 
NXCTRL_VOID


652 
	$di•œyMíu
 (
LPNXCTRLAPP
 
pAµ
) {

653 
rch
[21];

655 
pAµ
->
	`˛órDi•œy
();

657 
pAµ
->
	`£tCurs‹
(0, 0);

658 
pAµ
->
	`wrôeSTR
("PERIPHERAL");

659 
pAµ
->
	`døwLöe
(61, 6, 127, 6, 
NXCTRL_ON
);

660 
pAµ
->
	`£tCurs‹
(0, 16);

662 i‡(
MENU_IDX
 < 5)

663 
pAµ
->
	`wrôeSTR
(
	`mkMíuSTR
(
rch
, "TC>>", 
MENU_IDX_SYSTEM_MENU
));

664 i‡(
MENU_IDX
 < 6)

665 
pAµ
->
	`wrôeSTR
(
	`mkMíuSTR
(
rch
, "UPDATE INFO", 
MENU_IDX_UPDATE_MENU
));

666 i‡(
MENU_IDX
 < 7)

667 
pAµ
->
	`wrôeSTR
(
	`mkMíuSTR
(
rch
, "P8:13 PWM(LED)", 
MENU_IDX_P8_13_PWM_MENU
));

668 i‡(
MENU_IDX
 < 8)

669 
pAµ
->
	`wrôeSTR
(
	`mkMíuSTR
(
rch
, "P8:19 PWM(SERVO)", 
MENU_IDX_P8_19_PWM_MENU
));

670 
pAµ
->
	`wrôeSTR
(
	`mkMíuSTR
(
rch
, "SPIDEV:2(AK8448)", 
MENU_IDX_AK8448_CFG_MENU
));

671 i‡(
MENU_IDX
 >= 5)

672 
pAµ
->
	`wrôeSTR
(
	`mkMíuSTR
(
rch
, "AK8448 TEST", 
MENU_IDX_AK8448_READ_MENU
));

673 i‡(
MENU_IDX
 >= 6)

674 
pAµ
->
	`wrôeSTR
(
	`mkMíuSTR
(
rch
, "TRACE A3", 
MENU_IDX_TR_A3_MENU
));

675 i‡(
MENU_IDX
 >= 7)

676 
pAµ
->
	`wrôeSTR
(
	`mkMíuSTR
(
rch
, "DC MOTOR DRV", 
MENU_IDX_DCMOTOR_MENU
));

677 i‡(
MENU_IDX
 >= 8)

678 
pAµ
->
	`wrôeSTR
(
	`mkMíuSTR
(
rch
, "EXIT MENU", 
MENU_IDX_EXIT_MENU
));

680 
pAµ
->
	`upd©eDi•œy
();

681 
	}
}

683 
NXCTRL_VOID


684 
	$NXCTRLAPP_öô
 (
LPNXCTRLAPP
 
pAµ
) {

685 
pAµ
->
	`pöMux
(
PWM1_BANK
, 
PWM1_PIN
, 
NXCTRL_MODE4
, 
NXCTRL_PULLDN
, 
NXCTRL_LOW
);

686 
pAµ
->
	`pöMux
(
PWM2_BANK
, 
PWM2_PIN
, 
NXCTRL_MODE4
, 
NXCTRL_PULLDN
, 
NXCTRL_LOW
);

688 
pAµ
->
	`pöMux
(
NXCTRL_P9
, 
SPI_CS0
, 
NXCTRL_MODE3
, 
NXCTRL_PULLDN
, 
NXCTRL_LOW
);

689 
pAµ
->
	`pöMux
(
NXCTRL_P9
, 
SPI_D1
, 
NXCTRL_MODE3
, 
NXCTRL_PULLDN
, 
NXCTRL_LOW
);

690 
pAµ
->
	`pöMux
(
NXCTRL_P9
, 
SPI_D0
, 
NXCTRL_MODE3
, 
NXCTRL_PULLUP
, 
NXCTRL_HIGH
);

691 
pAµ
->
	`pöMux
(
NXCTRL_P9
, 
SPI_CLK
, 
NXCTRL_MODE3
, 
NXCTRL_PULLUP
, 
NXCTRL_HIGH
);

693 
pAµ
->
	`pöMux
(
AKBANK
, 
AKPIN0
, 
NXCTRL_MODE7
, 
NXCTRL_PULLDN
, 
NXCTRL_LOW
);

694 
pAµ
->
	`pöMux
(
AKBANK
, 
AKPIN1
, 
NXCTRL_MODE7
, 
NXCTRL_PULLDN
, 
NXCTRL_LOW
);

695 
pAµ
->
	`pöMux
(
AKBANK
, 
AKPIN2
, 
NXCTRL_MODE7
, 
NXCTRL_PULLDN
, 
NXCTRL_LOW
);

696 
pAµ
->
	`pöMux
(
AKBANK
, 
AKPIN3
, 
NXCTRL_MODE7
, 
NXCTRL_PULLDN
, 
NXCTRL_LOW
);

697 
pAµ
->
	`pöMux
(
AKBANK
, 
AKPIN4
, 
NXCTRL_MODE7
, 
NXCTRL_PULLDN
, 
NXCTRL_LOW
);

698 
pAµ
->
	`pöMux
(
AKBANK
, 
AKPIN5
, 
NXCTRL_MODE7
, 
NXCTRL_PULLDN
, 
NXCTRL_LOW
);

699 
pAµ
->
	`pöMux
(
AKBANK
, 
AKPIN6
, 
NXCTRL_MODE7
, 
NXCTRL_PULLDN
, 
NXCTRL_LOW
);

700 
pAµ
->
	`pöMux
(
AKBANK
, 
AKPIN7
, 
NXCTRL_MODE7
, 
NXCTRL_PULLDN
, 
NXCTRL_LOW
);

701 
pAµ
->
	`pöMux
(
AKBANK
, 
AKPIN8
, 
NXCTRL_MODE7
, 
NXCTRL_PULLDN
, 
NXCTRL_LOW
);

702 
pAµ
->
	`pöMux
(
AKBANK
, 
AKPIN9
, 
NXCTRL_MODE7
, 
NXCTRL_PULLDN
, 
NXCTRL_LOW
);

703 
pAµ
->
	`pöMux
(
AKBANK
, 
AKCLK
, 
NXCTRL_MODE7
, 
NXCTRL_PULLDN
, 
NXCTRL_LOW
);

704 
pAµ
->
	`pöMux
(
AKBANK
, 
AKADCK
, 
NXCTRL_MODE7
, 
NXCTRL_PULLDN
, 
NXCTRL_LOW
);

706 
pAµ
->
	`pöMode
(
AKBANK
, 
AKPIN0
, 
NXCTRL_INPUT
);

707 
pAµ
->
	`pöMode
(
AKBANK
, 
AKPIN1
, 
NXCTRL_INPUT
);

708 
pAµ
->
	`pöMode
(
AKBANK
, 
AKPIN2
, 
NXCTRL_INPUT
);

709 
pAµ
->
	`pöMode
(
AKBANK
, 
AKPIN3
, 
NXCTRL_INPUT
);

710 
pAµ
->
	`pöMode
(
AKBANK
, 
AKPIN4
, 
NXCTRL_INPUT
);

711 
pAµ
->
	`pöMode
(
AKBANK
, 
AKPIN5
, 
NXCTRL_INPUT
);

712 
pAµ
->
	`pöMode
(
AKBANK
, 
AKPIN6
, 
NXCTRL_INPUT
);

713 
pAµ
->
	`pöMode
(
AKBANK
, 
AKPIN7
, 
NXCTRL_INPUT
);

714 
pAµ
->
	`pöMode
(
AKBANK
, 
AKPIN8
, 
NXCTRL_INPUT
);

715 
pAµ
->
	`pöMode
(
AKBANK
, 
AKPIN9
, 
NXCTRL_INPUT
);

716 
pAµ
->
	`pöMode
(
AKBANK
, 
AKCLK
, 
NXCTRL_OUTPUT
);

717 
pAµ
->
	`pöMode
(
AKBANK
, 
AKADCK
, 
NXCTRL_OUTPUT
);

719 
pAµ
->
	`pöMux
(
DCBANK
, 
DCCTRL1
, 
NXCTRL_MODE7
, 
NXCTRL_PULLDN
, 
NXCTRL_LOW
);

720 
pAµ
->
	`pöMux
(
DCBANK
, 
DCCTRL1
, 
NXCTRL_MODE7
, 
NXCTRL_PULLDN
, 
NXCTRL_LOW
);

723 
pAµ
->
	`pöMode
(
DCBANK
, 
DCCTRL1
, 
NXCTRL_OUTPUT
);

724 
pAµ
->
	`pöMode
(
DCBANK
, 
DCCTRL2
, 
NXCTRL_OUTPUT
);

726 
MENU_BUTTON_STATE
 = 
pAµ
->
	`digôÆRód
(
MENU_BUTTON_BANK
, 
MENU_BUTTON_PIN
);

727 
EXEC_BUTTON_STATE
 = 
pAµ
->
	`digôÆRód
(
EXEC_BUTTON_BANK
, 
EXEC_BUTTON_PIN
);

728 
DPY_IDLE_COUNT
 = 0;

729 
MENU_IDX
 = 
MENU_IDX_SYSTEM_MENU
;

730 
IN_MENU
 = 
NXCTRL_FALSE
;

731 
LAST_ACTION_TIME
 = 0;

733 
MENU_BUTTON_STATE
 =
NXCTRL_HIGH
) {

734 
pAµ
->
	`¶ìp
(100, 0);

735 
MENU_BUTTON_STATE
 = 
pAµ
->
	`digôÆRód
(
MENU_BUTTON_BANK
, 
MENU_BUTTON_PIN
);

738 
	`di•œyPîiInfo
(
pAµ
);

739 
	}
}

741 
NXCTRL_VOID


742 
	$NXCTRLAPP_˛ón
 (
LPNXCTRLAPP
 
pAµ
) {

743 
	}
}

745 
NXCTRL_VOID


746 
	$NXCTRLAPP_run
 (
LPNXCTRLAPP
 
pAµ
) {

747 
	`upd©eMíuBuâ⁄Sèã
(
pAµ
);

748 
	`upd©eExecBuâ⁄Sèã
(
pAµ
);

750 i‡(
MENU_BUTTON_STATE
 !
NXCTRL_HIGH
 && 
EXEC_BUTTON_STATE
 != NXCTRL_HIGH) {

751 
DPY_IDLE_COUNT
++;

752 i‡(
DPY_IDLE_COUNT
 > 
DPY_IDLE_COUNT_MAX
) {

753 
pAµ
->
nCmd
 = 2;

759 i‡(
MENU_BUTTON_STATE
 =
NXCTRL_ON
) {

760 i‡(
IN_MENU
) {

761 i‡(
	`ˇnA˘i⁄
()) {

762 
MENU_IDX
++;

763 i‡(
MENU_IDX
 >
MENU_IDX_COUNT
)

764 
MENU_IDX
 = 
MENU_IDX_SYSTEM_MENU
;

765 
	`di•œyMíu
(
pAµ
);

768 
IN_MENU
 = 
NXCTRL_TRUE
;

769 
	`di•œyMíu
(
pAµ
);

770 
	`ˇnA˘i⁄
();

774 i‡(
EXEC_BUTTON_STATE
 =
NXCTRL_ON
) {

775 i‡(
IN_MENU
) {

776 i‡(
	`ˇnA˘i⁄
()) {

777 
MENU_IDX
) {

778 
MENU_IDX_EXIT_MENU
:

779 
IN_MENU
 = 
NXCTRL_FALSE
;

780 
	`di•œyPîiInfo
(
pAµ
);

782 
MENU_IDX_SYSTEM_MENU
:

783 
pAµ
->
nCmd
 = 1;

785 
MENU_IDX_UPDATE_MENU
:

786 
IN_MENU
 = 
NXCTRL_FALSE
;

787 
	`di•œyPîiInfo
(
pAµ
);

789 
MENU_IDX_P8_13_PWM_MENU
:

790 
IN_MENU
 = 
NXCTRL_FALSE
;

791 
	`runPWM1
(
pAµ
);

792 
	`di•œyPîiInfo
(
pAµ
);

794 
MENU_IDX_P8_19_PWM_MENU
:

795 
IN_MENU
 = 
NXCTRL_FALSE
;

796 
	`runPWM2
(
pAµ
);

797 
	`di•œyPîiInfo
(
pAµ
);

799 
MENU_IDX_AK8448_CFG_MENU
:

800 
IN_MENU
 = 
NXCTRL_FALSE
;

801 
	`runAK8448
(
pAµ
);

802 
	`di•œyPîiInfo
(
pAµ
);

804 
MENU_IDX_AK8448_READ_MENU
:

805 
IN_MENU
 = 
NXCTRL_FALSE
;

806 
	`ªadAK8448
(
pAµ
);

807 
	`di•œyPîiInfo
(
pAµ
);

809 
MENU_IDX_TR_A3_MENU
:

810 
IN_MENU
 = 
NXCTRL_FALSE
;

811 
	`åa˚A3
(
pAµ
);

812 
	`di•œyPîiInfo
(
pAµ
);

814 
MENU_IDX_DCMOTOR_MENU
:

815 
IN_MENU
 = 
NXCTRL_FALSE
;

816 
	`dcMŸ‹Te°
(
pAµ
);

817 
	`di•œyPîiInfo
(
pAµ
);

825 
	}
}

	@app-spark.c

23 
	~<uni°d.h
>

24 
	~<f˙é.h
>

25 
	~<°dio.h
>

26 
	~<°dlib.h
>

27 
	~<°rög.h
>

28 
	~<sig«l.h
>

29 
	~<sys/time.h
>

30 
	~<time.h
>

31 
	~<î∫o.h
>

32 
	~<¥ussdrv.h
>

33 
	~<¥uss_ötc_m≠pög.h
>

34 
	~<NXCTRL_≠pEx.h
>

36 
	#FONT_WIDTH
 6

	)

37 
	#FONT_HEIGHT
 8

	)

38 
	#MENU_SEL_CHAR
 (()16)

	)

40 
	#DPY_IDLE_COUNT_MAX
 300

	)

41 
	#MIN_ACTION_DURATION
 200

	)

43 
	#MENU_IDX_COUNT
 5

	)

45 
	#MENU_IDX_SYSTEM_MENU
 0

	)

46 
	#MENU_IDX_UPDATE_MENU
 1

	)

47 
	#MENU_IDX_FLASH_MENU
 2

	)

48 
	#MENU_IDX_D7_ONOFF_MENU
 3

	)

49 
	#MENU_IDX_EXIT_MENU
 4

	)

51 
NXCTRL_BOOL
 
	gMENU_BUTTON_STATE
 = 
NXCTRL_LOW
;

52 
NXCTRL_BOOL
 
	gEXEC_BUTTON_STATE
 = 
NXCTRL_LOW
;

53 
	gDPY_IDLE_COUNT
 = 0;

54 
	gMENU_IDX
 = 
MENU_IDX_SYSTEM_MENU
;

55 
NXCTRL_BOOL
 
	gIN_MENU
 = 
NXCTRL_FALSE
;

56 
	gLAST_ACTION_TIME
 = 0;

57 
NXCTRL_BOOL
 
	gTOGGLE
 = 
NXCTRL_OFF
;

58 
	gSPARK_STAT
[32];

60 
NXCTRL_VOID


61 
	$upd©eC‹eSètus
 () {

62 
rchName
[22], 
rchSètus
[16], 
rchLöe
[1024], 
rchDummy
[80];

63 
FILE
 *
pFûe
;

65 
	`sy°em
("sudo /usr/bin/spark-list");

67 
rchLöe
[0] = 0;

68 
pFûe
 = 
	`f›í
("/tmp/sparkcoreinfo.txt", "r");

69 i‡(
pFûe
) {

70 
	`fgës
(
rchLöe
, 1023, 
pFûe
);

71 
	`f˛o£
(
pFûe
);

72 
	`u∆ök
("/tmp/sparkcoreinfo.txt");

76 i‡(
	`°æí
(
rchLöe
) != 0) {

77 
	`ssˇnf
(
rchLöe
, "%†%†%†%s", 
rchName
, 
rchDummy
,ÑchDummy, 
rchSètus
);

78 
	`•rötf
(
rchDummy
, "%s: %s", 
rchName
, 
rchSètus
);

79 
	`•rötf
(
SPARK_STAT
, "%s: %s", 
rchName
, 
rchSètus
);

81 
SPARK_STAT
[0] = 0;

83 
	}
}

85 
NXCTRL_VOID


86 
	$execuãUpd©e
 (
LPNXCTRLAPP
 
pAµ
) {

87 
pAµ
->
	`˛órDi•œy
();

88 
pAµ
->
	`£tCurs‹
(4*
FONT_WIDTH
, 0);

89 
pAµ
->
	`wrôeSTR
("SPARK CORE\n");

91 
pAµ
->
	`£tCurs‹
(0, 
FONT_HEIGHT
*3);

92 
pAµ
->
	`wrôeSTR
(" SEARCHING...");

93 
pAµ
->
	`upd©eDi•œy
();

94 
	`upd©eC‹eSètus
();

95 
	}
}

97 
NXCTRL_VOID


98 
	$di•œyC‹eInfo
 (
LPNXCTRLAPP
 
pAµ
) {

99 
pAµ
->
	`˛órDi•œy
();

100 
pAµ
->
	`£tCurs‹
(4*
FONT_WIDTH
, 0);

101 
pAµ
->
	`wrôeSTR
("SPARK CORE\n");

103 i‡(
	`°æí
(
SPARK_STAT
) == 0) {

104 
pAµ
->
	`£tCurs‹
(0, 
FONT_HEIGHT
*3);

105 
pAµ
->
	`wrôeSTR
(" NOT FOUND");

107 
pAµ
->
	`£tCurs‹
(3*
FONT_WIDTH
, 
FONT_HEIGHT
*3);

108 
pAµ
->
	`wrôeSTR
(
SPARK_STAT
);

111 
pAµ
->
	`upd©eDi•œy
();

112 
	}
}

114 
NXCTRL_BOOL


115 
	$ˇnA˘i⁄
 (
NXCTRL_VOID
) {

116 
time•ec
 
tm
;

117 
timeInMûlis
;

118 
	`˛ock_gëtime
(, 
time•ec
 *);

119 
	`˛ock_gëtime
(
_POSIX_CPUTIME
, &
tm
);

120 
timeInMûlis
 = 
tm
.
tv_£c
 * 1000 +Åm.
tv_n£c
/1000000;

121 i‡((
timeInMûlis
 - 
LAST_ACTION_TIME
Ë> 
MIN_ACTION_DURATION
) {

122 
LAST_ACTION_TIME
 = 
timeInMûlis
;

123  
NXCTRL_TRUE
;

125  
NXCTRL_FALSE
;

126 
	}
}

128 
NXCTRL_VOID


129 
	$upd©eMíuBuâ⁄Sèã
 (
LPNXCTRLAPP
 
pAµ
) {

130 i‡(
MENU_BUTTON_STATE
 =
NXCTRL_LOW
) {

131 i‡(
pAµ
->
	`digôÆRód
(
MENU_BUTTON_BANK
, 
MENU_BUTTON_PIN
Ë=
NXCTRL_HIGH
) {

132 
MENU_BUTTON_STATE
 = 
NXCTRL_HIGH
;

133 
DPY_IDLE_COUNT
 = 0;

136 i‡(
pAµ
->
	`digôÆRód
(
MENU_BUTTON_BANK
, 
MENU_BUTTON_PIN
Ë=
NXCTRL_LOW
) {

137 
MENU_BUTTON_STATE
 = 
NXCTRL_LOW
;

138 
DPY_IDLE_COUNT
 = 0;

141 
	}
}

143 
NXCTRL_VOID


144 
	$upd©eExecBuâ⁄Sèã
 (
LPNXCTRLAPP
 
pAµ
) {

145 i‡(
EXEC_BUTTON_STATE
 =
NXCTRL_LOW
) {

146 i‡(
pAµ
->
	`digôÆRód
(
EXEC_BUTTON_BANK
, 
EXEC_BUTTON_PIN
Ë=
NXCTRL_HIGH
) {

147 
EXEC_BUTTON_STATE
 = 
NXCTRL_HIGH
;

148 
DPY_IDLE_COUNT
 = 0;

151 i‡(
pAµ
->
	`digôÆRód
(
EXEC_BUTTON_BANK
, 
EXEC_BUTTON_PIN
Ë=
NXCTRL_LOW
) {

152 
EXEC_BUTTON_STATE
 = 
NXCTRL_LOW
;

153 
DPY_IDLE_COUNT
 = 0;

156 
	}
}

159 
	$mkMíuSTR
 (*
rch
, c⁄° *
pszName
, 
nMíu
) {

160 
	`•rötf
(
rch
, "%c %s\n",

161 (
MENU_IDX
 =
nMíu
 ? 
MENU_SEL_CHAR
 : ' '),

162 
pszName
);

163  
rch
;

164 
	}
}

166 
NXCTRL_VOID


167 
	$di•œyMíu
 (
LPNXCTRLAPP
 
pAµ
) {

168 
rch
[21];

170 
pAµ
->
	`˛órDi•œy
();

172 
pAµ
->
	`£tCurs‹
(0, 0);

173 
pAµ
->
	`wrôeSTR
("SPARK CORE");

174 
pAµ
->
	`døwLöe
(61, 6, 127, 6, 
NXCTRL_ON
);

175 
pAµ
->
	`£tCurs‹
(0, 16);

177 
pAµ
->
	`wrôeSTR
(
	`mkMíuSTR
(
rch
, "TC>>", 
MENU_IDX_SYSTEM_MENU
));

178 
pAµ
->
	`wrôeSTR
(
	`mkMíuSTR
(
rch
, "UPDATE STAT", 
MENU_IDX_UPDATE_MENU
));

179 
pAµ
->
	`wrôeSTR
(
	`mkMíuSTR
(
rch
, "FLASH TINKER", 
MENU_IDX_FLASH_MENU
));

180 i‡(
TOGGLE
)

181 
pAµ
->
	`wrôeSTR
(
	`mkMíuSTR
(
rch
, "D7 OFF", 
MENU_IDX_D7_ONOFF_MENU
));

183 
pAµ
->
	`wrôeSTR
(
	`mkMíuSTR
(
rch
, "D7 ON", 
MENU_IDX_D7_ONOFF_MENU
));

184 
pAµ
->
	`wrôeSTR
(
	`mkMíuSTR
(
rch
, "EXIT MENU", 
MENU_IDX_EXIT_MENU
));

186 
pAµ
->
	`upd©eDi•œy
();

187 
	}
}

189 
NXCTRL_VOID


190 
	$NXCTRLAPP_öô
 (
LPNXCTRLAPP
 
pAµ
) {

191 
MENU_BUTTON_STATE
 = 
pAµ
->
	`digôÆRód
(
MENU_BUTTON_BANK
, 
MENU_BUTTON_PIN
);

192 
EXEC_BUTTON_STATE
 = 
pAµ
->
	`digôÆRód
(
EXEC_BUTTON_BANK
, 
EXEC_BUTTON_PIN
);

193 
DPY_IDLE_COUNT
 = 0;

194 
MENU_IDX
 = 
MENU_IDX_SYSTEM_MENU
;

195 
IN_MENU
 = 
NXCTRL_FALSE
;

196 
LAST_ACTION_TIME
 = 0;

198 
MENU_BUTTON_STATE
 =
NXCTRL_HIGH
) {

199 
pAµ
->
	`¶ìp
(100, 0);

200 
MENU_BUTTON_STATE
 = 
pAµ
->
	`digôÆRód
(
MENU_BUTTON_BANK
, 
MENU_BUTTON_PIN
);

203 
	`execuãUpd©e
(
pAµ
);

204 
	`di•œyC‹eInfo
(
pAµ
);

205 
	}
}

207 
NXCTRL_VOID


208 
	$NXCTRLAPP_˛ón
 (
LPNXCTRLAPP
 
pAµ
) {

209 
	}
}

211 
NXCTRL_VOID


212 
	$NXCTRLAPP_run
 (
LPNXCTRLAPP
 
pAµ
) {

213 
	`upd©eMíuBuâ⁄Sèã
(
pAµ
);

214 
	`upd©eExecBuâ⁄Sèã
(
pAµ
);

216 i‡(
MENU_BUTTON_STATE
 !
NXCTRL_HIGH
 && 
EXEC_BUTTON_STATE
 != NXCTRL_HIGH) {

217 
DPY_IDLE_COUNT
++;

218 i‡(
DPY_IDLE_COUNT
 > 
DPY_IDLE_COUNT_MAX
) {

219 
pAµ
->
nCmd
 = 2;

225 i‡(
MENU_BUTTON_STATE
 =
NXCTRL_ON
) {

226 i‡(
IN_MENU
) {

227 i‡(
	`ˇnA˘i⁄
()) {

228 
MENU_IDX
++;

229 i‡(
MENU_IDX
 >
MENU_IDX_COUNT
)

230 
MENU_IDX
 = 
MENU_IDX_SYSTEM_MENU
;

231 
	`di•œyMíu
(
pAµ
);

234 
IN_MENU
 = 
NXCTRL_TRUE
;

235 
	`di•œyMíu
(
pAµ
);

236 
	`ˇnA˘i⁄
();

240 i‡(
EXEC_BUTTON_STATE
 =
NXCTRL_ON
) {

241 i‡(
IN_MENU
) {

242 i‡(
	`ˇnA˘i⁄
()) {

243 
MENU_IDX
) {

244 
MENU_IDX_EXIT_MENU
:

245 
IN_MENU
 = 
NXCTRL_FALSE
;

246 
	`di•œyC‹eInfo
(
pAµ
);

248 
MENU_IDX_SYSTEM_MENU
:

249 
pAµ
->
nCmd
 = 1;

251 
MENU_IDX_UPDATE_MENU
:

252 
IN_MENU
 = 
NXCTRL_FALSE
;

253 
	`execuãUpd©e
(
pAµ
);

254 
	`di•œyC‹eInfo
(
pAµ
);

256 
MENU_IDX_FLASH_MENU
:

257 
pAµ
->
	`˛órDi•œy
();

258 
pAµ
->
	`£tCurs‹
(0, 3*
FONT_HEIGHT
);

259 
pAµ
->
	`wrôeSTR
(" FLASHING...");

260 
pAµ
->
	`upd©eDi•œy
();

261 
	`sy°em
("sudo /usr/bin/spark-flash-tinker");

262 
IN_MENU
 = 
NXCTRL_FALSE
;

263 
	`di•œyC‹eInfo
(
pAµ
);

265 
MENU_IDX_D7_ONOFF_MENU
:

266 
pAµ
->
	`˛órDi•œy
();

267 
pAµ
->
	`£tCurs‹
(0, 3*
FONT_HEIGHT
);

268 i‡(
TOGGLE
)

269 
pAµ
->
	`wrôeSTR
(" OFF D7...");

271 
pAµ
->
	`wrôeSTR
(" ON D7...");

272 
pAµ
->
	`upd©eDi•œy
();

273 i‡(
TOGGLE
)

274 
	`sy°em
("sudo /usr/bin/spark-off-d7");

276 
	`sy°em
("sudo /usr/bin/spark-on-d7");

277 
TOGGLE
 = TOGGLE ? 
NXCTRL_OFF
 : 
NXCTRL_ON
;

278 
IN_MENU
 = 
NXCTRL_FALSE
;

279 
	`di•œyC‹eInfo
(
pAµ
);

287 
	}
}

	@app-sysinfo.c

23 
	~<uni°d.h
>

24 
	~<f˙é.h
>

25 
	~<°dio.h
>

26 
	~<°dlib.h
>

27 
	~<°rög.h
>

28 
	~<sig«l.h
>

29 
	~<sys/time.h
>

30 
	~<time.h
>

31 
	~<sys/sysöfo.h
>

32 
	~<sys/°©vfs.h
>

33 
	~<NXCTRL_≠pEx.h
>

35 
	#FONT_WIDTH
 6

	)

36 
	#FONT_HEIGHT
 8

	)

37 
	#MENU_SEL_CHAR
 (()16)

	)

39 
	#DPY_IDLE_COUNT_MAX
 300

	)

40 
	#MIN_ACTION_DURATION
 200

	)

42 
	#MENU_IDX_COUNT
 7

	)

44 
	#MENU_IDX_SYSTEM_MENU
 0

	)

45 
	#MENU_IDX_UPDATE_MENU
 1

	)

46 
	#MENU_IDX_BKHOME_MENU
 2

	)

47 
	#MENU_IDX_BKCASTLE_MENU
 3

	)

48 
	#MENU_IDX_RUN_ORION
 4

	)

49 
	#MENU_IDX_RUN_TTY
 5

	)

50 
	#MENU_IDX_RUN_MLREPL
 6

	)

51 
	#MENU_IDX_EXIT_MENU
 7

	)

53 
NXCTRL_BOOL
 
	gMENU_BUTTON_STATE
 = 
NXCTRL_LOW
;

54 
NXCTRL_BOOL
 
	gEXEC_BUTTON_STATE
 = 
NXCTRL_LOW
;

55 
	gDPY_IDLE_COUNT
 = 0;

56 
	gMENU_IDX
 = 
MENU_IDX_SYSTEM_MENU
;

57 
NXCTRL_BOOL
 
	gIN_MENU
 = 
NXCTRL_FALSE
;

58 
	gLAST_ACTION_TIME
 = 0;

61 
	$gëCPUTemp
 (
NXCTRL_VOID
) {

62 c⁄° *
psz
 = "/sys/class/hwmon/hwmon0/device/temp1_input";

64 
nFD
 = 
	`›í
(
psz
, 
O_RDONLY
);

65 i‡(
nFD
 < 0) {

66 
	`sy°em
("rmmodám335x_bandgap");

67 
	`sy°em
("modprobeám335x_bandgap");

70 
rch
[8];

71 
n
 = 
	`ªad
(
nFD
, 
rch
, 7);

72 
rch
[
n
] = 0;

73 
n
 = 
	`©oi
(
rch
);

74 
	`˛o£
(
nFD
);

75 i‡(
n
 > 120000) {

76 
	`sy°em
("rmmodám335x_bandgap");

77 
	`sy°em
("modprobeám335x_bandgap");

80  
n
;

83 
	}
}

85 
NXCTRL_VOID


86 
	$di•œySysInfo
 (
LPNXCTRLAPP
 
pAµ
) {

87 
sysöfo
 
si
;

88 
°©vfs
 
°vfs
;

89 
d
, 
h
, 
m
;

90 
t
;

91 
rch
[22];

93 
	`°©vfs
("/", &
°vfs
);

94 
	`sysöfo
(&
si
);

95 
t
 = 
	`gëCPUTemp
() / 1000;

96 
d
 = 
si
.
u±ime
/(3600*24);

97 
h
 = (
si
.
u±ime
 - (
d
*3600*24))/3600;

98 
m
 = (
si
.
u±ime
 - (
d
*3600*24Ë- (
h
*3600))/60;

99 
pAµ
->
	`˛órDi•œy
();

100 
pAµ
->
	`£tCurs‹
(5*
FONT_WIDTH
, 0);

101 
pAµ
->
	`wrôeSTR
("SYSTEM INFO\n");

103 
pAµ
->
	`£tCurs‹
(0, 
FONT_HEIGHT
 + 8);

105 
	`•rötf
(
rch
, " LDA: %2.1f %2.1f %2.1f\n",

106 
si
.
lﬂds
[0]/65536.0,

107 
si
.
lﬂds
[1]/65536.0,

108 
si
.
lﬂds
[2]/65536.0);

109 
pAµ
->
	`wrôeSTR
(
rch
);

111 
	`•rötf
(
rch
, " RAM: %03d %03d %03d\n",

112 ()(
si
.
tŸÆøm
/1024/1024),

113 ()(
si
.
buf„ºam
/1024/1024),

114 ()(
si
.
‰ìøm
/1024/1024));

115 
pAµ
->
	`wrôeSTR
(
rch
);

117 
	`•rötf
(
rch
, " DSK: %1.1f %1.1f %1.1f\n",

118 
°vfs
.
f_blocks
*°vfs.
f_‰size
/1024/1024/1024.0,

119 (
°vfs
.
f_blocks
 - stvfs.
f_bavaû
)*°vfs.
f_‰size
/1024/1024/1024.0,

120 
°vfs
.
f_bavaû
*°vfs.
f_‰size
/1024/1024/1024.0);

121 
pAµ
->
	`wrôeSTR
(
rch
);

123 
	`•rötf
(
rch
, " RUN: %3dD %02dH %02dM\n", 
d
, 
h
, 
m
);

124 
pAµ
->
	`wrôeSTR
(
rch
);

126 
	`•rötf
(
rch
, " TMP: %3dC\n", 
t
);

127 
pAµ
->
	`wrôeSTR
(
rch
);

129 
pAµ
->
	`upd©eDi•œy
();

130 
	}
}

132 
NXCTRL_BOOL


133 
	$ˇnA˘i⁄
 (
NXCTRL_VOID
) {

134 
time•ec
 
tm
;

135 
timeInMûlis
;

136 
	`˛ock_gëtime
(, 
time•ec
 *);

137 
	`˛ock_gëtime
(
_POSIX_CPUTIME
, &
tm
);

138 
timeInMûlis
 = 
tm
.
tv_£c
 * 1000 +Åm.
tv_n£c
/1000000;

139 i‡((
timeInMûlis
 - 
LAST_ACTION_TIME
Ë> 
MIN_ACTION_DURATION
) {

140 
LAST_ACTION_TIME
 = 
timeInMûlis
;

141  
NXCTRL_TRUE
;

143  
NXCTRL_FALSE
;

144 
	}
}

146 
NXCTRL_VOID


147 
	$upd©eMíuBuâ⁄Sèã
 (
LPNXCTRLAPP
 
pAµ
) {

148 i‡(
MENU_BUTTON_STATE
 =
NXCTRL_LOW
) {

149 i‡(
pAµ
->
	`digôÆRód
(
MENU_BUTTON_BANK
, 
MENU_BUTTON_PIN
Ë=
NXCTRL_HIGH
) {

150 
MENU_BUTTON_STATE
 = 
NXCTRL_HIGH
;

151 
DPY_IDLE_COUNT
 = 0;

154 i‡(
pAµ
->
	`digôÆRód
(
MENU_BUTTON_BANK
, 
MENU_BUTTON_PIN
Ë=
NXCTRL_LOW
) {

155 
MENU_BUTTON_STATE
 = 
NXCTRL_LOW
;

156 
DPY_IDLE_COUNT
 = 0;

159 
	}
}

161 
NXCTRL_VOID


162 
	$upd©eExecBuâ⁄Sèã
 (
LPNXCTRLAPP
 
pAµ
) {

163 i‡(
EXEC_BUTTON_STATE
 =
NXCTRL_LOW
) {

164 i‡(
pAµ
->
	`digôÆRód
(
EXEC_BUTTON_BANK
, 
EXEC_BUTTON_PIN
Ë=
NXCTRL_HIGH
) {

165 
EXEC_BUTTON_STATE
 = 
NXCTRL_HIGH
;

166 
DPY_IDLE_COUNT
 = 0;

169 i‡(
pAµ
->
	`digôÆRód
(
EXEC_BUTTON_BANK
, 
EXEC_BUTTON_PIN
Ë=
NXCTRL_LOW
) {

170 
EXEC_BUTTON_STATE
 = 
NXCTRL_LOW
;

171 
DPY_IDLE_COUNT
 = 0;

174 
	}
}

177 
	$mkMíuSTR
 (*
rch
, c⁄° *
pszName
, 
nMíu
) {

178 
	`•rötf
(
rch
, "%c %s\n",

179 (
MENU_IDX
 =
nMíu
 ? 
MENU_SEL_CHAR
 : ' '),

180 
pszName
);

181  
rch
;

182 
	}
}

184 
NXCTRL_VOID


185 
	$di•œyMíu
 (
LPNXCTRLAPP
 
pAµ
) {

186 
rch
[21];

188 
pAµ
->
	`˛órDi•œy
();

190 
pAµ
->
	`£tCurs‹
(0, 0);

191 
pAµ
->
	`wrôeSTR
("SYSTEM");

192 
pAµ
->
	`døwLöe
(37, 6, 127, 6, 
NXCTRL_ON
);

193 
pAµ
->
	`£tCurs‹
(0, 16);

195 i‡(
MENU_IDX
 < 5)

196 
pAµ
->
	`wrôeSTR
(
	`mkMíuSTR
(
rch
, "TC>>", 
MENU_IDX_SYSTEM_MENU
));

197 i‡(
MENU_IDX
 < 6)

198 
pAµ
->
	`wrôeSTR
(
	`mkMíuSTR
(
rch
, "UPDATE INFO", 
MENU_IDX_UPDATE_MENU
));

199 i‡(
MENU_IDX
 < 7)

200 
pAµ
->
	`wrôeSTR
(
	`mkMíuSTR
(
rch
, "BACKUP (@HOME)", 
MENU_IDX_BKHOME_MENU
));

201 
pAµ
->
	`wrôeSTR
(
	`mkMíuSTR
(
rch
, "BACKUP (@CSVR)", 
MENU_IDX_BKCASTLE_MENU
));

202 
pAµ
->
	`wrôeSTR
(
	`mkMíuSTR
(
rch
, "START ORION", 
MENU_IDX_RUN_ORION
));

203 i‡(
MENU_IDX
 >= 5)

204 
pAµ
->
	`wrôeSTR
(
	`mkMíuSTR
(
rch
, "START TTY.JS", 
MENU_IDX_RUN_TTY
));

205 i‡(
MENU_IDX
 >= 6)

206 
pAµ
->
	`wrôeSTR
(
	`mkMíuSTR
(
rch
, "START ML REPL", 
MENU_IDX_RUN_MLREPL
));

207 i‡(
MENU_IDX
 >= 7)

208 
pAµ
->
	`wrôeSTR
(
	`mkMíuSTR
(
rch
, "EXIT MENU", 
MENU_IDX_EXIT_MENU
));

210 
pAµ
->
	`upd©eDi•œy
();

211 
	}
}

213 
NXCTRL_VOID


214 
	$NXCTRLAPP_öô
 (
LPNXCTRLAPP
 
pAµ
) {

215 
MENU_BUTTON_STATE
 = 
pAµ
->
	`digôÆRód
(
MENU_BUTTON_BANK
, 
MENU_BUTTON_PIN
);

216 
EXEC_BUTTON_STATE
 = 
pAµ
->
	`digôÆRód
(
EXEC_BUTTON_BANK
, 
EXEC_BUTTON_PIN
);

217 
DPY_IDLE_COUNT
 = 0;

218 
MENU_IDX
 = 
MENU_IDX_SYSTEM_MENU
;

219 
IN_MENU
 = 
NXCTRL_FALSE
;

220 
LAST_ACTION_TIME
 = 0;

222 
MENU_BUTTON_STATE
 =
NXCTRL_HIGH
) {

223 
pAµ
->
	`¶ìp
(100, 0);

224 
MENU_BUTTON_STATE
 = 
pAµ
->
	`digôÆRód
(
MENU_BUTTON_BANK
, 
MENU_BUTTON_PIN
);

227 
	`di•œySysInfo
(
pAµ
);

228 
	}
}

230 
NXCTRL_VOID


231 
	$NXCTRLAPP_˛ón
 (
LPNXCTRLAPP
 
pAµ
) {

232 
	}
}

234 
NXCTRL_VOID


235 
	$NXCTRLAPP_run
 (
LPNXCTRLAPP
 
pAµ
) {

236 
	`upd©eMíuBuâ⁄Sèã
(
pAµ
);

237 
	`upd©eExecBuâ⁄Sèã
(
pAµ
);

239 i‡(
MENU_BUTTON_STATE
 !
NXCTRL_HIGH
 && 
EXEC_BUTTON_STATE
 != NXCTRL_HIGH) {

240 
DPY_IDLE_COUNT
++;

241 i‡(
DPY_IDLE_COUNT
 > 
DPY_IDLE_COUNT_MAX
) {

242 
pAµ
->
nCmd
 = 2;

248 i‡(
MENU_BUTTON_STATE
 =
NXCTRL_ON
) {

249 i‡(
IN_MENU
) {

250 i‡(
	`ˇnA˘i⁄
()) {

251 
MENU_IDX
++;

252 i‡(
MENU_IDX
 >
MENU_IDX_COUNT
)

253 
MENU_IDX
 = 
MENU_IDX_SYSTEM_MENU
;

254 
	`di•œyMíu
(
pAµ
);

257 
IN_MENU
 = 
NXCTRL_TRUE
;

258 
	`di•œyMíu
(
pAµ
);

259 
	`ˇnA˘i⁄
();

263 i‡(
EXEC_BUTTON_STATE
 =
NXCTRL_ON
) {

264 i‡(
IN_MENU
) {

265 i‡(
	`ˇnA˘i⁄
()) {

266 
MENU_IDX
) {

267 
MENU_IDX_EXIT_MENU
:

268 
IN_MENU
 = 
NXCTRL_FALSE
;

269 
	`di•œySysInfo
(
pAµ
);

271 
MENU_IDX_SYSTEM_MENU
:

272 
pAµ
->
nCmd
 = 1;

274 
MENU_IDX_UPDATE_MENU
:

275 
IN_MENU
 = 
NXCTRL_FALSE
;

276 
	`di•œySysInfo
(
pAµ
);

278 
MENU_IDX_BKHOME_MENU
:

279 
pAµ
->
	`˛órDi•œy
();

280 
pAµ
->
	`£tCurs‹
(3*
FONT_WIDTH
, 3*
FONT_HEIGHT
);

281 
pAµ
->
	`wrôeSTR
("SYNCING DATA...");

282 
pAµ
->
	`upd©eDi•œy
();

283 
	`sy°em
("sudo -u chunsj -i /home/chunsj/bin/bkhome");

284 
IN_MENU
 = 
NXCTRL_FALSE
;

285 
	`di•œySysInfo
(
pAµ
);

287 
MENU_IDX_BKCASTLE_MENU
:

288 
pAµ
->
	`˛órDi•œy
();

289 
pAµ
->
	`£tCurs‹
(3*
FONT_WIDTH
, 3*
FONT_HEIGHT
);

290 
pAµ
->
	`wrôeSTR
("SYNCING DATA...");

291 
pAµ
->
	`upd©eDi•œy
();

292 
	`sy°em
("sudo -u chunsj -i /home/chunsj/bin/bkcastle");

293 
IN_MENU
 = 
NXCTRL_FALSE
;

294 
	`di•œySysInfo
(
pAµ
);

296 
MENU_IDX_RUN_MLREPL
:

297 
pAµ
->
	`˛órDi•œy
();

298 
pAµ
->
	`£tCurs‹
(2*
FONT_WIDTH
, 3*
FONT_HEIGHT
);

299 
pAµ
->
	`wrôeSTR
("STARTING NREPL...");

300 
pAµ
->
	`upd©eDi•œy
();

301 
	`sy°em
("sudo -u chunsj -i /home/chunsj/bin/ml-repl&");

302 
pAµ
->
	`¶ìp
(4000, 0);

303 
IN_MENU
 = 
NXCTRL_FALSE
;

304 
	`di•œySysInfo
(
pAµ
);

306 
MENU_IDX_RUN_ORION
:

307 
pAµ
->
	`˛órDi•œy
();

308 
pAµ
->
	`£tCurs‹
(2*
FONT_WIDTH
, 3*
FONT_HEIGHT
);

309 
pAµ
->
	`wrôeSTR
("STARTING ORION...");

310 
pAµ
->
	`upd©eDi•œy
();

311 
	`sy°em
("sudo -u chunsj -i /home/chunsj/bin/orion&");

312 
pAµ
->
	`¶ìp
(2000, 0);

313 
IN_MENU
 = 
NXCTRL_FALSE
;

314 
	`di•œySysInfo
(
pAµ
);

316 
MENU_IDX_RUN_TTY
:

317 
pAµ
->
	`˛órDi•œy
();

318 
pAµ
->
	`£tCurs‹
(1*
FONT_WIDTH
, 3*
FONT_HEIGHT
);

319 
pAµ
->
	`wrôeSTR
("STARTING TTY.JS...");

320 
pAµ
->
	`upd©eDi•œy
();

321 
	`sy°em
("sudo -u chunsj -i /home/chunsj/bin/tty");

322 
pAµ
->
	`¶ìp
(2000, 0);

323 
IN_MENU
 = 
NXCTRL_FALSE
;

324 
	`di•œySysInfo
(
pAµ
);

332 
	}
}

	@app-sysutil.c

23 
	#_GNU_SOURCE


	)

25 
	~<uni°d.h
>

26 
	~<°dio.h
>

27 
	~<°dlib.h
>

28 
	~<°rög.h
>

29 
	~<sig«l.h
>

30 
	~<sys/ªboŸ.h
>

31 
	~<NXCTRL_≠pEx.h
>

33 
	#LOGO_WIDTH
 128

	)

34 
	#LOGO_HEIGHT
 64

	)

36 
	#FONT_WIDTH
 6

	)

37 
	#FONT_HEIGHT
 8

	)

38 
	#MENU_SEL_CHAR
 (()16)

	)

40 
	#DPY_IDLE_COUNT_MAX
 300

	)

41 
	#MIN_ACTION_DURATION
 200

	)

43 
	#MENU_IDX_COUNT
 8

	)

45 
	#MENU_IDX_GO_MAIN
 0

	)

46 
	#MENU_IDX_GO_CONNINFO
 1

	)

47 
	#MENU_IDX_GO_SYSINFO
 2

	)

48 
	#MENU_IDX_GO_PERI
 3

	)

49 
	#MENU_IDX_GO_SPARK
 4

	)

50 
	#MENU_IDX_MENU_OFF
 5

	)

51 
	#MENU_IDX_TURN_OFF
 6

	)

52 
	#MENU_IDX_EXIT_MENU
 7

	)

54 
NXCTRL_BOOL
 
	gMENU_BUTTON_STATE
 = 
NXCTRL_LOW
;

55 
NXCTRL_BOOL
 
	gEXEC_BUTTON_STATE
 = 
NXCTRL_LOW
;

56 
	gDPY_IDLE_COUNT
 = 0;

57 
	gMENU_IDX
 = 
MENU_IDX_GO_MAIN
;

58 
NXCTRL_BOOL
 
	gIN_MENU
 = 
NXCTRL_FALSE
;

59 
	gLAST_ACTION_TIME
 = 0;

61 
NXCTRL_BOOL


62 
	$ˇnA˘i⁄
 (
NXCTRL_VOID
) {

63 
time•ec
 
tm
;

64 
timeInMûlis
;

65 
	`˛ock_gëtime
(, 
time•ec
 *);

66 
	`˛ock_gëtime
(
_POSIX_CPUTIME
, &
tm
);

67 
timeInMûlis
 = 
tm
.
tv_£c
 * 1000 +Åm.
tv_n£c
/1000000;

68 i‡((
timeInMûlis
 - 
LAST_ACTION_TIME
Ë> 
MIN_ACTION_DURATION
) {

69 
LAST_ACTION_TIME
 = 
timeInMûlis
;

70  
NXCTRL_TRUE
;

72  
NXCTRL_FALSE
;

73 
	}
}

75 
NXCTRL_VOID


76 
	$upd©eMíuBuâ⁄Sèã
 (
LPNXCTRLAPP
 
pAµ
) {

77 i‡(
MENU_BUTTON_STATE
 =
NXCTRL_LOW
) {

78 i‡(
pAµ
->
	`digôÆRód
(
MENU_BUTTON_BANK
, 
MENU_BUTTON_PIN
Ë=
NXCTRL_HIGH
) {

79 
MENU_BUTTON_STATE
 = 
NXCTRL_HIGH
;

80 
DPY_IDLE_COUNT
 = 0;

83 i‡(
pAµ
->
	`digôÆRód
(
MENU_BUTTON_BANK
, 
MENU_BUTTON_PIN
Ë=
NXCTRL_LOW
) {

84 
MENU_BUTTON_STATE
 = 
NXCTRL_LOW
;

85 
DPY_IDLE_COUNT
 = 0;

88 
	}
}

90 
NXCTRL_VOID


91 
	$upd©eExecBuâ⁄Sèã
 (
LPNXCTRLAPP
 
pAµ
) {

92 i‡(
EXEC_BUTTON_STATE
 =
NXCTRL_LOW
) {

93 i‡(
pAµ
->
	`digôÆRód
(
EXEC_BUTTON_BANK
, 
EXEC_BUTTON_PIN
Ë=
NXCTRL_HIGH
) {

94 
EXEC_BUTTON_STATE
 = 
NXCTRL_HIGH
;

95 
DPY_IDLE_COUNT
 = 0;

98 i‡(
pAµ
->
	`digôÆRód
(
EXEC_BUTTON_BANK
, 
EXEC_BUTTON_PIN
Ë=
NXCTRL_LOW
) {

99 
EXEC_BUTTON_STATE
 = 
NXCTRL_LOW
;

100 
DPY_IDLE_COUNT
 = 0;

103 
	}
}

106 
	$mkMíuSTR
 (*
rch
, c⁄° *
pszName
, 
nMíu
) {

107 
	`•rötf
(
rch
, "%c %s\n",

108 (
MENU_IDX
 =
nMíu
 ? 
MENU_SEL_CHAR
 : ' '),

109 
pszName
);

110  
rch
;

111 
	}
}

114 
	$mkAµMíuSTR
 (*
rch
, c⁄° *
pszName
, 
nMíu
) {

115 
	`•rötf
(
rch
, "%c %c%s\n",

116 (
MENU_IDX
 =
nMíu
 ? 
MENU_SEL_CHAR
 : ' '),

117 
MENU_SEL_CHAR
-9,

118 
pszName
);

119  
rch
;

120 
	}
}

122 
NXCTRL_VOID


123 
	$di•œyMíu
 (
LPNXCTRLAPP
 
pAµ
) {

124 
rch
[21];

126 
pAµ
->
	`˛órDi•œy
();

128 
pAµ
->
	`£tCurs‹
(0, 0);

129 
pAµ
->
	`wrôeSTR
("TC");

130 
pAµ
->
	`døwLöe
(13, 6, 127, 6, 
NXCTRL_ON
);

131 
pAµ
->
	`£tCurs‹
(0, 16);

133 i‡(
MENU_IDX
 < 5)

134 
pAµ
->
	`wrôeSTR
(
	`mkAµMíuSTR
(
rch
, "MAIN", 
MENU_IDX_GO_MAIN
));

135 i‡(
MENU_IDX
 < 6)

136 
pAµ
->
	`wrôeSTR
(
	`mkAµMíuSTR
(
rch
, "CONNECTION", 
MENU_IDX_GO_CONNINFO
));

137 i‡(
MENU_IDX
 < 7)

138 
pAµ
->
	`wrôeSTR
(
	`mkAµMíuSTR
(
rch
, "SYSTEM", 
MENU_IDX_GO_SYSINFO
));

139 
pAµ
->
	`wrôeSTR
(
	`mkAµMíuSTR
(
rch
, "PERIPHERAL", 
MENU_IDX_GO_PERI
));

140 
pAµ
->
	`wrôeSTR
(
	`mkAµMíuSTR
(
rch
, "SPARK CORE", 
MENU_IDX_GO_SPARK
));

141 i‡(
MENU_IDX
 >= 5)

142 
pAµ
->
	`wrôeSTR
(
	`mkMíuSTR
(
rch
, "SCREEN OFF", 
MENU_IDX_MENU_OFF
));

143 i‡(
MENU_IDX
 >= 6)

144 
pAµ
->
	`wrôeSTR
(
	`mkMíuSTR
(
rch
, "POWER OFF", 
MENU_IDX_TURN_OFF
));

145 i‡(
MENU_IDX
 >= 7)

146 
pAµ
->
	`wrôeSTR
(
	`mkMíuSTR
(
rch
, "EXIT MENU", 
MENU_IDX_EXIT_MENU
));

148 
pAµ
->
	`upd©eDi•œy
();

149 
	}
}

151 
NXCTRL_VOID


152 
	$NXCTRLAPP_öô
 (
LPNXCTRLAPP
 
pAµ
) {

153 
MENU_BUTTON_STATE
 = 
pAµ
->
	`digôÆRód
(
MENU_BUTTON_BANK
, 
MENU_BUTTON_PIN
);

154 
EXEC_BUTTON_STATE
 = 
pAµ
->
	`digôÆRód
(
EXEC_BUTTON_BANK
, 
EXEC_BUTTON_PIN
);

155 
DPY_IDLE_COUNT
 = 0;

156 
MENU_IDX
 = 
MENU_IDX_GO_MAIN
;

157 
IN_MENU
 = 
NXCTRL_FALSE
;

158 
LAST_ACTION_TIME
 = 0;

159 
IN_MENU
 = 
NXCTRL_TRUE
;

161 
EXEC_BUTTON_STATE
 =
NXCTRL_HIGH
) {

162 
pAµ
->
	`¶ìp
(100, 0);

163 
EXEC_BUTTON_STATE
 = 
pAµ
->
	`digôÆRód
(
EXEC_BUTTON_BANK
, 
EXEC_BUTTON_PIN
);

166 
pAµ
->
	`˛órDi•œy
();

167 
pAµ
->
	`upd©eDi•œy
();

168 
	}
}

170 
NXCTRL_VOID


171 
	$NXCTRLAPP_˛ón
 (
LPNXCTRLAPP
 
pAµ
) {

172 
	}
}

174 
NXCTRL_VOID


175 
	$NXCTRLAPP_run
 (
LPNXCTRLAPP
 
pAµ
) {

176 
	`upd©eMíuBuâ⁄Sèã
(
pAµ
);

177 
	`upd©eExecBuâ⁄Sèã
(
pAµ
);

179 
	`di•œyMíu
(
pAµ
);

181 i‡(
MENU_BUTTON_STATE
 =
NXCTRL_ON
) {

182 i‡(
IN_MENU
) {

183 i‡(
	`ˇnA˘i⁄
()) {

184 
MENU_IDX
++;

185 i‡(
MENU_IDX
 >
MENU_IDX_COUNT
)

186 
MENU_IDX
 = 
MENU_IDX_GO_MAIN
;

187 
	`di•œyMíu
(
pAµ
);

190 
IN_MENU
 = 
NXCTRL_TRUE
;

191 
	`di•œyMíu
(
pAµ
);

192 
	`ˇnA˘i⁄
();

196 i‡(
EXEC_BUTTON_STATE
 =
NXCTRL_ON
) {

197 i‡(
IN_MENU
) {

198 i‡(
	`ˇnA˘i⁄
()) {

199 
MENU_IDX
) {

200 
MENU_IDX_GO_MAIN
:

201 
pAµ
->
nCmd
 = 1234;

203 
MENU_IDX_GO_CONNINFO
:

204 
pAµ
->
nCmd
 = 1234+3;

206 
MENU_IDX_GO_SYSINFO
:

207 
pAµ
->
nCmd
 = 1234+4;

209 
MENU_IDX_GO_PERI
:

210 
pAµ
->
nCmd
 = 1234+5;

212 
MENU_IDX_GO_SPARK
:

213 
pAµ
->
nCmd
 = 1234+6;

215 
MENU_IDX_EXIT_MENU
:

216 
pAµ
->
nCmd
 = 1;

218 
MENU_IDX_TURN_OFF
:

219 
pAµ
->
	`˛órDi•œy
();

220 
pAµ
->
	`£tCurs‹
(3*
FONT_WIDTH
, 3*
FONT_HEIGHT
);

221 
pAµ
->
	`wrôeSTR
("TURNING OFF...");

222 
pAµ
->
	`upd©eDi•œy
();

223 
	`sync
();

224 
	`sync
();

225 
	`sync
();

226 
pAµ
->
	`¶ìp
(500, 0);

229 
	`sync
();

230 
	`sync
();

231 
	`sync
();

233 
	`sy°em
("poweroff");

235 
MENU_IDX_MENU_OFF
:

236 
pAµ
->
nCmd
 = 2;

244 
	}
}

	@app-test.c

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 
	~<sig«l.h
>

27 
	~<sys/time.h
>

28 
	~<time.h
>

29 
	~<NXCTRL_≠p.h
>

31 
NXCTRL_UINT8
 
	glogoBôm≠
[] = {

32 
	~"bôm≠/logo.h
"

35 
	#LOGO_WIDTH
 128

	)

36 
	#LOGO_HEIGHT
 64

	)

38 
	#FONT_WIDTH
 6

	)

39 
	#FONT_HEIGHT
 8

	)

41 
	#BANNER_TIME_SECS
 3

	)

43 
	s__ègAPPDATA
 {

44 
	mnPr›îty
;

45 } 
	tAPPDATA
;

47 
APPDATA
 
	gmyAµD©a
;

49 
NXCTRL_VOID


50 
	$NXCTRLAPP_öô
 (
LPNXCTRLAPP
 
pAµ
) {

51 
myAµD©a
.
nPr›îty
 = 
	`time
(
NULL
);

52 
pAµ
->
pD©a
 = (
NXCTRL_VOID
 *)(&
myAµD©a
);

53 
pAµ
->
	`˛órDi•œy
();

54 
pAµ
->
	`døwBôm≠
(0, 0, 
logoBôm≠
, 
LOGO_WIDTH
, 
LOGO_HEIGHT
, 
NXCTRL_ON
);

55 
pAµ
->
	`upd©eDi•œy
();

56 
pAµ
->
	`¶ìp
(
BANNER_TIME_SECS
 * 1000, 0);

57 
pAµ
->
	`˛órDi•œy
();

58 
pAµ
->
	`£tCurs‹
(
FONT_WIDTH
*3, 
FONT_HEIGHT
*1);

59 
pAµ
->
	`wrôeSTR
("AppInit\n");

60 
pAµ
->
	`upd©eDi•œy
();

61 
pAµ
->
	`¶ìp
(250, 0);

62 
	}
}

64 
NXCTRL_VOID


65 
	$NXCTRLAPP_˛ón
 (
LPNXCTRLAPP
 
pAµ
) {

66 
pAµ
->
	`£tCurs‹
(
FONT_WIDTH
*3, 
FONT_HEIGHT
*3);

67 
pAµ
->
	`wrôeSTR
("AppClean\n");

68 
pAµ
->
	`upd©eDi•œy
();

69 
	}
}

71 
NXCTRL_VOID


72 
	$NXCTRLAPP_run
 (
LPNXCTRLAPP
 
pAµ
) {

73 
rch
[
BUFSIZ
];

74 
APPDATA
 *
pAµD©a
 = (APPDATA *)
pAµ
->
pD©a
;

75 
pAµ
->
	`døwLöe
(0, 0, 127, 0, 
NXCTRL_ON
);

76 
pAµ
->
	`£tCurs‹
(
FONT_WIDTH
*3, 
FONT_HEIGHT
*5);

77 
	`•rötf
(
rch
, "AppRun: %d %d\n",

78 
pAµ
->
	`™ÆogRód
(
NXCTRL_A0
),

79 ()(
	`time
(
NULL
Ë- 
pAµD©a
->
nPr›îty
));

80 
pAµ
->
	`wrôeSTR
(
rch
);

81 
pAµ
->
	`upd©eDi•œy
();

82 
pAµ
->
	`¶ìp
(250, 0);

83 
	}
}

	@bigbm-test.c

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 
	~<°rögs.h
>

27 
	~<NXCTRL.h
>

28 
	~<NXCTRL_ﬁed.h
>

29 
	~<NXCTRL_bôAºay.h
>

31 
	~<uni°d.h
>

32 
	~<°döt.h
>

33 
	~<f˙é.h
>

34 
	~<sys/io˘l.h
>

35 
	~<löux/ty≥s.h
>

36 
	~<löux/•i/•idev.h
>

38 
	~<ãrmios.h
>

40 
	#BNK
 
NXCTRL_P9


	)

42 
	#SPI_CS0
 17

	)

43 
	#SPI_D0
 21

	)

44 
	#SPI_D1
 18

	)

45 
	#SPI_CLK
 22

	)

47 
	#OLED_DC
 13

	)

48 
	#OLED_RST
 15

	)

49 
	#OLED_CS
 
SPI_CS0


	)

50 
	#OLED_DATA
 
SPI_D1


	)

51 
	#OLED_CLK
 
SPI_CLK


	)

53 
NXCTRLOLED
 
	gﬁed
;

54 
	gnFD
;

56 
NXCTRL_UINT8
 
	gbigBôm≠
[] = {

57 
	~"bôm≠/bôm≠.h
"

61 
	#BIG_BITMAP_W
 1800

	)

63 
	#BIG_BITMAP_H
 1196

	)

65 
	#SCROLL_STEP_DIV
 4

	)

67 
NXCTRL_VOID


68 
	$__DøwBigBôm≠
 (
nX
, 
nY
) {

69 
i
, 
j
;

70 
NXCTRLBITARRAY
 
¨rBôs
;

71 
¨rBôs
.
¨r
 = 
bigBôm≠
;

72 
¨rBôs
.
nBôs
 = 
BIG_BITMAP_W
 * 
BIG_BITMAP_H
;

74 i‡((
nX
 + 
OLED_WIDTH
Ë> 
BIG_BITMAP_W
)

75 
nX
 = 
BIG_BITMAP_W
 - 
OLED_WIDTH
 - 1;

76 i‡((
nY
 + 
OLED_HEIGHT
Ë> 
BIG_BITMAP_H
)

77 
nY
 = 
BIG_BITMAP_H
 - 
OLED_HEIGHT
 - 1;

79 
i
 = 
nX
; i < (nX + 
OLED_WIDTH
); i++) {

80 
j
 = 
nY
; j < (nY + 
OLED_HEIGHT
); j++) {

81 i‡(
	`NXCTRLBITARRAYGë
(&
¨rBôs
, 
i
 + 
j
 * 
BIG_BITMAP_W
))

83 
	`NXCTRLOLEDDøwPixñ
(&
ﬁed
, (
i
 - 
nX
), (
j
 - 
nY
), 
NXCTRL_ON
);

85 
	`NXCTRLOLEDDøwPixñ
(&
ﬁed
, (
i
 - 
nX
), (
j
 - 
nY
), 
NXCTRL_OFF
);

88 
	}
}

90 
ãrmios
 
	gtioOld
, 
	gtioNew
;

92 
NXCTRL_VOID


93 
	$INTC_HANDLER
 (
NXCTRL_VOID
) {

94 
	`NXCTRLOLEDCÀ¨Di•œy
(&
ﬁed
);

95 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

96 
	`tc£èâr
(
STDIN_FILENO
, 
TCSANOW
, &
tioOld
);

97 
	`˛o£
(
nFD
);

98 
	}
}

100 
NXCTRL_VOID


101 
	$NXCTRLSëup
 (
NXCTRL_VOID
) {

102 
uöt8_t
 
nLSB
;

103 
uöt32_t
 
nS≥ed
, 
nSPIMode
;

105 
	`NXCTRLPöMux
(
BNK
, 
SPI_CS0
, 
NXCTRL_MODE0
, 
NXCTRL_PULLDN
, 
NXCTRL_LOW
);

106 
	`NXCTRLPöMux
(
BNK
, 
SPI_D1
, 
NXCTRL_MODE0
, 
NXCTRL_PULLDN
, 
NXCTRL_LOW
);

107 
	`NXCTRLPöMux
(
BNK
, 
SPI_D0
, 
NXCTRL_MODE0
, 
NXCTRL_PULLUP
, 
NXCTRL_HIGH
);

108 
	`NXCTRLPöMux
(
BNK
, 
SPI_CLK
, 
NXCTRL_MODE0
, 
NXCTRL_PULLUP
, 
NXCTRL_HIGH
);

110 
nFD
 = 
	`›í
("/dev/•idev1.0", 
O_RDWR
);

112 
nLSB
 = 0;

113 
	`io˘l
(
nFD
, 
SPI_IOC_WR_LSB_FIRST
, &
nLSB
);

114 
nS≥ed
 = 20000000;

115 
	`io˘l
(
nFD
, 
SPI_IOC_WR_MAX_SPEED_HZ
, &
nS≥ed
);

116 
nSPIMode
 = 
SPI_MODE_0
;

117 
	`io˘l
(
nFD
, 
SPI_IOC_WR_MODE
, &
nSPIMode
);

119 
	`NXCTRLOLEDInô
(&
ﬁed
,

120 
BNK
, 
OLED_DC
, BNK, 
OLED_RST
,

121 
nFD
);

123 
	`NXCTRLOLEDDi•œyN‹mÆ
(&
ﬁed
);

124 
	`NXCTRLOLEDCÀ¨Di•œy
(&
ﬁed
);

125 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

127 
	`tcgë©å
(
STDIN_FILENO
, &
tioOld
);

129 
tioNew
 = 
tioOld
;

130 
tioNew
.
c_lÊag
 &(~
ICANON
 & ~
ECHO
);

131 
	`tc£èâr
(
STDIN_FILENO
, 
TCSANOW
, &
tioNew
);

133 
	`NXCTRLSëSIGINTH™dÀr
(
INTC_HANDLER
);

134 
	}
}

136 
NXCTRL_VOID


137 
	$NXCTRLLo›
 (
NXCTRL_VOID
) {

138 
NXCTRL_UINT8
 
ch
;

139 
nPageX
 = 0, 
nPageY
 = 0;

140 c⁄° 
nPageWidth
 = 
OLED_WIDTH
/
SCROLL_STEP_DIV
;

141 c⁄° 
nPageHeight
 = 
OLED_HEIGHT
/
SCROLL_STEP_DIV
;

142 c⁄° 
nPageW
 = 
BIG_BITMAP_W
/
nPageWidth
;

143 c⁄° 
nPageH
 = 
BIG_BITMAP_H
/
nPageHeight
;

145 
ch
 = 
	`gëch¨
();

147 
ch
) {

149 
	`NXCTRLOLEDCÀ¨Di•œy
(&
ﬁed
);

150 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

151 
	`tc£èâr
(
STDIN_FILENO
, 
TCSANOW
, &
tioOld
);

152 
	`˛o£
(
nFD
);

153 
	`NXCTRLExôLo›
();

156 
nPageX
 = 
nPageY
 = 0;

157 
	`__DøwBigBôm≠
(
nPageX
*
nPageWidth
, 
nPageY
*
nPageHeight
);

158 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

161 
nPageX
--;

162 i‡(
nPageX
 < 0)ÇPageX = 0;

163 
	`__DøwBigBôm≠
(
nPageX
*
nPageWidth
, 
nPageY
*
nPageHeight
);

164 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

167 
nPageY
++;

168 i‡(
nPageY
 >
nPageH
)ÇPageY =ÇPageH - 1;

169 
	`__DøwBigBôm≠
(
nPageX
*
nPageWidth
, 
nPageY
*
nPageHeight
);

170 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

173 
nPageY
--;

174 i‡(
nPageY
 < 0)ÇPageY = 0;

175 
	`__DøwBigBôm≠
(
nPageX
*
nPageWidth
, 
nPageY
*
nPageHeight
);

176 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

179 
nPageX
++;

180 i‡(
nPageX
 >
nPageW
)ÇPageX =ÇPageW - 1;

181 
	`__DøwBigBôm≠
(
nPageX
*
nPageWidth
, 
nPageY
*
nPageHeight
);

182 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

185 
	}
}

188 
	$maö
 () {

189  
	`NXCTRLMaö
();

190 
	}
}

	@bit-test.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~"NXCTRL_bôs.h
"

6 
	$maö
 (
¨gc
, c⁄° *
¨gv
[]) {

7 
v16
 = 0;

9 
	`¥ötINT16
(
v16
);

11 i‡(
	`⁄BIT16
(
v16
, 0))

12 
	`¥ötf
("Have Oneát 0\n");

15 
	`£tBIT16
(
v16
, 0);

16 
	`¥ötINT16
(
v16
);

18 i‡(
	`⁄BIT16
(
v16
, 0))

19 
	`¥ötf
("Have Oneát 0\n");

22 
	`£tBIT16
(
v16
, 1);

23 
	`¥ötINT16
(
v16
);

24 i‡(
v16
 & 
BIT1
)

25 
	`¥ötf
("Have Oneát 1\n");

26 i‡(
	`bôINT16
(
v16
,1) == 1)

27 
	`¥ötf
("Have Oneát 1\n");

30 
	`˛rBIT16
(
v16
, 1);

31 
	`¥ötINT16
(
v16
);

32 i‡(
v16
 & 
BIT1
)

33 
	`¥ötf
("Have Oneát 1\n");

35 
	`¥ötINT16
(0b0000000000000010);

36 i‡(
	`bôINT16
(
v16
,1) == 1)

37 
	`¥ötf
("Have Oneát 1\n");

39 
	`¥ötINT16
(0x0068);

40 
	`¥ötINT16
(0x00AF);

42 
	`¥ötINT16
(0x1702);

43 
	`¥ötINT16
((0xFFFF/0x0080));

45 
	`¥ötINT16
(58594);

46 
	`¥ötf
("%d, %x\n", 58594, 58594);

48 
	`¥ötINT16
(0x8);

49 
	`¥ötINT16
(0x0023);

51 
chCMD
 = 0;

52 
	`¥ötINT16
(
chCMD
);

53 
chCMD
 |= 0x18;

54 
	`¥ötINT16
(
chCMD
);

55 
chCMD
 <<= 3;

56 
	`¥ötINT16
(
chCMD
);

57 
sCMD
 = 
chCMD
;

58 
	`¥ötINT16
(
sCMD
);

59 
sCMD
 <<= 8;

60 
	`¥ötINT16
(
sCMD
);

62 
nVﬁt
 = 0b1100000001101011;

63 
	`¥ötINT16
(
nVﬁt
);

64 
nVﬁt
 <<= 3;

65 
	`¥ötINT16
(
nVﬁt
);

66 
nVﬁt
 >>= 1;

67 
	`¥ötINT16
(
nVﬁt
);

69 
fVﬁt
 = (
nVﬁt
 * 3300.0 / 1024.0);

70 
	`¥ötf
("%.2f\n", 
fVﬁt
);

71 
	`¥ötf
("%.2f\n", ((
fVﬁt
 - 100.0) / 10.0) - 40.0);

73 
	`¥ötf
("%d %d\n", 0x44e10000, 0x44e10800);

74 
	`¥ötINT32
(0x44e10000);

75 
	`¥ötINT32
(0x44e10800);

77 
nVÆue
 = 1;

78 
	`¥ötINT32
(
nVÆue
);

79 
	`¥ötINT32
(
nVÆue
+1);

80 
	`¥ötINT32
(
nVÆue
<<2);

81 
	`¥ötINT32
(
BIT1
);

82 
	`¥ötINT32
(
BIT2
);

84 
	`¥ötINT16
(0b00000000);

85 
	`¥ötINT16
(0b00000111);

86 
	`¥ötINT16
(0b00100111);

87 
	`¥ötINT16
(0x37);

88 
	`¥ötINT16
(0x27);

90 
	`¥ötINT16
(0x1FFF);

91 
	`¥ötINT16
(0xFF);

93 
	`¥ötINT32
(0x2);

94 
	`¥ötINT32
(1 << 18);

96 
	`¥ötINT16
(1<<4);

97 
	`¥ötINT16
(0x1F);

99 
nS
 = 1;

100 
	`¥ötINT32
(
nS
);

101 
	`¥ötINT32
(
nS
 >> (0 & 0x1F));

102 
	`¥ötINT32
(
nS
 >> (1 & 0x1F));

103 
	`¥ötINT32
(
nS
 >> (22 & 0x1F));

105 
nV
 = 7 << 22;

106 
	`¥ötINT32
(7);

107 
	`¥ötINT32
(
nV
);

108 
	`¥ötINT32
(
nV
 ^ÇV);

110 
nLSL
 = 0;

111 
nV
 = 1;

112 
nV
 =ÇV << (
nLSL
 & 0x1F);

113 
	`¥ötINT32
(
nV
);

114 
nV
 =ÇV << (22 & 0x1F);

115 
	`¥ötINT32
(
nV
);

117 
nR6
 = 0;

118 
nR6
 =ÇR6 | 
nV
;

119 
	`¥ötINT32
(
nR6
);

121 
nLSL
 =ÇLSL + 1;

122 
nV
 = 1;

123 
nV
 =ÇV << (
nLSL
 & 0x1F);

124 
nV
 =ÇV << (22 & 0x1F);

126 
nR6
 =ÇR6 | 
nV
;

127 
	`¥ötINT32
(
nR6
);

129 
nLSL
 =ÇLSL + 1;

130 
nV
 = 1;

131 
nV
 =ÇV << (
nLSL
 & 0x1F);

132 
nV
 =ÇV << (22 & 0x1F);

134 
nR6
 =ÇR6 | 
nV
;

135 
	`¥ötINT32
(
nR6
);

137 
	`¥ötINT32
(0x44E11FFF - 0x44E10000);

138 
	`¥ötf
("%x\n", 8191);

140 
	`¥ötINT32
(0x01800000);

141 
	`¥ötINT32
(0x00780000);

143 
	`¥ötINT32
(131);

144 
	`¥ötINT32
(643);

145 
	`¥ötINT32
(
BIT7
);

147 
	`¥ötINT32
(
BIT12
);

148 
	`¥ötf
("%d\n", 
	`BITPOS
(
BIT12
));

150 
	`¥ötINT32
(0x660000E3);

151 
	`¥ötINT32
(0x00F42400);

152 
	`¥ötINT32
(0x02FAF080);

153 
	`¥ötf
("0x%x\n", 0x02FAF080*2);

155 
	`¥ötINT32
(1<<0);

156 
	`¥ötINT32
(1<<1);

157 
	`¥ötINT32
(1<<2);

159 
	`¥ötINT32
(20);

162 
	}
}

	@bitmap/bitmap.h

	@bitmap/gen-bitmap.c

1 
	~<as£π.h
>

2 
	~<î∫o.h
>

3 
	~<°dboﬁ.h
>

4 
	~<°dlib.h
>

5 
	~<°döt.h
>

6 
	~<°dio.h
>

7 
	~<°rög.h
>

8 
	~<sys/°©.h
>

9 
	~<libnsbmp.h
>

11 
	~<NXCTRL_bôAºay.h
>

13 *
¸óãBôm≠
 (
nWidth
, 
nHeight
, 
nSèã
);

14 
de°royBôm≠
 (*
pBôm≠
);

15 *
gëBôm≠Buf„r
 (*
pBôm≠
);

16 
size_t
 
gëBôm≠BPP
 (*
pBôm≠
);

18 *
lﬂdBôm≠Fûe
 (c⁄° *
pszP©h
, 
size_t
 *
≤Size
);

19 
w¨nög
 (c⁄° *
pszCtx
, 
bmp_ªsu…
 
nCode
);

22 
	$maö
 (
¨gc
, c⁄° *
¨gv
[]) {

23 
bmp_bôm≠_ˇŒback_vt
 
bôm≠CBs
 = {

24 
¸óãBôm≠
,

25 
de°royBôm≠
,

26 
gëBôm≠Buf„r
,

27 
gëBôm≠BPP


29 
bmp_ªsu…
 
nCode
;

30 
bmp_image
 
bmp
;

31 
size_t
 
nSize
;

32 
nRes
 = 0;

33 *
pD©a
;

34 
NXCTRLBITARRAY
 
¨rBôs
;

35 
FILE
 *
pFûe
;

36 
nRow
, 
nCﬁ
, 
i
;

37 *
pImage
;

39 i‡(
¨gc
 != 3) {

40 
	`Ârötf
(
°dîr
, "Ußge: %†bœck_™d_whôe.bm∞ouçut.h\n", 
¨gv
[0]);

44 
pD©a
 = 
	`lﬂdBôm≠Fûe
(
¨gv
[1], &
nSize
);

46 
	`bmp_¸óã
(&
bmp
, &
bôm≠CBs
);

47 
nCode
 = 
	`bmp_™Æy£
(&
bmp
, 
nSize
, 
pD©a
);

48 i‡(
nCode
 !
BMP_OK
) {

49 
	`w¨nög
("bmp_™Æy£", 
nCode
);

50 
nRes
 = 1;

51 
CLEANUP
;

54 
nCode
 = 
	`bmp_decode
(&
bmp
);

55 i‡(
nCode
 !
BMP_OK
) {

56 
	`w¨nög
("bmp_code", 
nCode
);

57 i‡(
nCode
 !
BMP_INSUFFICIENT_DATA
) {

58 
nRes
 = 1;

59 
CLEANUP
;

63 
pFûe
 = 
	`f›í
(
¨gv
[2], "w");

64 i‡(!
pFûe
) {

65 
	`Ârötf
(
°dîr
, "ˇ¬Ÿ cª©êfûê%s\n", 
¨gv
[2]);

66 
nRes
 = 1;

67 
CLEANUP
;

70 
	`Ârötf
(
pFûe
, "// NAME: %s\n", 
¨gv
[1]);

71 
	`Ârötf
(
pFûe
, "// WIDTH: %u\n", 
bmp
.
width
);

72 
	`Ârötf
(
pFûe
, "// HEIGHT: %u\n", 
bmp
.
height
);

74 
	`NXCTRLBITARRAYInô
(&
¨rBôs
, 
bmp
.
width
 * bmp.
height
);

75 
pImage
 = (*)
bmp
.
bôm≠
;

76 
nRow
 = 0;ÇRow !
bmp
.
height
;ÇRow++) {

77 
nCﬁ
 = 0;ÇCﬁ !
bmp
.
width
;ÇCol++) {

78 
size_t
 
z
 = (
nRow
 * 
bmp
.
width
 + 
nCﬁ
) * 4;

79 i‡(
pImage
[
z
] > 0)

80 
	`NXCTRLBITARRAYSë
(&
¨rBôs
, (
nRow
 * 
bmp
.
width
 + 
nCﬁ
));

82 
	`NXCTRLBITARRAYCÀ¨
(&
¨rBôs
, (
nRow
 * 
bmp
.
width
 + 
nCﬁ
));

86 
i
 = 0; i < 
¨rBôs
.
nSize
; i++) {

87 
	`Ârötf
(
pFûe
, "%u, ", 
¨rBôs
.
¨r
[
i
]);

88 i‡(((
i
 + 1) % 4) == 0)

89 
	`Ârötf
(
pFûe
, "\n");

92 
	`f˛o£
(
pFûe
);

94 
CLEANUP
:

95 
	`bmp_föÆi£
(&
bmp
);

96 
	`NXCTRLBITARRAYFªe
(&
¨rBôs
);

98  
nRes
;

99 
	}
}

102 
	$lﬂdBôm≠Fûe
 (c⁄° *
pszP©h
, 
size_t
 *
≤D©aSize
) {

103 
FILE
 *
pFûe
;

104 
°©
 
°
;

105 *
pBuf
;

106 
size_t
 
nSize
;

107 
size_t
 
n
;

109 
pFûe
 = 
	`f›í
(
pszP©h
, "rb");

110 i‡(!
pFûe
) {

111 
	`≥º‹
(
pszP©h
);

112 
	`exô
(
EXIT_FAILURE
);

115 i‡(
	`°©
(
pszP©h
, &
°
)) {

116 
	`≥º‹
(
pszP©h
);

117 
	`exô
(
EXIT_FAILURE
);

120 
nSize
 = 
°
.
°_size
;

122 
pBuf
 = 
	`mÆloc
(
nSize
);

123 i‡(!
pBuf
) {

124 
	`Ârötf
(
°dîr
, "cannotállocate memory of size %lld\n",

125 
nSize
);

126 
	`exô
(
EXIT_FAILURE
);

129 
n
 = 
	`‰ód
(
pBuf
, 1, 
nSize
, 
pFûe
);

130 i‡(
n
 !
nSize
) {

131 
	`≥º‹
(
pszP©h
);

132 
	`exô
(
EXIT_FAILURE
);

135 
	`f˛o£
(
pFûe
);

137 *
≤D©aSize
 = 
nSize
;

139  
pBuf
;

140 
	}
}

143 
	$w¨nög
 (c⁄° *
pszCtx
, 
bmp_ªsu…
 
nCode
) {

144 
	`Ârötf
(
°dîr
, "%s: ", 
pszCtx
);

145 
nCode
) {

146 
BMP_INSUFFICIENT_MEMORY
:

147 
	`Ârötf
(
°dîr
, "Insufficiant memory");

149 
BMP_INSUFFICIENT_DATA
:

150 
	`Ârötf
(
°dîr
, "Insufficient data");

152 
BMP_DATA_ERROR
:

153 
	`Ârötf
(
°dîr
, "DataÉrror");

156 
	`Ârötf
(
°dîr
, "Unknow¿codê%d", 
nCode
);

158 
	`Ârötf
(
°dîr
, "\n");

159 
	}
}

162 
	$¸óãBôm≠
 (
nW
, 
nH
, 
nSèã
) {

163  
	`ˇŒoc
(
nW
 * 
nH
, 4);

164 
	}
}

167 
	$gëBôm≠Buf„r
 (*
pBôm≠
) {

168 
	`as£π
(
pBôm≠
);

169  
pBôm≠
;

170 
	}
}

172 
size_t


173 
	$gëBôm≠BPP
 (*
pBôm≠
) {

175 
	}
}

178 
	$de°royBôm≠
 (*
pBôm≠
) {

179 
	`as£π
(
pBôm≠
);

180 
	`‰ì
(
pBôm≠
);

181 
	}
}

	@bitmap/logo.h

	@ctrl-app.c

23 
	#_GNU_SOURCE


	)

25 
	~<uni°d.h
>

26 
	~<°döt.h
>

27 
	~<f˙é.h
>

28 
	~<°dio.h
>

29 
	~<°dlib.h
>

30 
	~<°rög.h
>

31 
	~<˘y≥.h
>

32 
	~<NXCTRL.h
>

33 
	~<NXCTRL_ﬁed.h
>

34 
	~<NXCTRL_bôAºay.h
>

36 
	~<sys/io˘l.h
>

37 
	~<sys/time.h
>

38 
	~<time.h
>

39 
	~<löux/ty≥s.h
>

40 
	~<löux/•i/•idev.h
>

42 
	~<¨∑/öë.h
>

43 
	~<sys/sockë.h
>

44 
	~<√tdb.h
>

45 
	~<iÁddrs.h
>

47 
	~<sys/ªboŸ.h
>

48 
	~<sys/sysöfo.h
>

49 
	~<sys/°©vfs.h
>

51 
	~<dlf˙.h
>

52 
	~<NXCTRL_≠p.h
>

54 
	~<î∫o.h
>

55 
	~<¥ussdrv.h
>

56 
	~<¥uss_ötc_m≠pög.h
>

58 
	#MENU_BUTTON_BANK
 
NXCTRL_P8


	)

59 
	#MENU_BUTTON_PIN
 
NXCTRL_PIN29


	)

60 
	#EXEC_BUTTON_BANK
 
NXCTRL_P8


	)

61 
	#EXEC_BUTTON_PIN
 
NXCTRL_PIN31


	)

63 
	#OLED_BANK
 
NXCTRL_P9


	)

65 
	#SPI_CS0
 
NXCTRL_PIN17


	)

66 
	#SPI_D0
 
NXCTRL_PIN21


	)

67 
	#SPI_D1
 
NXCTRL_PIN18


	)

68 
	#SPI_CLK
 
NXCTRL_PIN22


	)

70 
	#OLED_DC
 
NXCTRL_PIN15


	)

71 
	#OLED_RST
 
NXCTRL_PIN13


	)

72 
	#OLED_CS
 
SPI_CS0


	)

73 
	#OLED_DATA
 
SPI_D1


	)

74 
	#OLED_CLK
 
SPI_CLK


	)

76 
	#PRU_NUM
 
PRU0


	)

77 
	#PRU_PATH
 "/u§/bö/˘æ-≠p.bö"

	)

79 
	#USR_APP_PATH
 "/u§/bö/˘æ-≠p.≠p"

	)

80 
	#REPORT_PATH
 "/u§/bö/˘æ-≠p-ªp‹t"

	)

82 
	#HCSR04_BANK
 
NXCTRL_P8


	)

83 
	#HCSR04_MAX_CNT
 1

	)

84 
	#HCSR04_MAX_DIST
 100

	)

86 
	#TRIGGER_PIN
 
NXCTRL_PIN11


	)

87 
	#ECHO_PIN
 
NXCTRL_PIN15


	)

89 
	#TMP36_PIN
 
NXCTRL_A1


	)

91 
	#DPY_IDLE_COUNT_MAX
 300

	)

92 
	#MIN_ACTION_DURATION
 180

	)

93 
	#TMP36_UPDATE_PERIOD
 20

	)

94 
	#TMP36_DELTA
 0.00

	)

95 
	#CPUTEMP_BASE
 56.0

	)

96 
	#CPUTEMP_SSG
 60.0

	)

97 
	#SSG_DELTA
 0.00

	)

99 
	#MENU_IDX_CNT
 5

	)

101 
	#MENU_IDX_TURN_OFF_MENU
 0

	)

102 
	#MENU_IDX_CONN_INFO
 1

	)

103 
	#MENU_IDX_SYSINFO
 2

	)

104 
	#MENU_IDX_HCSR04
 3

	)

106 
	#MENU_IDX_ESHUTDOWN
 4

	)

108 
	#FONT_WIDTH
 6

	)

109 
	#FONT_HEIGHT
 8

	)

111 
	gMENU_BUTTON_STATE
 = 
NXCTRL_LOW
;

112 
	gEXEC_BUTTON_STATE
 = 
NXCTRL_LOW
;

113 
	gLAST_ACTION_TIME
 = 0;

115 
	gDPY_STATE
 = 
NXCTRL_OFF
;

116 
	gDPY_IDLE_COUNT
 = 0;

118 
	gMENU_IDX
 = 
MENU_IDX_TURN_OFF_MENU
;

119 
NXCTRL_BOOL
 
	gIN_EXEC
 = 
NXCTRL_FALSE
;

121 
	gTMP36_VOLTAGE
 = 0;

122 
	gTMP36_UPDATE_CNT
 = 0;

124 
NXCTRLOLED
 
	gOLED
;

125 
	gnSPIFD
;

128 
	$__CPUTemp
 (
NXCTRL_VOID
) {

129 c⁄° *
psz
 = "/sys/class/hwmon/hwmon0/device/temp1_input";

131 
nFD
 = 
	`›í
(
psz
, 
O_RDONLY
);

132 i‡(
nFD
 < 0) {

133 
	`sy°em
("rmmodám335x_bandgap");

134 
	`sy°em
("modprobeám335x_bandgap");

137 
rch
[8];

138 
n
 = 
	`ªad
(
nFD
, 
rch
, 7);

139 
rch
[
n
] = 0;

140 
n
 = 
	`©oi
(
rch
);

141 
	`˛o£
(
nFD
);

142 i‡(
n
 > 120000) {

143 
	`sy°em
("rmmodám335x_bandgap");

144 
	`sy°em
("modprobeám335x_bandgap");

147  
n
;

150 
	}
}

152 
NXCTRL_BOOL


153 
	$__NextA˘i⁄Okay
 (
NXCTRL_VOID
) {

154 
time•ec
 
tm
;

155 
timeInMûlis
;

156 
	`˛ock_gëtime
(, 
time•ec
 *);

157 
	`˛ock_gëtime
(
_POSIX_CPUTIME
, &
tm
);

158 
timeInMûlis
 = 
tm
.
tv_£c
 * 1000 +Åm.
tv_n£c
/1000000;

159 i‡((
timeInMûlis
 - 
LAST_ACTION_TIME
Ë> 
MIN_ACTION_DURATION
) {

160 
LAST_ACTION_TIME
 = 
timeInMûlis
;

161  
NXCTRL_TRUE
;

163  
NXCTRL_FALSE
;

164 
	}
}

166 
NXCTRL_VOID


167 
	$__WrôeSåögToOLED
 (c⁄° *
psz
) {

168 
n
 = 
	`°æí
(
psz
);

169 
i
;

170 
i
 = 0; i < 
n
; i++)

171 
	`NXCTRLOLEDWrôe
(&
OLED
, 
psz
[
i
]);

172 
	}
}

174 
NXCTRL_VOID


175 
	$__WrôeD©eTime
 (
NXCTRL_VOID
) {

176 
i
;

177 
rch
[22];

178 
time_t
 
t
 = 
	`time
(
NULL
);

179 
tm
Åm = *
	`loˇ…ime
(&
t
);

180 
sysöfo
 
si
;

181 
fTmp
 = (
TMP36_VOLTAGE
 + 
TMP36_DELTA
 - 0.5) * 100;

182 
fCPUTemp
 = 
	`__CPUTemp
()/1000.0;

184 
fCPUTemp
 = (fCPUTemp > 120) ? (fCPUTemp - 74) : fCPUTemp;

185 i‡(
fCPUTemp
 < 
CPUTEMP_SSG
)

186 
fTmp
 -(
fCPUTemp
 > 
CPUTEMP_BASE
) ? (fCPUTemp - CPUTEMP_BASE) : 0;

188 
fTmp
 -(
fCPUTemp
 > 
CPUTEMP_BASE
Ë? (fCPUTem∞- CPUTEMP_BASE + 
SSG_DELTA
) : 0;

190 
	`sysöfo
(&
si
);

191 i‡(
fTmp
 < -30 || fTmp > 50) fTmp = 0;

192 
	`•rötf
(
rch
,

194 (
tm
.
tm_m⁄
 + 1) > 9 ? "" : "0",Åm.tm_mon + 1,

195 
tm
.
tm_mday
 > 9 ? "" : "0",Åm.tm_mday,

196 
tm
.
tm_hour
 > 9 ? "" : "0",Åm.tm_hour,

197 
tm
.
tm_mö
 > 9 ? "" : "0",Åm.tm_min,

198 
tm
.
tm_£c
 > 9 ? "" : "0",Åm.tm_sec,

199 
fTmp
);

200 
i
 = 
	`°æí
(
rch
); i < 21; i++)

201 
rch
[
i
] = ' ';

202 
rch
[21] = 0;

203 
	`NXCTRLOLEDSëCurs‹
(&
OLED
, 0, 0);

204 
	`__WrôeSåögToOLED
(
rch
);

205 
	}
}

207 
NXCTRL_VOID


208 
	$MENU_ACTION_TURN_OFF_MENU
 (
NXCTRL_VOID
) {

209 
DPY_IDLE_COUNT
 = 0;

210 
	`NXCTRLOLEDCÀ¨Di•œy
(&
OLED
);

211 
	`NXCTRLOLEDUpd©eDi•œy
(&
OLED
);

212 
DPY_STATE
 = 
NXCTRL_OFF
;

213 
MENU_IDX
 = 
MENU_IDX_TURN_OFF_MENU
;

214 
LAST_ACTION_TIME
 = 0;

215 
	}
}

217 
NXCTRL_BOOL


218 
	$__GëMacAddªss
 (*
pszIFName
, *
pszMacIP
) {

219 
rchIFName
[
BUFSIZ
];

220 
FILE
 *
pFûe
;

221 
i
;

223 
	`•rötf
(
rchIFName
, "/sys/˛ass/√t/%s/addªss", 
pszIFName
);

224 
pFûe
 = 
	`f›í
(
rchIFName
, "r");

225 i‡(!
pFûe
)

226  
NXCTRL_FALSE
;

228 
	`fsˇnf
(
pFûe
, "%s", 
pszMacIP
);

229 
	`f˛o£
(
pFûe
);

230 
i
 = 0; i < 
	`°æí
(
pszMacIP
); i++)

231 
pszMacIP
[
i
] = 
	`touµî
(pszMacIP[i]);

232  
NXCTRL_TRUE
;

233 
	}
}

235 
NXCTRL_BOOL


236 
	$__GëDeÁu…GW
 (*
pszGW
) {

237 
FILE
 *
pFûe
 = 
	`f›í
("/proc/net/route", "r");

238 
rch
[1024];

239 
rchIFa˚
[32], 
rchDe°
[32], 
rchGW
[32];

240 
NXCTRL_BOOL
 
bFound
 = 
NXCTRL_OFF
;

241 
i0
, 
i1
, 
i2
, 
i3
;

243 i‡(!
pFûe
)

244  
NXCTRL_FALSE
;

246 
	`fgës
(
rch
, 1023, 
pFûe
)) {

247 
	`ssˇnf
(
rch
, "%†%†%s", 
rchIFa˚
, 
rchDe°
, 
rchGW
);

248 i‡(!
	`°rcmp
(
rchDe°
, "00000000")) {

249 
bFound
 = 
NXCTRL_ON
;

253 
	`f˛o£
(
pFûe
);

255 i‡(!
bFound
)

256  
NXCTRL_FALSE
;

258 
	`ssˇnf
(
rchGW
, "%2x%2x%2x%2x", &
i0
, &
i1
, &
i2
, &
i3
);

259 
	`•rötf
(
pszGW
, "%d.%d.%d.%d", 
i3
, 
i2
, 
i1
, 
i0
);

261  
NXCTRL_TRUE
;

262 
	}
}

264 
NXCTRL_VOID


265 
	$__PögToDeÁu…GW
 (
NXCTRL_VOID
) {

266 
rch
[1024], 
rchGW
[32];

267 i‡(
	`__GëDeÁu…GW
(
rchGW
)) {

268 
	`•rötf
(
rch
, "pög -¯1 -W 1 %†>& /dev/nuŒ", 
rchGW
);

269 
	`sy°em
(
rch
);

271 
	}
}

273 
NXCTRL_VOID


274 
	$MENU_ACTION_CONN_INFO
 (
NXCTRL_VOID
) {

275 
iÁddrs
 *
iÁddr
, *
iÁ
;

276 
n
;

277 
rchHo°
[
NI_MAXHOST
];

278 
rchBuf„r
[1024];

279 
rchGW
[32];

280 
rchMacIP
[20];

282 
	`NXCTRLOLEDCÀ¨Di•œy
(&
OLED
);

283 
	`NXCTRLOLEDSëCurs‹
(&
OLED
, 0, 0);

285 i‡(
	`gëiÁddrs
(&
iÁddr
) == -1) {

286 
	`__WrôeSåögToOLED
("ERROR IN CONN INFO");

287 
	`NXCTRLOLEDUpd©eDi•œy
(&
OLED
);

291 
	`NXCTRLOLEDSëCurs‹
(&
OLED
, 
FONT_WIDTH
*3, 0);

292 
	`__WrôeSåögToOLED
("CONNECTION INFO\n\n");

294 
iÁ
 = 
iÁddr
; iÁ !
NULL
; iÁ = iÁ->
iÁ_√xt
) {

295 i‡(
iÁ
->
iÁ_addr
 =
NULL
) ;

296 
n
 = 
	`gë«meöfo
(
iÁ
->
iÁ_addr
, (
sockaddr_ö
),

297 
rchHo°
, 
NI_MAXHOST
, 
NULL
, 0, 
NI_NUMERICHOST
);

298 i‡(
n
 == 0) {

299 
	`mem£t
(
rchBuf„r
, 0, 1024);

300 
	`•rötf
(
rchBuf„r
, "%5s: %s\n", 
iÁ
->
iÁ_«me
, 
rchHo°
);

301 
	`__WrôeSåögToOLED
(
rchBuf„r
);

304 i‡(
	`__GëDeÁu…GW
(
rchGW
)) {

305 
	`•rötf
(
rchBuf„r
, "%5s: %s\n", "gw", 
rchGW
);

306 
	`__WrôeSåögToOLED
(
rchBuf„r
);

309 
	`NXCTRLOLEDSëCurs‹
(&
OLED
, 0, 55);

310 i‡(
	`__GëMacAddªss
("wœn0", 
rchMacIP
)) {

311 
	`•rötf
(
rchBuf„r
, " %s", 
rchMacIP
);

312 
	`__WrôeSåögToOLED
(
rchBuf„r
);

315 
	`NXCTRLOLEDUpd©eDi•œy
(&
OLED
);

316 
	`__PögToDeÁu…GW
();

317 
	}
}

319 
NXCTRL_VOID


320 
	$MENU_ACTION_SYSINFO
 (
NXCTRL_VOID
) {

321 
sysöfo
 
si
;

322 
°©vfs
 
°vfs
;

323 
d
, 
h
, 
m
;

324 
t
;

325 
rch
[22];

327 
	`°©vfs
("/", &
°vfs
);

328 
	`sysöfo
(&
si
);

329 
t
 = 
	`__CPUTemp
() / 1000;

330 
d
 = 
si
.
u±ime
/(3600*24);

331 
h
 = (
si
.
u±ime
 - (
d
*3600*24))/3600;

332 
m
 = (
si
.
u±ime
 - (
d
*3600*24Ë- (
h
*3600))/60;

333 
	`NXCTRLOLEDCÀ¨Di•œy
(&
OLED
);

334 
	`NXCTRLOLEDSëCurs‹
(&
OLED
, 4*
FONT_WIDTH
, 0);

335 
	`__WrôeSåögToOLED
("SYSTEM STATUS\n");

337 
	`NXCTRLOLEDSëCurs‹
(&
OLED
, 0, 
FONT_HEIGHT
 + 8);

339 
	`•rötf
(
rch
, " LDA: %2.1f %2.1f %2.1f\n",

340 
si
.
lﬂds
[0]/65536.0,

341 
si
.
lﬂds
[1]/65536.0,

342 
si
.
lﬂds
[2]/65536.0);

343 
	`__WrôeSåögToOLED
(
rch
);

345 
	`•rötf
(
rch
, " RAM: %03d %03d %03d\n",

346 ()(
si
.
tŸÆøm
/1024/1024),

347 ()(
si
.
buf„ºam
/1024/1024),

348 ()(
si
.
‰ìøm
/1024/1024));

349 
	`__WrôeSåögToOLED
(
rch
);

351 
	`•rötf
(
rch
, " DSK: %1.1f %1.1f %1.1f\n",

352 
°vfs
.
f_blocks
*°vfs.
f_‰size
/1024/1024/1024.0,

353 (
°vfs
.
f_blocks
 - stvfs.
f_bavaû
)*°vfs.
f_‰size
/1024/1024/1024.0,

354 
°vfs
.
f_bavaû
*°vfs.
f_‰size
/1024/1024/1024.0);

355 
	`__WrôeSåögToOLED
(
rch
);

357 
	`•rötf
(
rch
, " RUN: %3dD %02dH %02dM\n", 
d
, 
h
, 
m
);

358 
	`__WrôeSåögToOLED
(
rch
);

360 
	`•rötf
(
rch
, " TMP: %3dC\n", 
t
);

361 
	`__WrôeSåögToOLED
(
rch
);

363 
	`NXCTRLOLEDUpd©eDi•œy
(&
OLED
);

364 
	}
}

366 
NXCTRL_VOID


367 
	$__CÀ¨Di•œy
 (
NXCTRL_VOID
) {

368 
	`NXCTRLOLEDCÀ¨Di•œy
(&
OLED
);

369 
	}
}

371 
NXCTRL_VOID


372 
	$__Upd©eDi•œy
 (
NXCTRL_VOID
) {

373 
	`NXCTRLOLEDUpd©eDi•œy
(&
OLED
);

374 
	}
}

376 
NXCTRL_VOID


377 
	$__SëCurs‹
 (
NXCTRL_UINT8
 
nX
, NXCTRL_UINT8 
nY
) {

378 
	`NXCTRLOLEDSëCurs‹
(&
OLED
, 
nX
, 
nY
);

379 
	}
}

381 
NXCTRL_VOID


382 
	$__DøwPixñ
 (
NXCTRL_UINT8
 
nX
, NXCTRL_UINT8 
nY
, 
NXCTRL_BOOL
 
⁄Off
) {

383 
	`NXCTRLOLEDDøwPixñ
(&
OLED
, 
nX
, 
nY
, 
⁄Off
);

384 
	}
}

386 
NXCTRL_VOID


387 
	$__DøwLöe
 (
NXCTRL_UINT8
 
nX0
, NXCTRL_UINT8 
nY0
,

388 
NXCTRL_UINT8
 
nX1
, NXCTRL_UINT8 
nY1
, 
NXCTRL_BOOL
 
⁄Off
) {

389 
	`NXCTRLOLEDDøwLöe
(&
OLED
, 
nX0
, 
nY0
, 
nX1
, 
nY1
, 
⁄Off
);

390 
	}
}

392 
NXCTRL_VOID


393 
	$__DøwBôm≠
 (
NXCTRL_UINT8
 
nX
, NXCTRL_UINT8 
nY
,

394 
NXCTRL_UINT8
 *
pBôm≠
,

395 
NXCTRL_UINT8
 
nW
, NXCTRL_UINT8 
nH
,

396 
NXCTRL_BOOL
 
⁄Off
) {

398 
NXCTRLBITARRAY
 
¨rBôs
;

399 
i
, 
j
;

400 
¨rBôs
.
¨r
 = 
pBôm≠
;

401 
¨rBôs
.
nBôs
 = 
nW
 * 
nH
;

402 
i
 = 
nX
; i < (nX + 
nW
); i++) {

403 
j
 = 
nY
; j < (nY + 
nH
); j++) {

404 i‡(
	`NXCTRLBITARRAYGë
(&
¨rBôs
, 
i
 + 
j
 * 
nW
))

405 
	`NXCTRLOLEDDøwPixñ
(&
OLED
, 
i
, 
j
, 
NXCTRL_ON
);

407 
	`NXCTRLOLEDDøwPixñ
(&
OLED
, 
i
, 
j
, 
NXCTRL_OFF
);

410 
	}
}

412 
NXCTRL_VOID


413 
	$__DøwB™√r
 (
NXCTRL_VOID
) {

414 
	`NXCTRLOLEDSëB™√r
(&
OLED
);

415 
	}
}

417 
NXCTRL_VOID


418 
	$MENU_ACTION_RUN_APP
 (
NXCTRL_VOID
) {

419 c⁄° *
pszAµP©h
 = 
USR_APP_PATH
;

420 
NXCTRL_VOID
 *
pH™dÀ
 = 
NULL
;

421 
NXCTRLAPP
 
≠p
;

422 
APPINITFN
 
p‚Inô
;

423 
APPRUNFN
 
p‚Run
;

424 
APPCLEANFN
 
p‚CÀ™
;

426 
pH™dÀ
 = 
	`dl›í
(
pszAµP©h
, 
RTLD_LAZY
);

427 i‡(!
pH™dÀ
) {

428 
	`Ârötf
(
°dîr
, "ˇ¬ŸÜﬂd %s\n", 
pszAµP©h
);

432 
p‚Inô
 = (
APPINITFN
)
	`dlsym
(
pH™dÀ
, 
APPINITFUNCTIONNAME
);

433 
p‚Run
 = (
APPRUNFN
)
	`dlsym
(
pH™dÀ
, 
APPRUNFUNCTIONNAME
);

434 
p‚CÀ™
 = (
APPCLEANFN
)
	`dlsym
(
pH™dÀ
, 
APPCLEANFUNCTIONNAME
);

436 
≠p
.
pD©a
 = 
NULL
;

437 
≠p
.
pöMux
 = (
APPPINMUX
)
NXCTRLPöMux
;

438 
≠p
.
pöMode
 = (
APPPINMODE
)
NXCTRLPöMode
;

439 
≠p
.
¶ìp
 = (
APPSLEEP
)
NXCTRLSÀï
;

440 
≠p
.
digôÆRód
 = (
APPDIGITALREAD
)
NXCTRLDigôÆRód
;

441 
≠p
.
digôÆWrôe
 = (
APPDIGITALWRITE
)
NXCTRLDigôÆWrôe
;

442 
≠p
.
™ÆogRód
 = (
APPANALOGREAD
)
NXCTRLA«logRód
;

443 
≠p
.
™ÆogWrôe
 = (
APPANALOGWRITE
)
NXCTRLA«logWrôe
;

444 
≠p
.
£rvoWrôe
 = (
APPSERVOWRITE
)
NXCTRLSîvoWrôe
;

446 
≠p
.
˛órDi•œy
 = (
APPCLEARDPY
)
__CÀ¨Di•œy
;

447 
≠p
.
upd©eDi•œy
 = (
APPUPDATEDPY
)
__Upd©eDi•œy
;

448 
≠p
.
£tCurs‹
 = (
APPSETCURSOR
)
__SëCurs‹
;

449 
≠p
.
wrôeSTR
 = (
APPWRITESTR
)
__WrôeSåögToOLED
;

451 
≠p
.
døwPixñ
 = (
APPDRAWPIXEL
)
__DøwPixñ
;

452 
≠p
.
døwLöe
 = (
APPDRAWLINE
)
__DøwLöe
;

453 
≠p
.
døwBôm≠
 = (
APPDRAWBITMAP
)
__DøwBôm≠
;

454 
≠p
.
døwB™√r
 = (
APPDRAWBANNER
)
__DøwB™√r
;

456 i‡(!
p‚Inô
 || !
p‚Run
 || !
p‚CÀ™
) {

457 
	`Ârötf
(
°dîr
, "cannot findÑequired functions\n");

458 
	`dl˛o£
(
pH™dÀ
);

462 
	`p‚Inô
(&
≠p
);

463 
	`p‚Run
(&
≠p
);

464 
	`p‚CÀ™
(&
≠p
);

466 
	`dl˛o£
(
pH™dÀ
);

467 
	}
}

470 
	$__FëchDi°™˚
 (
NXCTRL_VOID
) {

471 
nRë
;

472 
çruss_ötc_öôd©a
 
nINTC
 = 
PRUSS_INTC_INITDATA
;

473 *
pPRUD©aMem
 = 
NULL
;

474 *
≤PRUD©a
 = 
NULL
;

475 
fDi°
 = 0.0f;

478 i‡((
nRë
 = 
	`¥ussdrv_öô
())) {

479 
	`Ârötf
(
°dîr
, "prussdrv_init() failed\n");

484 i‡((
nRë
 = 
	`¥ussdrv_›í
(
PRU_EVTOUT_0
))) {

485 
	`Ârötf
(
°dîr
, "¥ussdrv_›í(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
));

490 i‡((
nRë
 = 
	`¥ussdrv_¥uötc_öô
(&
nINTC
))) {

491 
	`Ârötf
(
°dîr
, "prussdrv_pruintc_init() failed\n");

495 
	`¥ussdrv_m≠_¥umem
(
PRUSS0_PRU0_DATARAM
, &
pPRUD©aMem
);

496 
≤PRUD©a
 = (*)
pPRUD©aMem
;

499 i‡((
nRë
 = 
	`¥ussdrv_exec_¥ogøm
(
PRU_NUM
, 
PRU_PATH
))) {

500 
	`Ârötf
(
°dîr
, "prussdrv_exec_program() failed\n");

504 
	`¥ussdrv_¥u_waô_evít
(
PRU_EVTOUT_0
);

505 i‡(
	`¥ussdrv_¥u_˛ór_evít
(
PRU_EVTOUT_0
, 
PRU0_ARM_INTERRUPT
))

506 
	`Ârötf
(
°dîr
, "prussdrv_pru_clear_event() failed\n");

507 
fDi°
 = ()
≤PRUD©a
[0]/2.0/29.1;

510 i‡(
	`¥ussdrv_¥u_dißbÀ
(
PRU_NUM
))

511 
	`Ârötf
(
°dîr
, "prussdrv_pru_disable() failed\n");

514 i‡(
	`¥ussdrv_exô
())

515 
	`Ârötf
(
°dîr
, "prussdrv_exit() failed\n");

517  
fDi°
;

518 
	}
}

520 
NXCTRL_VOID


521 
	$MENU_ACTION_HCSR04
 (
NXCTRL_VOID
) {

522 
i
, 
n
 = 
HCSR04_MAX_CNT
;

523 
fs
 = 0;

524 
rch
[22];

526 
i
 = 0; i < 
n
; i++) {

527 
fs
 +()
	`__FëchDi°™˚
();

529 
fs
 /
n
;

531 i‡(
fs
 > 
HCSR04_MAX_DIST
)

532 
	`•rötf
(
rch
, "DIST: > %d cm\n", 
HCSR04_MAX_DIST
);

534 
	`•rötf
(
rch
, "DIST: %4.1‡cm\n", 
fs
);

536 
	`NXCTRLOLEDCÀ¨Di•œy
(&
OLED
);

537 
	`NXCTRLOLEDSëCurs‹
(&
OLED
, 4*
FONT_WIDTH
, 3*
FONT_HEIGHT
);

538 
	`__WrôeSåögToOLED
(
rch
);

539 
	`NXCTRLOLEDUpd©eDi•œy
(&
OLED
);

540 
	}
}

542 
NXCTRL_VOID


543 
	$MENU_ACTION_ESHUTDOWN
 (
NXCTRL_VOID
) {

544 
	`NXCTRLOLEDCÀ¨Di•œy
(&
OLED
);

545 
	`NXCTRLOLEDSëCurs‹
(&
OLED
, 3*
FONT_WIDTH
, 3*
FONT_HEIGHT
);

546 
	`__WrôeSåögToOLED
("TURNING OFF...");

547 
	`NXCTRLOLEDUpd©eDi•œy
(&
OLED
);

549 
	`sync
();

550 
	`sync
();

551 
	`sync
();

552 
	`NXCTRLSÀï
(500, 0);

553 
	`NXCTRLOLEDCÀ¨Di•œy
(&
OLED
);

554 
	`NXCTRLOLEDUpd©eDi•œy
(&
OLED
);

555 
	`ªboŸ
(
RB_POWER_OFF
);

557 
	}
}

559 
NXCTRL_VOID


560 
	$INTC_HANDLER
 (
NXCTRL_VOID
) {

561 
	`NXCTRLOLEDCÀ¨Di•œy
(&
OLED
);

562 
	`NXCTRLOLEDUpd©eDi•œy
(&
OLED
);

563 
	`˛o£
(
nSPIFD
);

564 
	}
}

566 
NXCTRL_VOID


567 
	$__Di•œyMíu
 (
NXCTRL_VOID
) {

568 
chSñ
 = 16;

569 
	`NXCTRLOLEDCÀ¨Di•œy
(&
OLED
);

570 
	`__WrôeD©eTime
();

571 
	`NXCTRLOLEDDøwLöe
(&
OLED
, 4, 10, 123, 10, 
NXCTRL_ON
);

572 
	`NXCTRLOLEDSëCurs‹
(&
OLED
, 0, 2*
FONT_HEIGHT
);

574 i‡(
MENU_IDX
 =
MENU_IDX_TURN_OFF_MENU
) {

575 
	`NXCTRLOLEDWrôe
(&
OLED
, 
chSñ
);

576 
	`__WrôeSåögToOLED
(" MENU OFF\n");

578 
	`__WrôeSåögToOLED
(" MENU OFF\n");

580 i‡(
MENU_IDX
 =
MENU_IDX_CONN_INFO
) {

581 
	`NXCTRLOLEDWrôe
(&
OLED
, 
chSñ
);

582 
	`__WrôeSåögToOLED
(" CONNECTION INFO\n");

584 
	`__WrôeSåögToOLED
(" CONNECTION INFO\n");

586 i‡(
MENU_IDX
 =
MENU_IDX_SYSINFO
) {

587 
	`NXCTRLOLEDWrôe
(&
OLED
, 
chSñ
);

588 
	`__WrôeSåögToOLED
(" SYSTEM STATUS\n");

590 
	`__WrôeSåögToOLED
(" SYSTEM STATUS\n");

592 i‡(
MENU_IDX
 =
MENU_IDX_HCSR04
) {

593 
	`NXCTRLOLEDWrôe
(&
OLED
, 
chSñ
);

594 
	`__WrôeSåögToOLED
(" HCSR04 DISTANCE\n");

596 
	`__WrôeSåögToOLED
(" HCSR04 DISTANCE\n");

599 i‡(
MENU_IDX
 =
MENU_IDX_USERAPP
) {

600 
	`NXCTRLOLEDWrôe
(&
OLED
, 
chSñ
);

601 
	`__WrôeSåögToOLED
(" USER APPLICATION\n");

603 
	`__WrôeSåögToOLED
(" USER APPLICATION\n");

606 i‡(
MENU_IDX
 =
MENU_IDX_ESHUTDOWN
) {

607 
	`NXCTRLOLEDWrôe
(&
OLED
, 
chSñ
);

608 
	`__WrôeSåögToOLED
(" TURN OFF\n");

610 
	`__WrôeSåögToOLED
(" TURN OFF\n");

611 
	}
}

613 
NXCTRL_VOID


614 
	$NXCTRLSëup
 (
NXCTRL_VOID
) {

615 
uöt8_t
 
nLSB
;

616 
uöt32_t
 
nS≥ed
, 
nSPIMode
;

618 
	`NXCTRLPöMux
(
HCSR04_BANK
, 
TRIGGER_PIN
, 
NXCTRL_MODE6
, 
NXCTRL_PULLDN
, 
NXCTRL_LOW
);

619 
	`NXCTRLPöMux
(
HCSR04_BANK
, 
ECHO_PIN
, 
NXCTRL_MODE6
, 
NXCTRL_PULLDN
, 
NXCTRL_HIGH
);

621 
	`NXCTRLPöMux
(
MENU_BUTTON_BANK
, 
MENU_BUTTON_PIN
, 
NXCTRL_MODE7
, 
NXCTRL_PULLDN
, 
NXCTRL_LOW
);

622 
	`NXCTRLPöMux
(
EXEC_BUTTON_BANK
, 
EXEC_BUTTON_PIN
, 
NXCTRL_MODE7
, 
NXCTRL_PULLDN
, 
NXCTRL_LOW
);

623 
	`NXCTRLPöMode
(
MENU_BUTTON_BANK
, 
MENU_BUTTON_PIN
, 
NXCTRL_INPUT_PULLDN
);

624 
	`NXCTRLPöMode
(
EXEC_BUTTON_BANK
, 
EXEC_BUTTON_PIN
, 
NXCTRL_INPUT_PULLDN
);

626 
	`NXCTRLPöMux
(
OLED_BANK
, 
SPI_CS0
, 
NXCTRL_MODE0
, 
NXCTRL_PULLDN
, 
NXCTRL_LOW
);

627 
	`NXCTRLPöMux
(
OLED_BANK
, 
SPI_D1
, 
NXCTRL_MODE0
, 
NXCTRL_PULLDN
, 
NXCTRL_LOW
);

628 
	`NXCTRLPöMux
(
OLED_BANK
, 
SPI_D0
, 
NXCTRL_MODE0
, 
NXCTRL_PULLUP
, 
NXCTRL_HIGH
);

629 
	`NXCTRLPöMux
(
OLED_BANK
, 
SPI_CLK
, 
NXCTRL_MODE0
, 
NXCTRL_PULLUP
, 
NXCTRL_HIGH
);

631 
nSPIFD
 = 
	`›í
("/dev/•idev1.0", 
O_RDWR
);

633 
nLSB
 = 0;

634 
	`io˘l
(
nSPIFD
, 
SPI_IOC_WR_LSB_FIRST
, &
nLSB
);

635 
nS≥ed
 = 20000000;

636 
	`io˘l
(
nSPIFD
, 
SPI_IOC_WR_MAX_SPEED_HZ
, &
nS≥ed
);

637 
nSPIMode
 = 
SPI_MODE_0
;

638 
	`io˘l
(
nSPIFD
, 
SPI_IOC_WR_MODE
, &
nSPIMode
);

640 
	`NXCTRLOLEDInô
(&
OLED
,

641 
OLED_BANK
, 
OLED_DC
, OLED_BANK, 
OLED_RST
,

642 
nSPIFD
);

644 
	`NXCTRLSëSIGINTH™dÀr
(
INTC_HANDLER
);

645 
	`NXCTRLSëSIGTERMH™dÀr
(
INTC_HANDLER
);

647 
	`__NextA˘i⁄Okay
();

648 
	`NXCTRLOLEDDi•œyN‹mÆ
(&
OLED
);

649 
	`__Di•œyMíu
();

650 
	`NXCTRLOLEDUpd©eDi•œy
(&
OLED
);

651 
DPY_STATE
 = 
NXCTRL_ON
;

653 
TMP36_VOLTAGE
 = 
	`NXCTRLA«logRód
(
TMP36_PIN
)*1.8/4096.0;

654 
	}
}

656 
NXCTRL_VOID


657 
	$NXCTRLLo›
 (
NXCTRL_VOID
) {

658 
nTimeUpd©eCou¡
 = 0;

659 i‡(
MENU_BUTTON_STATE
 =
NXCTRL_LOW
) {

660 i‡(
	`NXCTRLDigôÆRód
(
MENU_BUTTON_BANK
, 
MENU_BUTTON_PIN
Ë=
NXCTRL_HIGH
) {

661 
MENU_BUTTON_STATE
 = 
NXCTRL_HIGH
;

662 
DPY_IDLE_COUNT
 = 0;

665 i‡(
	`NXCTRLDigôÆRód
(
MENU_BUTTON_BANK
, 
MENU_BUTTON_PIN
Ë=
NXCTRL_LOW
) {

666 
MENU_BUTTON_STATE
 = 
NXCTRL_LOW
;

667 
DPY_IDLE_COUNT
 = 0;

671 i‡(
EXEC_BUTTON_STATE
 =
NXCTRL_LOW
) {

672 i‡(
	`NXCTRLDigôÆRód
(
EXEC_BUTTON_BANK
, 
EXEC_BUTTON_PIN
Ë=
NXCTRL_HIGH
) {

673 
EXEC_BUTTON_STATE
 = 
NXCTRL_HIGH
;

674 
DPY_IDLE_COUNT
 = 0;

677 i‡(
	`NXCTRLDigôÆRód
(
EXEC_BUTTON_BANK
, 
EXEC_BUTTON_PIN
Ë=
NXCTRL_LOW
) {

678 
EXEC_BUTTON_STATE
 = 
NXCTRL_LOW
;

679 
DPY_IDLE_COUNT
 = 0;

683 i‡(
DPY_STATE
 =
NXCTRL_OFF
) {

684 i‡(
MENU_BUTTON_STATE
 =
NXCTRL_HIGH
) {

685 
DPY_IDLE_COUNT
 = 0;

686 
	`NXCTRLOLEDDi•œyN‹mÆ
(&
OLED
);

687 
	`__Di•œyMíu
();

688 
	`NXCTRLOLEDUpd©eDi•œy
(&
OLED
);

689 
DPY_STATE
 = 
NXCTRL_ON
;

690 
	`__NextA˘i⁄Okay
();

693 i‡(
MENU_BUTTON_STATE
 =
NXCTRL_HIGH
 || 
EXEC_BUTTON_STATE
 == NXCTRL_HIGH) {

694 i‡(
MENU_BUTTON_STATE
 =
NXCTRL_HIGH
) {

695 i‡(
	`__NextA˘i⁄Okay
()) {

696 i‡(!
IN_EXEC
)

697 
MENU_IDX
++;

699 
IN_EXEC
 = 
NXCTRL_FALSE
;

700 i‡(
MENU_IDX
 >
MENU_IDX_CNT
)

701 
MENU_IDX
 = 
MENU_IDX_TURN_OFF_MENU
;

702 
	`__Di•œyMíu
();

703 
	`NXCTRLOLEDUpd©eDi•œy
(&
OLED
);

706 i‡(
EXEC_BUTTON_STATE
 =
NXCTRL_HIGH
) {

707 i‡(
	`__NextA˘i⁄Okay
()) {

708 i‡(!
IN_EXEC
) {

709 
IN_EXEC
 = 
NXCTRL_TRUE
;

710 
MENU_IDX
) {

711 
MENU_IDX_TURN_OFF_MENU
:

712 
	`MENU_ACTION_TURN_OFF_MENU
();

713 
IN_EXEC
 = 
NXCTRL_FALSE
;

715 
MENU_IDX_CONN_INFO
:

716 
	`MENU_ACTION_CONN_INFO
();

718 
MENU_IDX_SYSINFO
:

719 
	`MENU_ACTION_SYSINFO
();

721 
MENU_IDX_HCSR04
:

722 
	`MENU_ACTION_HCSR04
();

725 
MENU_IDX_USERAPP
:

726 
	`MENU_ACTION_RUN_APP
();

729 
MENU_IDX_ESHUTDOWN
:

730 
	`MENU_ACTION_ESHUTDOWN
();

737 
DPY_IDLE_COUNT
++;

738 i‡(
DPY_IDLE_COUNT
 > 
DPY_IDLE_COUNT_MAX
)

739 
	`MENU_ACTION_TURN_OFF_MENU
();

741 
nTimeUpd©eCou¡
++;

742 i‡(
nTimeUpd©eCou¡
 > 9) {

743 
nTimeUpd©eCou¡
 = 0;

744 i‡(!
IN_EXEC
) {

745 
	`__WrôeD©eTime
();

746 
	`NXCTRLOLEDUpd©eDi•œy
(&
OLED
);

753 
TMP36_UPDATE_CNT
++;

754 i‡(
TMP36_UPDATE_CNT
 > 
TMP36_UPDATE_PERIOD
) {

755 
TMP36_UPDATE_CNT
 = 0;

756 
TMP36_VOLTAGE
 = 
	`NXCTRLA«logRód
(
TMP36_PIN
)*1.8/4096.0;

759 
	`NXCTRLSÀï
(100, 0);

760 
	}
}

763 
	$maö
 () {

764  
	`NXCTRLMaö
();

765 
	}
}

	@dpybmp-test.c

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 
	~<°rögs.h
>

27 
	~<NXCTRL.h
>

28 
	~<NXCTRL_ﬁed.h
>

29 
	~<NXCTRL_bôAºay.h
>

31 
	~<uni°d.h
>

32 
	~<°döt.h
>

33 
	~<f˙é.h
>

34 
	~<sys/io˘l.h
>

35 
	~<löux/ty≥s.h
>

36 
	~<löux/•i/•idev.h
>

38 
	~<as£π.h
>

39 
	~<ãrmios.h
>

40 
	~<sys/°©.h
>

41 
	~<libnsbmp.h
>

43 
	#BNK
 
NXCTRL_P9


	)

45 
	#SPI_CS0
 17

	)

46 
	#SPI_D0
 21

	)

47 
	#SPI_D1
 18

	)

48 
	#SPI_CLK
 22

	)

50 
	#OLED_DC
 15

	)

51 
	#OLED_RST
 13

	)

52 
	#OLED_CS
 
SPI_CS0


	)

53 
	#OLED_DATA
 
SPI_D1


	)

54 
	#OLED_CLK
 
SPI_CLK


	)

56 *
¸óãBôm≠
 (
nWidth
, 
nHeight
, 
nSèã
);

57 
de°royBôm≠
 (*
pBôm≠
);

58 *
gëBôm≠Buf„r
 (*
pBôm≠
);

59 
size_t
 
gëBôm≠BPP
 (*
pBôm≠
);

61 *
lﬂdBôm≠Fûe
 (c⁄° *
pszP©h
, 
size_t
 *
≤Size
);

62 
w¨nög
 (c⁄° *
pszCtx
, 
bmp_ªsu…
 
nCode
);

64 
NXCTRLOLED
 
	gﬁed
;

65 
	gnFD
;

67 
	gBIG_BITMAP_W
 = 0;

68 
	gBIG_BITMAP_H
 = 0;

70 
NXCTRLBITARRAY
 
	g¨rBôs
;

72 
	#SCROLL_STEP_DIV
 4

	)

74 
NXCTRL_VOID


75 
	$__DøwBigBôm≠
 (
nX
, 
nY
) {

76 
i
, 
j
;

78 i‡((
nX
 + 
OLED_WIDTH
Ë> 
BIG_BITMAP_W
)

79 
nX
 = 
BIG_BITMAP_W
 - 
OLED_WIDTH
 - 1;

80 i‡((
nY
 + 
OLED_HEIGHT
Ë> 
BIG_BITMAP_H
)

81 
nY
 = 
BIG_BITMAP_H
 - 
OLED_HEIGHT
 - 1;

83 
i
 = 
nX
; i < (nX + 
OLED_WIDTH
); i++) {

84 
j
 = 
nY
; j < (nY + 
OLED_HEIGHT
); j++) {

85 i‡(
	`NXCTRLBITARRAYGë
(&
¨rBôs
, 
i
 + 
j
 * 
BIG_BITMAP_W
))

87 
	`NXCTRLOLEDDøwPixñ
(&
ﬁed
, (
i
 - 
nX
), (
j
 - 
nY
), 
NXCTRL_ON
);

89 
	`NXCTRLOLEDDøwPixñ
(&
ﬁed
, (
i
 - 
nX
), (
j
 - 
nY
), 
NXCTRL_OFF
);

92 
	}
}

94 
ãrmios
 
	gtioOld
, 
	gtioNew
;

96 
NXCTRL_VOID


97 
	$INTC_HANDLER
 (
NXCTRL_VOID
) {

98 
	`NXCTRLOLEDCÀ¨Di•œy
(&
ﬁed
);

99 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

100 
	`tc£èâr
(
STDIN_FILENO
, 
TCSANOW
, &
tioOld
);

101 
	`˛o£
(
nFD
);

102 
	}
}

104 
NXCTRL_VOID


105 
	$NXCTRLSëup
 (
NXCTRL_VOID
) {

106 
uöt8_t
 
nLSB
;

107 
uöt32_t
 
nS≥ed
, 
nSPIMode
;

109 
	`NXCTRLPöMux
(
BNK
, 
SPI_CS0
, 
NXCTRL_MODE0
, 
NXCTRL_PULLDN
, 
NXCTRL_LOW
);

110 
	`NXCTRLPöMux
(
BNK
, 
SPI_D1
, 
NXCTRL_MODE0
, 
NXCTRL_PULLDN
, 
NXCTRL_LOW
);

111 
	`NXCTRLPöMux
(
BNK
, 
SPI_D0
, 
NXCTRL_MODE0
, 
NXCTRL_PULLUP
, 
NXCTRL_HIGH
);

112 
	`NXCTRLPöMux
(
BNK
, 
SPI_CLK
, 
NXCTRL_MODE0
, 
NXCTRL_PULLUP
, 
NXCTRL_HIGH
);

114 
nFD
 = 
	`›í
("/dev/•idev1.0", 
O_RDWR
);

116 
nLSB
 = 0;

117 
	`io˘l
(
nFD
, 
SPI_IOC_WR_LSB_FIRST
, &
nLSB
);

118 
nS≥ed
 = 20000000;

119 
	`io˘l
(
nFD
, 
SPI_IOC_WR_MAX_SPEED_HZ
, &
nS≥ed
);

120 
nSPIMode
 = 
SPI_MODE_0
;

121 
	`io˘l
(
nFD
, 
SPI_IOC_WR_MODE
, &
nSPIMode
);

123 
	`NXCTRLOLEDInô
(&
ﬁed
,

124 
BNK
, 
OLED_DC
, BNK, 
OLED_RST
,

125 
nFD
);

127 
	`NXCTRLOLEDDi•œyN‹mÆ
(&
ﬁed
);

128 
	`NXCTRLOLEDCÀ¨Di•œy
(&
ﬁed
);

129 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

131 
	`tcgë©å
(
STDIN_FILENO
, &
tioOld
);

133 
tioNew
 = 
tioOld
;

134 
tioNew
.
c_lÊag
 &(~
ICANON
 & ~
ECHO
);

135 
	`tc£èâr
(
STDIN_FILENO
, 
TCSANOW
, &
tioNew
);

137 
	`NXCTRLSëSIGINTH™dÀr
(
INTC_HANDLER
);

138 
	}
}

140 
NXCTRL_VOID


141 
	$NXCTRLLo›
 (
NXCTRL_VOID
) {

142 
NXCTRL_UINT8
 
ch
;

143 
nPageX
 = 0, 
nPageY
 = 0;

144 c⁄° 
nPageWidth
 = 
OLED_WIDTH
/
SCROLL_STEP_DIV
;

145 c⁄° 
nPageHeight
 = 
OLED_HEIGHT
/
SCROLL_STEP_DIV
;

146 c⁄° 
nPageW
 = 
BIG_BITMAP_W
/
nPageWidth
;

147 c⁄° 
nPageH
 = 
BIG_BITMAP_H
/
nPageHeight
;

149 
ch
 = 
	`gëch¨
();

151 
ch
) {

153 
	`NXCTRLOLEDCÀ¨Di•œy
(&
ﬁed
);

154 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

155 
	`tc£èâr
(
STDIN_FILENO
, 
TCSANOW
, &
tioOld
);

156 
	`˛o£
(
nFD
);

157 
	`NXCTRLExôLo›
();

160 
nPageX
 = 
nPageY
 = 0;

161 
	`__DøwBigBôm≠
(
nPageX
*
nPageWidth
, 
nPageY
*
nPageHeight
);

162 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

165 
nPageX
--;

166 i‡(
nPageX
 < 0)ÇPageX = 0;

167 
	`__DøwBigBôm≠
(
nPageX
*
nPageWidth
, 
nPageY
*
nPageHeight
);

168 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

171 
nPageY
++;

172 i‡(
nPageY
 >
nPageH
)ÇPageY =ÇPageH - 1;

173 
	`__DøwBigBôm≠
(
nPageX
*
nPageWidth
, 
nPageY
*
nPageHeight
);

174 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

177 
nPageY
--;

178 i‡(
nPageY
 < 0)ÇPageY = 0;

179 
	`__DøwBigBôm≠
(
nPageX
*
nPageWidth
, 
nPageY
*
nPageHeight
);

180 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

183 
nPageX
++;

184 i‡(
nPageX
 >
nPageW
)ÇPageX =ÇPageW - 1;

185 
	`__DøwBigBôm≠
(
nPageX
*
nPageWidth
, 
nPageY
*
nPageHeight
);

186 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

189 
	}
}

192 
	$maö
 (
¨gc
, c⁄° *
¨gv
[]) {

193 
bmp_bôm≠_ˇŒback_vt
 
bôm≠CBs
 = {

194 
¸óãBôm≠
,

195 
de°royBôm≠
,

196 
gëBôm≠Buf„r
,

197 
gëBôm≠BPP


199 
bmp_ªsu…
 
nCode
;

200 
bmp_image
 
bmp
;

201 
size_t
 
nSize
;

202 *
pD©a
;

203 
nRow
, 
nCﬁ
;

204 *
pImage
;

206 i‡(
¨gc
 != 2) {

207 
	`Ârötf
(
°dîr
, "Ußge: %†bœck_™d_whôe.bmp\n", 
¨gv
[0]);

211 
pD©a
 = 
	`lﬂdBôm≠Fûe
(
¨gv
[1], &
nSize
);

213 
	`bmp_¸óã
(&
bmp
, &
bôm≠CBs
);

214 
nCode
 = 
	`bmp_™Æy£
(&
bmp
, 
nSize
, 
pD©a
);

215 i‡(
nCode
 !
BMP_OK
) {

216 
	`w¨nög
("bmp_™Æy£", 
nCode
);

217 
CLEANUP
;

220 
nCode
 = 
	`bmp_decode
(&
bmp
);

221 i‡(
nCode
 !
BMP_OK
) {

222 
	`w¨nög
("bmp_code", 
nCode
);

223 i‡(
nCode
 !
BMP_INSUFFICIENT_DATA
) {

224 
CLEANUP
;

228 
BIG_BITMAP_W
 = 
bmp
.
width
;

229 
BIG_BITMAP_H
 = 
bmp
.
height
;

231 
	`NXCTRLBITARRAYInô
(&
¨rBôs
, 
bmp
.
width
 * bmp.
height
);

232 
pImage
 = (*)
bmp
.
bôm≠
;

233 
nRow
 = 0;ÇRow !
bmp
.
height
;ÇRow++) {

234 
nCﬁ
 = 0;ÇCﬁ !
bmp
.
width
;ÇCol++) {

235 
size_t
 
z
 = (
nRow
 * 
bmp
.
width
 + 
nCﬁ
) * 4;

236 i‡(
pImage
[
z
] > 0)

237 
	`NXCTRLBITARRAYSë
(&
¨rBôs
, (
nRow
 * 
bmp
.
width
 + 
nCﬁ
));

239 
	`NXCTRLBITARRAYCÀ¨
(&
¨rBôs
, (
nRow
 * 
bmp
.
width
 + 
nCﬁ
));

243 
CLEANUP
:

244 
	`bmp_föÆi£
(&
bmp
);

245 
	`NXCTRLBITARRAYFªe
(&
¨rBôs
);

247  
	`NXCTRLMaö
();

248 
	}
}

251 
	$lﬂdBôm≠Fûe
 (c⁄° *
pszP©h
, 
size_t
 *
≤D©aSize
) {

252 
FILE
 *
pFûe
;

253 
°©
 
°
;

254 *
pBuf
;

255 
size_t
 
nSize
;

256 
size_t
 
n
;

258 
pFûe
 = 
	`f›í
(
pszP©h
, "rb");

259 i‡(!
pFûe
) {

260 
	`≥º‹
(
pszP©h
);

261 
	`exô
(
EXIT_FAILURE
);

264 i‡(
	`°©
(
pszP©h
, &
°
)) {

265 
	`≥º‹
(
pszP©h
);

266 
	`exô
(
EXIT_FAILURE
);

269 
nSize
 = 
°
.
°_size
;

271 
pBuf
 = 
	`mÆloc
(
nSize
);

272 i‡(!
pBuf
) {

273 
	`Ârötf
(
°dîr
, "cannotállocate memory of size %lld\n",

274 ()
nSize
);

275 
	`exô
(
EXIT_FAILURE
);

278 
n
 = 
	`‰ód
(
pBuf
, 1, 
nSize
, 
pFûe
);

279 i‡(
n
 !
nSize
) {

280 
	`≥º‹
(
pszP©h
);

281 
	`exô
(
EXIT_FAILURE
);

284 
	`f˛o£
(
pFûe
);

286 *
≤D©aSize
 = 
nSize
;

288  
pBuf
;

289 
	}
}

292 
	$w¨nög
 (c⁄° *
pszCtx
, 
bmp_ªsu…
 
nCode
) {

293 
	`Ârötf
(
°dîr
, "%s: ", 
pszCtx
);

294 
nCode
) {

295 
BMP_INSUFFICIENT_MEMORY
:

296 
	`Ârötf
(
°dîr
, "Insufficiant memory");

298 
BMP_INSUFFICIENT_DATA
:

299 
	`Ârötf
(
°dîr
, "Insufficient data");

301 
BMP_DATA_ERROR
:

302 
	`Ârötf
(
°dîr
, "DataÉrror");

305 
	`Ârötf
(
°dîr
, "Unknow¿codê%d", 
nCode
);

307 
	`Ârötf
(
°dîr
, "\n");

308 
	}
}

311 
	$¸óãBôm≠
 (
nW
, 
nH
, 
nSèã
) {

312  
	`ˇŒoc
(
nW
 * 
nH
, 4);

313 
	}
}

316 
	$gëBôm≠Buf„r
 (*
pBôm≠
) {

317 
	`as£π
(
pBôm≠
);

318  
pBôm≠
;

319 
	}
}

321 
size_t


322 
	$gëBôm≠BPP
 (*
pBôm≠
) {

324 
	}
}

327 
	$de°royBôm≠
 (*
pBôm≠
) {

328 
	`as£π
(
pBôm≠
);

329 
	`‰ì
(
pBôm≠
);

330 
	}
}

	@gpio-test.c

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<sig«l.h
>

26 
	~<NXCTRL.h
>

28 
	#BUTTON_PIN
 
NXCTRL_PIN11


	)

29 
	#LED_PIN
 
NXCTRL_PIN17


	)

31 
	#DEBOUNCING_CLOCK_COUNT
 200

	)

33 
	#LONG_DELAY
 80

	)

34 
	#SHORT_DELAY
 20

	)

37 
	$NXCTRLSëup
 () {

38 
	`NXCTRLPöMode
(
NXCTRL_P8
, 
BUTTON_PIN
, 
NXCTRL_INPUT_PULLDN
);

40 
	`NXCTRLPöMode
(
NXCTRL_P8
, 
LED_PIN
, 
NXCTRL_OUTPUT
);

41 
	}
}

44 
	$NXCTRLLo›
 () {

45 
nPªvDñay
 = 
LONG_DELAY
;

46 
nDñay
 = 
LONG_DELAY
;

48 i‡(
	`NXCTRLDigôÆRód
(
NXCTRL_P8
, 
BUTTON_PIN
Ë=
NXCTRL_HIGH
)

49 
nDñay
 = 
SHORT_DELAY
;

50 i‡(
	`NXCTRLDigôÆRód
(
NXCTRL_P8
, 
BUTTON_PIN
Ë=
NXCTRL_LOW
)

51 
nDñay
 = 
LONG_DELAY
;

53 i‡(
nPªvDñay
 !
nDñay
) {

54 
nPªvDñay
 = 
nDñay
;

55 
	`¥ötf
("%d - %d\n", 
	`NXCTRLDigôÆRód
(
NXCTRL_P8
, 
BUTTON_PIN
), 
nDñay
);

58 
	`NXCTRLDigôÆWrôe
(
NXCTRL_P8
, 
LED_PIN
, 
NXCTRL_HIGH
);

59 
	`NXCTRLSÀï
(
nDñay
, 0);

60 
	`NXCTRLDigôÆWrôe
(
NXCTRL_P8
, 
LED_PIN
, 
NXCTRL_LOW
);

61 
	`NXCTRLSÀï
(
nDñay
, 0);

62 
	}
}

65 
	$maö
 () {

66  
	`NXCTRLMaö
();

67 
	}
}

	@hc-sr04-simple-test.c

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 
	~<sig«l.h
>

27 
	~<sys/time.h
>

28 
	~<NXCTRL.h
>

30 
	#SENSOR_BANK
 
NXCTRL_P8


	)

32 
	#TRIGGER_PIN
 
NXCTRL_PIN45


	)

33 
	#ECHO_PIN
 
NXCTRL_PIN46


	)

36 
	$NXCTRLSëup
 () {

37 
nMaxCou¡
 = 5000000;

38 
i
;

39 
timevÆ
 
tvSèπ
;

40 
timevÆ
 
tvEnd
;

41 
nSèπTime
, 
nEndTime
;

43 
	`mem£t
(&
tvSèπ
, 0, (tvStart));

44 
	`mem£t
(&
tvEnd
, 0, (tvEnd));

46 
	`NXCTRLPöMux
(
SENSOR_BANK
, 
TRIGGER_PIN
, 
NXCTRL_MODE7
, 
NXCTRL_PULLDN
, 
NXCTRL_LOW
);

47 
	`NXCTRLPöMux
(
SENSOR_BANK
, 
ECHO_PIN
, 
NXCTRL_MODE7
, 
NXCTRL_PULLDN
, 
NXCTRL_HIGH
);

49 
	`NXCTRLPöMode
(
SENSOR_BANK
, 
TRIGGER_PIN
, 
NXCTRL_OUTPUT
);

50 
	`NXCTRLPöMode
(
SENSOR_BANK
, 
ECHO_PIN
, 
NXCTRL_INPUT_PULLDN
);

52 
	`NXCTRLDigôÆWrôe
(
SENSOR_BANK
, 
TRIGGER_PIN
, 
NXCTRL_LOW
);

53 
	`NXCTRLSÀï
(0, 2);

54 
	`NXCTRLDigôÆWrôe
(
SENSOR_BANK
, 
TRIGGER_PIN
, 
NXCTRL_HIGH
);

55 
	`NXCTRLSÀï
(0, 10);

56 
	`NXCTRLDigôÆWrôe
(
SENSOR_BANK
, 
TRIGGER_PIN
, 
NXCTRL_LOW
);

58 
i
 = 0;

59 
	`gëtimeofday
(&
tvSèπ
, 
NULL
);

60 
	`NXCTRLDigôÆRód
(
SENSOR_BANK
, 
ECHO_PIN
Ë!
NXCTRL_HIGH
) {

61 
	`gëtimeofday
(&
tvSèπ
, 
NULL
);

62 i‡(
i
++ >
nMaxCou¡
) {

63 
	`Ârötf
(
°dîr
, "waitedÅooÜong forÉcho startÑesponse\n");

68 
i
 = 0;

69 
	`NXCTRLDigôÆRód
(
SENSOR_BANK
, 
ECHO_PIN
Ë=
NXCTRL_HIGH
) {

70 
	`gëtimeofday
(&
tvEnd
, 
NULL
);

71 i‡(
i
++ >
nMaxCou¡
) {

72 
	`Ârötf
(
°dîr
, "waitedÅooÜong forÉchoÉndÑesponse\n");

77 
nSèπTime
 = 1000000 * 
tvSèπ
.
tv_£c
 +ÅvSèπ.
tv_u£c
;

78 
nEndTime
 = 1000000 * 
tvEnd
.
tv_£c
 +ÅvEnd.
tv_u£c
;

80 
	`¥ötf
("TIME: %lu\n", (
nEndTime
 - 
nSèπTime
));

81 
	`¥ötf
("DIST: %.0f\n", (
nEndTime
 - 
nSèπTime
)/2.0/29.1);

82 
	}
}

85 
	$NXCTRLLo›
 () {

86 
	`NXCTRLExôLo›
();

87 
	}
}

90 
	$maö
 () {

91  
	`NXCTRLMaö
();

92 
	}
}

	@hc-sr04-test.c

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 
	~<î∫o.h
>

27 
	~<NXCTRL.h
>

29 
	~<¥ussdrv.h
>

30 
	~<¥uss_ötc_m≠pög.h
>

32 
	#PRU_NUM
 
PRU0


33 
	#PRU_PATH
 "./hc-§04-ã°.bö"

	)

35 
	#NUM_MEASURE
 10

	)

37 
	#SENSOR_BANK
 
NXCTRL_P8


	)

39 
	#TRIGGER_PIN
 
NXCTRL_PIN11


	)

40 
	#ECHO_PIN
 
NXCTRL_PIN15


	)

43 
	$NXCTRLSëup
 () {

44 
nRë
, 
i
;

45 
çruss_ötc_öôd©a
 
ötc
 = 
PRUSS_INTC_INITDATA
;

46 *
pPRUD©aMem
;

47 *
≤PRUD©a
;

49 
	`NXCTRLPöMux
(
SENSOR_BANK
, 
TRIGGER_PIN
, 
NXCTRL_MODE6
, 
NXCTRL_PULLDN
, 
NXCTRL_LOW
);

50 
	`NXCTRLPöMux
(
SENSOR_BANK
, 
ECHO_PIN
, 
NXCTRL_MODE6
, 
NXCTRL_PULLDN
, 
NXCTRL_HIGH
);

53 i‡((
nRë
 = 
	`¥ussdrv_öô
())) {

54 
	`Ârötf
(
°dîr
, "prussdrv_init() failed\n");

55 
	`exô
(
nRë
);

59 i‡((
nRë
 = 
	`¥ussdrv_›í
(
PRU_EVTOUT_0
))) {

60 
	`Ârötf
(
°dîr
, "¥ussdrv_›í(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
));

61 
	`exô
(
nRë
);

65 i‡((
nRë
 = 
	`¥ussdrv_¥uötc_öô
(&
ötc
))) {

66 
	`Ârötf
(
°dîr
, "prussdrv_pruintc_init() failed\n");

67 
	`exô
(
nRë
);

70 
	`¥ussdrv_m≠_¥umem
(
PRUSS0_PRU0_DATARAM
, &
pPRUD©aMem
);

71 
≤PRUD©a
 = (*)
pPRUD©aMem
;

74 i‡((
nRë
 = 
	`¥ussdrv_exec_¥ogøm
(
PRU_NUM
, 
PRU_PATH
))) {

75 
	`Ârötf
(
°dîr
, "prussdrv_exec_program() failed\n");

76 
	`exô
(
nRë
);

80 
i
 = 0; i < 
NUM_MEASURE
; i++) {

82 
	`¥ötf
("waiting for interrupt from PRU0...\n");

83 
nRë
 = 
	`¥ussdrv_¥u_waô_evít
(
PRU_EVTOUT_0
);

86 i‡(
	`¥ussdrv_¥u_˛ór_evít
(
PRU_EVTOUT_0
, 
PRU0_ARM_INTERRUPT
))

87 
	`Ârötf
(
°dîr
, "prussdrv_pru_clear_event() failed\n");

90 
	`¥ötf
("%02d di°™˚ = %.1‡cm\n", 
i
, ()
≤PRUD©a
[0]/2/29.1);

93 
	`¥ötf
("PRUÖrogøm com∂ëed wôh: %d\n", 
nRë
);

96 i‡(
	`¥ussdrv_¥u_dißbÀ
(
PRU_NUM
))

97 
	`Ârötf
(
°dîr
, "prussdrv_pru_disable() failed\n");

100 i‡(
	`¥ussdrv_exô
())

101 
	`Ârötf
(
°dîr
, "prussdrv_exit() failed\n");

102 
	}
}

105 
	$NXCTRLLo›
 () {

106 
	`NXCTRLExôLo›
();

107 
	}
}

110 
	$maö
 () {

111  
	`NXCTRLMaö
();

112 
	}
}

	@lcd-test.c

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<NXCTRL.h
>

26 
	~<NXCTRL_lcd.h
>

28 
	#RSBANK
 
NXCTRL_P8


	)

29 
	#RSPIN
 
NXCTRL_PIN11


	)

30 
	#ENBANK
 
NXCTRL_P8


	)

31 
	#ENPIN
 
NXCTRL_PIN12


	)

32 
	#D0BANK
 
NXCTRL_P9


	)

33 
	#D0PIN
 
NXCTRL_PIN12


	)

34 
	#D1BANK
 
NXCTRL_P9


	)

35 
	#D1PIN
 
NXCTRL_PIN15


	)

36 
	#D2BANK
 
NXCTRL_P9


	)

37 
	#D2PIN
 
NXCTRL_PIN23


	)

38 
	#D3BANK
 
NXCTRL_P9


	)

39 
	#D3PIN
 
NXCTRL_PIN25


	)

41 
NXCTRLLCD
 
	gLCD
;

44 
	$NXCTRLSëup
 () {

45 
nRë
;

47 
	`NXCTRLPöMux
(
RSBANK
, 
RSPIN
, 
NXCTRL_MODE7
, 
NXCTRL_NOPULL
, 
NXCTRL_OFF
);

48 
	`NXCTRLPöMux
(
ENBANK
, 
ENPIN
, 
NXCTRL_MODE7
, 
NXCTRL_NOPULL
, 
NXCTRL_OFF
);

49 
	`NXCTRLPöMux
(
D0BANK
, 
D0PIN
, 
NXCTRL_MODE7
, 
NXCTRL_NOPULL
, 
NXCTRL_OFF
);

50 
	`NXCTRLPöMux
(
D1BANK
, 
D1PIN
, 
NXCTRL_MODE7
, 
NXCTRL_NOPULL
, 
NXCTRL_OFF
);

51 
	`NXCTRLPöMux
(
D2BANK
, 
D2PIN
, 
NXCTRL_MODE7
, 
NXCTRL_NOPULL
, 
NXCTRL_OFF
);

52 
	`NXCTRLPöMux
(
D3BANK
, 
D3PIN
, 
NXCTRL_MODE7
, 
NXCTRL_NOPULL
, 
NXCTRL_OFF
);

54 
nRë
 = 
	`NXCTRLLCDInô
(&
LCD
,

55 
RSBANK
, 
RSPIN
,

57 
ENBANK
, 
ENPIN
,

58 
D0BANK
, 
D0PIN
,

59 
D1BANK
, 
D1PIN
,

60 
D2BANK
, 
D2PIN
,

61 
D3BANK
, 
D3PIN
,

66 i‡(
nRë
 < 0) {

67 
	`Ârötf
(
°dîr
, "NXCTRLLCDInit: initialization failed\n");

71 
	`NXCTRLLCDBegö
(&
LCD
, 16, 2);

72 
	}
}

75 
	$NXCTRLLo›
 () {

76 
nCou¡
 = 0;

77 i‡(
nCou¡
++ >= 5) {

78 
	`NXCTRLLCDSëCurs‹
(&
LCD
, 0, 0);

79 
	`NXCTRLLCDPröt
(&
LCD
, "LCD TEST: DONE");

80 
	`NXCTRLLCDSëCurs‹
(&
LCD
, 0, 1);

81 
	`NXCTRLLCDPröt
(&
LCD
, "BYE");

82 
	`NXCTRLExôLo›
();

86 
	`NXCTRLLCDSëCurs‹
(&
LCD
, 0, 0);

87 
	`NXCTRLLCDPröt
(&
LCD
, "LCD TEST: %d", 
nCou¡
);

88 
	`NXCTRLSÀï
(1000, 0);

89 
	}
}

92 
	$maö
 () {

93  
	`NXCTRLMaö
();

94 
	}
}

	@netlink-test.c

1 
	~<√töë/ö.h
>

2 
	~<√t/if.h
>

3 
	~<°dio.h
>

4 
	~<°rög.h
>

5 
	~<°dlib.h
>

6 
	~<uni°d.h
>

7 
	~<sys/sockë.h
>

8 
	~<sys/io˘l.h
>

9 
	~<löux/√éök.h
>

10 
	~<löux/π√éök.h
>

11 
	~<sys/ty≥s.h
>

12 
	~<sys/sockë.h
>

13 
	~<¨∑/öë.h
>

16 
	#BUFSIZE
 8192

	)

17 
	gg©eway
[255];

19 
	srouã_öfo
 {

20 
ö_addr
 
	md°Addr
;

21 
ö_addr
 
	m§cAddr
;

22 
ö_addr
 
	mg©eWay
;

23 
	mifName
[
IF_NAMESIZE
];

26 
	$ªadNlSock
(
sockFd
, *
bufPå
, 
£qNum
, 
pId
)

28 
∆msghdr
 *
∆Hdr
;

29 
ªadLí
 = 0, 
msgLí
 = 0;

33 i‡((
ªadLí
 = 
	`ªcv
(
sockFd
, 
bufPå
, 
BUFSIZE
 - 
msgLí
, 0)) < 0) {

34 
	`≥º‹
("SOCK READ: ");

38 
∆Hdr
 = (
∆msghdr
 *Ë
bufPå
;

41 i‡((
	`NLMSG_OK
(
∆Hdr
, 
ªadLí
) == 0)

42 || (
∆Hdr
->
∆msg_ty≥
 =
NLMSG_ERROR
)) {

43 
	`≥º‹
("Error inÑecievedÖacket");

48 i‡(
∆Hdr
->
∆msg_ty≥
 =
NLMSG_DONE
) {

52 
bufPå
 +
ªadLí
;

53 
msgLí
 +
ªadLí
;

57 i‡((
∆Hdr
->
∆msg_Êags
 & 
NLM_F_MULTI
) == 0) {

61 } (
∆Hdr
->
∆msg_£q
 !
£qNum
Ë|| (∆Hdr->
∆msg_pid
 !
pId
));

62  
msgLí
;

63 
	}
}

65 
	$¥ötRouã
(
rouã_öfo
 *
πInfo
)

67 
ãmpBuf
[512];

70 i‡(
πInfo
->
d°Addr
.
s_addr
 != 0)

71 
	`°r˝y
(
ãmpBuf
, 
	`öë_¡ﬂ
(
πInfo
->
d°Addr
));

73 
	`•rötf
(
ãmpBuf
, "*.*.*.*\t");

74 
	`Ârötf
(
°dout
, "%s\t", 
ãmpBuf
);

77 i‡(
πInfo
->
g©eWay
.
s_addr
 != 0)

78 
	`°r˝y
(
ãmpBuf
, (*Ë
	`öë_¡ﬂ
(
πInfo
->
g©eWay
));

80 
	`•rötf
(
ãmpBuf
, "*.*.*.*\t");

81 
	`Ârötf
(
°dout
, "%s\t", 
ãmpBuf
);

84 
	`Ârötf
(
°dout
, "%s\t", 
πInfo
->
ifName
);

87 i‡(
πInfo
->
§cAddr
.
s_addr
 != 0)

88 
	`°r˝y
(
ãmpBuf
, 
	`öë_¡ﬂ
(
πInfo
->
§cAddr
));

90 
	`•rötf
(
ãmpBuf
, "*.*.*.*\t");

91 
	`Ârötf
(
°dout
, "%s\n", 
ãmpBuf
);

92 
	}
}

94 
	$¥ötG©eway
()

96 
	`¥ötf
("%s\n", 
g©eway
);

97 
	}
}

99 
	$∑r£Rouãs
(
∆msghdr
 *
∆Hdr
, 
rouã_öfo
 *
πInfo
)

101 
πmsg
 *
πMsg
;

102 
π©å
 *
πAâr
;

103 
πLí
;

105 
πMsg
 = (
πmsg
 *Ë
	`NLMSG_DATA
(
∆Hdr
);

109 i‡((
πMsg
->
πm_Ámûy
 !
AF_INET
Ë|| (πMsg->
πm_èbÀ
 !
RT_TABLE_MAIN
))

113 
πAâr
 = (
π©å
 *Ë
	`RTM_RTA
(
πMsg
);

114 
πLí
 = 
	`RTM_PAYLOAD
(
∆Hdr
);

115 ; 
	`RTA_OK
(
πAâr
, 
πLí
);ÑtAâ∏
	`RTA_NEXT
(rtAttr,ÑtLen)) {

116 
πAâr
->
πa_ty≥
) {

117 
RTA_OIF
:

118 
	`if_ödext⁄ame
(*(*Ë
	`RTA_DATA
(
πAâr
), 
πInfo
->
ifName
);

120 
RTA_GATEWAY
:

121 
πInfo
->
g©eWay
.
s_addr
*(
u_öt
 *Ë
	`RTA_DATA
(
πAâr
);

123 
RTA_PREFSRC
:

124 
πInfo
->
§cAddr
.
s_addr
*(
u_öt
 *Ë
	`RTA_DATA
(
πAâr
);

126 
RTA_DST
:

127 
πInfo
->
d°Addr
 .
s_addr
*(
u_öt
 *Ë
	`RTA_DATA
(
πAâr
);

133 i‡(
πInfo
->
d°Addr
.
s_addr
 == 0)

134 
	`•rötf
(
g©eway
, (*Ë
	`öë_¡ﬂ
(
πInfo
->
g©eWay
));

138 
	}
}

141 
	$maö
()

143 
∆msghdr
 *
∆Msg
;

144 
πmsg
 *
πMsg
;

145 
rouã_öfo
 *
πInfo
;

146 
msgBuf
[
BUFSIZE
];

148 
sock
, 
Àn
, 
msgSeq
 = 0;

151 i‡((
sock
 = 
	`sockë
(
PF_NETLINK
, 
SOCK_DGRAM
, 
NETLINK_ROUTE
)) < 0)

152 
	`≥º‹
("Socket Creation: ");

154 
	`mem£t
(
msgBuf
, 0, 
BUFSIZE
);

157 
∆Msg
 = (
∆msghdr
 *Ë
msgBuf
;

158 
πMsg
 = (
πmsg
 *Ë
	`NLMSG_DATA
(
∆Msg
);

161 
∆Msg
->
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
πmsg
));

162 
∆Msg
->
∆msg_ty≥
 = 
RTM_GETROUTE
;

164 
∆Msg
->
∆msg_Êags
 = 
NLM_F_DUMP
 | 
NLM_F_REQUEST
;

165 
∆Msg
->
∆msg_£q
 = 
msgSeq
++;

166 
∆Msg
->
∆msg_pid
 = 
	`gëpid
();

169 i‡(
	`£nd
(
sock
, 
∆Msg
,ÇlMsg->
∆msg_Àn
, 0) < 0) {

170 
	`¥ötf
("Write To Socket Failed...\n");

175 i‡((
Àn
 = 
	`ªadNlSock
(
sock
, 
msgBuf
, 
msgSeq
, 
	`gëpid
())) < 0) {

176 
	`¥ötf
("Read From Socket Failed...\n");

180 
πInfo
 = (
rouã_öfo
 *Ë
	`mÆloc
((route_info));

182 ; 
	`NLMSG_OK
(
∆Msg
, 
Àn
);ÇlMsg = 
	`NLMSG_NEXT
(nlMsg,Üen)) {

183 
	`mem£t
(
πInfo
, 0, (
rouã_öfo
));

184 
	`∑r£Rouãs
(
∆Msg
, 
πInfo
);

186 
	`‰ì
(
πInfo
);

187 
	`˛o£
(
sock
);

189 
	`¥ötG©eway
();

191 
	}
}

	@nxpmx/nxpmx.c

21 
	~<löux/kî√l.h
>

22 
	~<löux/kobje˘.h
>

23 
	~<löux/°rög.h
>

24 
	~<löux/sysfs.h
>

25 
	~<löux/moduÀ.h
>

26 
	~<löux/öô.h
>

27 
	~<löux/i›‹t.h
>

28 
	~<asm/io.h
>

30 
	#CONTROL_MODULE_ADDR
 0x44E10000

	)

31 
	#CONTROL_MODULE_LEN
 0x2000

	)

33 
	gmux
;

35 
ssize_t
 
	$mux_show
 (
kobje˘
 *
kobj
,

36 
kobj_©åibuã
 *
©å
,

37 *
buf
) {

38  
	`•rötf
(
buf
, "%d\n", 
mux
);

39 
	}
}

41 
ssize_t
 
	$mux_°‹e
 (
kobje˘
 *
kobj
,

42 
kobj_©åibuã
 *
©å
,

43 c⁄° *
buf
, 
size_t
 
cou¡
) {

44 *
c⁄åﬁ_moduÀ
;

45 
off£t
, 
vÆue
, 
n
;

47 
n
 = 
	`ssˇnf
(
buf
, "%x:%x", &
off£t
, &
vÆue
);

48 
mux
 = 
n
 == 2 ? 0 : 1;

50 i‡(
mux
) {

51 
	`¥ötk
(
KERN_INFO
 "NXPMX: invalid input\n");

52  
cou¡
;

55 i‡(
off£t
 > 
CONTROL_MODULE_LEN
) {

56 
	`¥ötk
(
KERN_INFO
 "NXPMX: invalid offset\n");

57  
cou¡
;

60 i‡(
vÆue
 > 128) {

61 
	`¥ötk
(
KERN_INFO
 "NXPMX: invalid value\n");

62  
cou¡
;

65 i‡(!(
c⁄åﬁ_moduÀ
 = 
	`i‹em≠
(
CONTROL_MODULE_ADDR
,

66 
CONTROL_MODULE_LEN
))) {

67 
	`¥ötk
(
KERN_INFO
 "NXPMX: unableÅo map control module\n");

68  
cou¡
;

71 
	`iowrôe32
(
vÆue
, 
c⁄åﬁ_moduÀ
 + 
off£t
);

72 
	`iounm≠
(
c⁄åﬁ_moduÀ
);

74  
cou¡
;

75 
	}
}

77 
kobj_©åibuã
 
	gmux_©åibuã
 =

78 
__ATTR
(
mux
, 0600, 
mux_show
, 
mux_°‹e
);

80 
©åibuã
 *
	g©ås
[] = {

81 &
mux_©åibuã
.
©å
,

82 
NULL
,

85 
©åibuã_group
 
	g©å_group
 = {

86 .
©ås
 =áttrs,

89 
kobje˘
 *
	gnxpmx_kobj
;

91 
__öô


92 
	$nxpmx_öô
 () {

93 
n
;

95 
nxpmx_kobj
 = 
	`kobje˘_¸óã_™d_add
("nxpmx", 
kî√l_kobj
);

96 i‡(!
nxpmx_kobj
)

97  -
ENOMEM
;

99 
n
 = 
	`sysfs_¸óã_group
(
nxpmx_kobj
, &
©å_group
);

100 i‡(
n
)

101 
	`kobje˘_put
(
nxpmx_kobj
);

103 
	`¥ötk
(
KERN_INFO
 "NXPMX Pin Mux Module Loaded\n");

105  
n
;

106 
	}
}

108 
__exô


109 
	$nxpmx_exô
 () {

110 
	`kobje˘_put
(
nxpmx_kobj
);

111 
	`¥ötk
(
KERN_INFO
 "NXPMX Pin Mux Module Unloaded\n");

112 
	}
}

114 
moduÀ_öô
(
nxpmx_öô
);

115 
moduÀ_exô
(
nxpmx_exô
);

117 
MODULE_LICENSE
("GPL");

118 
MODULE_AUTHOR
("Sungjin Chun <chunsj@gmail.com>");

119 
MODULE_DESCRIPTION
("BBB PinMux Helper Module");

	@pin-info.c

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<sig«l.h
>

26 
	~<NXCTRL.h
>

29 
	$maö
 (
¨gc
, c⁄° *
¨gv
[]) {

30 c⁄° *
pszB™kName
 = 
NULL
;

31 c⁄° *
pszPöName
 = 
NULL
;

32 i‡(
¨gc
 == 1) {

33 
pszB™kName
 = "ALL";

34 
pszPöName
 = "ALL";

35 } i‡(
¨gc
 == 3) {

36 
pszPöName
 = 
¨gv
[2];

37 
pszB™kName
 = 
¨gv
[1];

39 
	`Ârötf
(
°dîr
, "usage:Öin-info [banknameÖinnumber]\n");

43 
	`¥ötf
("XXX Li° Pö Inf‹m©i⁄ f‹ %s[%s]; suchá†mux\n", 
pszB™kName
, 
pszPöName
);

46 
	}
}

48 
	$NXCTRLSëup
 (Ë{
	}
}

49 
	$NXCTRLLo›
 (Ë{
	}
}

	@pru-test.c

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 
	~<î∫o.h
>

27 
	~<NXCTRL.h
>

29 
	~<¥ussdrv.h
>

30 
	~<¥uss_ötc_m≠pög.h
>

32 
	#PRU_NUM
 
PRU0


33 
	#PRU_PATH
 "./¥u-ã°.bö"

	)

35 
	#LED_PIN
 
NXCTRL_PIN17


	)

37 
	#LONG_DELAY
 80

	)

38 
	#SHORT_DELAY
 20

	)

42 
NXCTRL_VOID


43 
	$NXCTRLSëup
 (
NXCTRL_VOID
) {

44 
nRë
;

45 
çruss_ötc_öôd©a
 
ötc
 = 
PRUSS_INTC_INITDATA
;

47 
	`NXCTRLPöMode
(
NXCTRL_P8
, 
LED_PIN
, 
NXCTRL_OUTPUT
);

50 i‡((
nRë
 = 
	`¥ussdrv_öô
())) {

51 
	`Ârötf
(
°dîr
, "prussdrv_init() failed\n");

52 
	`exô
(
nRë
);

56 i‡((
nRë
 = 
	`¥ussdrv_›í
(
PRU_EVTOUT_0
))) {

57 
	`Ârötf
(
°dîr
, "¥ussdrv_›í(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
));

58 
	`exô
(
nRë
);

62 i‡((
nRë
 = 
	`¥ussdrv_¥uötc_öô
(&
ötc
))) {

63 
	`Ârötf
(
°dîr
, "prussdrv_pruintc_init() failed\n");

64 
	`exô
(
nRë
);

68 i‡((
nRë
 = 
	`¥ussdrv_exec_¥ogøm
(
PRU_NUM
, 
PRU_PATH
))) {

69 
	`Ârötf
(
°dîr
, "prussdrv_exec_program() failed\n");

70 
	`exô
(
nRë
);

74 
	`¥ötf
("waiting for interrupt from PRU0...\n");

76 
nRë
 = 
	`¥ussdrv_¥u_waô_evít
(
PRU_EVTOUT_0
);

78 
	`¥ötf
("PRUÖrogøm com∂ëed wôh: %d\n", 
nRë
);

81 i‡(
	`¥ussdrv_¥u_˛ór_evít
(
PRU_EVTOUT_0
, 
PRU0_ARM_INTERRUPT
))

82 
	`Ârötf
(
°dîr
, "prussdrv_pru_clear_event() failed\n");

85 i‡(
	`¥ussdrv_¥u_dißbÀ
(
PRU_NUM
))

86 
	`Ârötf
(
°dîr
, "prussdrv_pru_disable() failed\n");

89 i‡(
	`¥ussdrv_exô
())

90 
	`Ârötf
(
°dîr
, "prussdrv_exit() failed\n");

91 
	}
}

93 
NXCTRL_VOID


94 
	$NXCTRLLo›
 (
NXCTRL_VOID
) {

95 
	`NXCTRLExôLo›
();

96 
	}
}

99 
	$maö
 () {

100  
	`NXCTRLMaö
();

101 
	}
}

	@pru2-test.c

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 
	~<î∫o.h
>

27 
	~<NXCTRL.h
>

29 
	~<¥ussdrv.h
>

30 
	~<¥uss_ötc_m≠pög.h
>

32 
	#PRU_NUM
 
PRU0


33 
	#PRU_PATH
 "./¥u2-ã°.bö"

	)

35 
NXCTRL_VOID


36 
	$NXCTRLSëup
 (
NXCTRL_VOID
) {

37 
nRë
;

38 
çruss_ötc_öôd©a
 
ötc
 = 
PRUSS_INTC_INITDATA
;

41 
	`NXCTRLPöMux
(
NXCTRL_P8
, 
NXCTRL_PIN12
, 
NXCTRL_MODE6
, 
NXCTRL_PULLDN
, 
NXCTRL_LOW
);

44 i‡((
nRë
 = 
	`¥ussdrv_öô
())) {

45 
	`Ârötf
(
°dîr
, "prussdrv_init() failed\n");

46 
	`exô
(
nRë
);

50 i‡((
nRë
 = 
	`¥ussdrv_›í
(
PRU_EVTOUT_0
))) {

51 
	`Ârötf
(
°dîr
, "¥ussdrv_›í(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
));

52 
	`exô
(
nRë
);

56 i‡((
nRë
 = 
	`¥ussdrv_¥uötc_öô
(&
ötc
))) {

57 
	`Ârötf
(
°dîr
, "prussdrv_pruintc_init() failed\n");

58 
	`exô
(
nRë
);

62 i‡((
nRë
 = 
	`¥ussdrv_exec_¥ogøm
(
PRU_NUM
, 
PRU_PATH
))) {

63 
	`Ârötf
(
°dîr
, "prussdrv_exec_program() failed\n");

64 
	`exô
(
nRë
);

68 
	`¥ötf
("waiting for interrupt from PRU0...\n");

70 
nRë
 = 
	`¥ussdrv_¥u_waô_evít
(
PRU_EVTOUT_0
);

72 
	`¥ötf
("PRUÖrogøm com∂ëed wôh: %d\n", 
nRë
);

75 i‡(
	`¥ussdrv_¥u_˛ór_evít
(
PRU_EVTOUT_0
, 
PRU0_ARM_INTERRUPT
))

76 
	`Ârötf
(
°dîr
, "prussdrv_pru_clear_event() failed\n");

79 i‡(
	`¥ussdrv_¥u_dißbÀ
(
PRU_NUM
))

80 
	`Ârötf
(
°dîr
, "prussdrv_pru_disable() failed\n");

83 i‡(
	`¥ussdrv_exô
())

84 
	`Ârötf
(
°dîr
, "prussdrv_exit() failed\n");

85 
	}
}

87 
NXCTRL_VOID


88 
	$NXCTRLLo›
 (
NXCTRL_VOID
) {

89 
	`NXCTRLExôLo›
();

90 
	}
}

93 
	$maö
 () {

94  
	`NXCTRLMaö
();

95 
	}
}

	@pwm-test.c

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<sig«l.h
>

26 
	~<NXCTRL.h
>

28 
	#PWM_BANK
 
NXCTRL_P9


	)

29 
	#PWM_PIN
 
NXCTRL_PIN14


30 
	#PWM_PMX
 
NXCTRL_MODE6


	)

32 
	#PWM_RES
 (1000)

	)

33 
	#PULSE_CNT
 (10)

	)

34 
	#PULSE_RES
 (10)

	)

35 
	#PULSE_TM
 (80)

	)

38 
	$NXCTRLSëup
 () {

39 
i
, 
j
;

40 
nDñè
 = 
PWM_RES
 / 
PULSE_RES
;

41 
	`NXCTRLPöMux
(
PWM_BANK
, 
PWM_PIN
, 
PWM_PMX
, 
NXCTRL_PULLDN
, 
NXCTRL_LOW
);

44 
j
 = 0; j < 
PULSE_CNT
; j++) {

45 
i
 = 0; i < 
PULSE_RES
; i++) {

46 
	`NXCTRLA«logWrôe
(
PWM_BANK
, 
PWM_PIN
, 
nDñè
*(
i
+1));

47 
	`NXCTRLSÀï
(
PULSE_TM
, 0);

49 
i
 = 0; i < 
PULSE_RES
; i++) {

50 
	`NXCTRLA«logWrôe
(
PWM_BANK
, 
PWM_PIN
, 
PWM_RES
 - 
nDñè
*(
i
+1));

51 
	`NXCTRLSÀï
(
PULSE_TM
, 0);

54 
	`NXCTRLA«logWrôe
(
PWM_BANK
, 
PWM_PIN
, 0);

55 
	`NXCTRLSÀï
(100, 0);

56 
	}
}

59 
	$NXCTRLLo›
 () {

60 
	`NXCTRLExôLo›
();

61 
	}
}

64 
	$maö
 () {

65  
	`NXCTRLMaö
();

66 
	}
}

	@ram-test.c

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 
	~<î∫o.h
>

27 
	~<NXCTRL.h
>

29 
	~<uni°d.h
>

30 
	~<sys/mm™.h
>

31 
	~<f˙é.h
>

32 
	~<î∫o.h
>

34 
	~<¥ussdrv.h
>

35 
	~<¥uss_ötc_m≠pög.h
>

37 
	#PRU_NUM
 
PRU0


38 
	#PRU_PATH
 "./øm-ã°.bö"

	)

40 
	#DDR_BASEADDR
 0x80000000

	)

41 
	#OFFSET_DDR
 0x00001000

	)

42 
	#OFFSET_SHAREDRAM
 2048

	)

44 
	#ADDEND1
 0x12341234u

	)

45 
	#ADDEND2
 0x43214321u

	)

46 
	#ADDEND3
 0x98765432u

	)

48 
	gnMEM
;

49 *
	gpMEMDDR
;

52 
	$__öô_ªgi°îs
 () {

53 *
pDDR1
, *
pDDR2
, *
pDDR3
;

55 
nMEM
 = 
	`›í
("/dev/mem", 
O_RDWR
);

56 i‡(
nMEM
 < 0) {

57 
	`Ârötf
(
°dîr
, "ÁûedÅÿ›í /dev/mem: %s\n", 
	`°ªº‹
(
î∫o
));

61 
pMEMDDR
 = 
	`mm≠
(0, 0x0FFFFFFF, 
PROT_WRITE
|
PROT_READ
, 
MAP_SHARED
, 
nMEM
, 
DDR_BASEADDR
);

62 i‡(!
pMEMDDR
) {

63 
	`Ârötf
(
°dîr
, "ÁûedÅÿm≠Åhêdevi˚: %s\n", 
	`°ªº‹
(
î∫o
));

64 
	`˛o£
(
nMEM
);

68 
pDDR1
 = 
pMEMDDR
 + 
OFFSET_DDR
;

69 
pDDR2
 = 
pMEMDDR
 + 
OFFSET_DDR
 + 0x00000004;

70 
pDDR3
 = 
pMEMDDR
 + 
OFFSET_DDR
 + 0x00000008;

72 *(*)
pDDR1
 = 
ADDEND1
;

73 *(*)
pDDR2
 = 
ADDEND2
;

74 *(*)
pDDR3
 = 
ADDEND3
;

77 
	}
}

80 
	$__check_ªsu…s
 () {

81 *
pSh¨edMem
;

82 *
≤Sh¨edI¡s
;

83 
nRes0
, 
nRes1
, 
nRes2
;

85 
	`¥ussdrv_m≠_¥umem
(
PRUSS0_SHARED_DATARAM
, &
pSh¨edMem
);

86 
≤Sh¨edI¡s
 = (*)
pSh¨edMem
 + 
OFFSET_SHAREDRAM
;

88 
nRes0
 = 
≤Sh¨edI¡s
[0];

89 
nRes1
 = 
≤Sh¨edI¡s
[1];

90 
nRes2
 = 
≤Sh¨edI¡s
[2];

92  ((
nRes0
 =
ADDEND1
Ë& (
nRes1
 =
ADDEND2
Ë& (
nRes2
 =
ADDEND3
));

93 
	}
}

95 
NXCTRL_VOID


96 
	$NXCTRLSëup
 (
NXCTRL_VOID
) {

97 
nRë
;

98 
çruss_ötc_öôd©a
 
ötc
 = 
PRUSS_INTC_INITDATA
;

101 i‡((
nRë
 = 
	`¥ussdrv_öô
())) {

102 
	`Ârötf
(
°dîr
, "prussdrv_init() failed\n");

103 
	`exô
(
nRë
);

107 i‡((
nRë
 = 
	`¥ussdrv_›í
(
PRU_EVTOUT_0
))) {

108 
	`Ârötf
(
°dîr
, "¥ussdrv_›í(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
));

109 
	`exô
(
nRë
);

113 i‡((
nRë
 = 
	`¥ussdrv_¥uötc_öô
(&
ötc
))) {

114 
	`Ârötf
(
°dîr
, "prussdrv_pruintc_init() failed\n");

115 
	`exô
(
nRë
);

119 i‡((
nRë
 = 
	`__öô_ªgi°îs
())) {

120 
	`Ârötf
(
°dîr
, "__init_registers() failed\n");

121 
	`exô
(
nRë
);

125 i‡((
nRë
 = 
	`¥ussdrv_exec_¥ogøm
(
PRU_NUM
, 
PRU_PATH
))) {

126 
	`Ârötf
(
°dîr
, "prussdrv_exec_program() failed\n");

127 
	`exô
(
nRë
);

131 
	`¥ötf
("waiting for interrupt from PRU0...\n");

132 
nRë
 = 
	`¥ussdrv_¥u_waô_evít
(
PRU_EVTOUT_0
);

133 
	`¥ötf
("PRUÖrogøm com∂ëed wôh: %d\n", 
nRë
);

136 i‡(
	`¥ussdrv_¥u_˛ór_evít
(
PRU_EVTOUT_0
, 
PRU0_ARM_INTERRUPT
))

137 
	`Ârötf
(
°dîr
, "prussdrv_pru_clear_event() failed\n");

140 i‡(!
	`__check_ªsu…s
()) {

141 
	`Ârötf
(
°dîr
, "__check_results() failed\n");

142 
	`exô
(1);

146 i‡(
	`¥ussdrv_¥u_dißbÀ
(
PRU_NUM
))

147 
	`Ârötf
(
°dîr
, "prussdrv_pru_disable() failed\n");

150 i‡(
	`¥ussdrv_exô
())

151 
	`Ârötf
(
°dîr
, "prussdrv_exit() failed\n");

152 
	}
}

154 
NXCTRL_VOID


155 
	$NXCTRLLo›
 (
NXCTRL_VOID
) {

156 
	`NXCTRLExôLo›
();

157 
	}
}

160 
	$maö
 () {

161  
	`NXCTRLMaö
();

162 
	}
}

	@servo-test.c

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<sig«l.h
>

26 
	~<NXCTRL.h
>

28 
	#SERVO_BANK
 
NXCTRL_P9


	)

29 
	#SERVO_PIN
 
NXCTRL_PIN14


	)

30 
	#SERVO_PMX
 
NXCTRL_MODE6


	)

33 
	$NXCTRLSëup
 () {

34 
i
;

35 
	`NXCTRLPöMux
(
SERVO_BANK
, 
SERVO_PIN
, 
SERVO_PMX
, 
NXCTRL_PULLDN
, 
NXCTRL_LOW
);

37 
	`NXCTRLSîvoWrôe
(
SERVO_BANK
, 
SERVO_PIN
, 82);

38 
	`NXCTRLSÀï
(800, 0);

39 
	`NXCTRLSîvoWrôe
(
SERVO_BANK
, 
SERVO_PIN
, 30);

40 
	`NXCTRLSÀï
(800, 0);

41 
	`NXCTRLSîvoWrôe
(
SERVO_BANK
, 
SERVO_PIN
, 150);

42 
	`NXCTRLSÀï
(800, 0);

44 
	`NXCTRLSîvoWrôe
(
SERVO_BANK
, 
SERVO_PIN
, 0);

45 
	`NXCTRLSÀï
(500, 0);

47 
i
 = 0; i <= 180; i += 2) {

48 
	`NXCTRLSîvoWrôe
(
SERVO_BANK
, 
SERVO_PIN
, 
i
);

49 
	`NXCTRLSÀï
(20, 0);

52 
	`NXCTRLSîvoWrôe
(
SERVO_BANK
, 
SERVO_PIN
, 0);

53 
	`NXCTRLSÀï
(800, 0);

54 
	`NXCTRLSîvoWrôe
(
SERVO_BANK
, 
SERVO_PIN
, 180);

55 
	`NXCTRLSÀï
(800, 0);

56 
	`NXCTRLSîvoWrôe
(
SERVO_BANK
, 
SERVO_PIN
, 82);

57 
	`NXCTRLSÀï
(800, 0);

58 
	}
}

61 
	$NXCTRLLo›
 () {

62 
	`NXCTRLA«logWrôe
(
SERVO_BANK
, 
SERVO_PIN
, 0);

63 
	`NXCTRLSÀï
(500, 0);

64 
	`NXCTRLExôLo›
();

65 
	}
}

68 
	$maö
 () {

69  
	`NXCTRLMaö
();

70 
	}
}

	@sl0-test.c

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 
	~<î∫o.h
>

27 
	~<NXCTRL.h
>

29 
	~<¥ussdrv.h
>

30 
	~<¥uss_ötc_m≠pög.h
>

32 
	#PRU_NUM
 
PRU0


33 
	#PRU_PATH
 "./¶0-ã°.bö"

	)

35 
	#LED_PIN
 
NXCTRL_PIN17


	)

37 *
	gpPRUD©aMem
;

38 *
	gpchPRUD©aMemByãs
;

41 
	$__öô_ªgi°îs
 () {

42 
	`¥ussdrv_m≠_¥umem
(
PRUSS0_PRU0_DATARAM
, &
pPRUD©aMem
);

43 
pchPRUD©aMemByãs
 = (*)
pPRUD©aMem
;

45 
pchPRUD©aMemByãs
[0] = 1;

46 
pchPRUD©aMemByãs
[1] = 0;

49 
	}
}

51 
NXCTRL_VOID


52 
	$NXCTRLSëup
 (
NXCTRL_VOID
) {

53 
nRë
, 
i
;

54 
çruss_ötc_öôd©a
 
ötc
 = 
PRUSS_INTC_INITDATA
;

56 
	`NXCTRLPöMode
(
NXCTRL_P8
, 
LED_PIN
, 
NXCTRL_OUTPUT
);

59 i‡((
nRë
 = 
	`¥ussdrv_öô
())) {

60 
	`Ârötf
(
°dîr
, "prussdrv_init() failed\n");

61 
	`exô
(
nRë
);

65 i‡((
nRë
 = 
	`¥ussdrv_›í
(
PRU_EVTOUT_0
))) {

66 
	`Ârötf
(
°dîr
, "¥ussdrv_›í(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
));

67 
	`exô
(
nRë
);

71 i‡((
nRë
 = 
	`¥ussdrv_¥uötc_öô
(&
ötc
))) {

72 
	`Ârötf
(
°dîr
, "prussdrv_pruintc_init() failed\n");

73 
	`exô
(
nRë
);

77 i‡((
nRë
 = 
	`__öô_ªgi°îs
())) {

78 
	`Ârötf
(
°dîr
, "__init_registers() failed\n");

79 
	`exô
(
nRë
);

83 i‡((
nRë
 = 
	`¥ussdrv_exec_¥ogøm
(
PRU_NUM
, 
PRU_PATH
))) {

84 
	`Ârötf
(
°dîr
, "prussdrv_exec_program() failed\n");

85 
	`exô
(
nRë
);

88 
i
 = 5;

90 
i
--) {

91 
pchPRUD©aMemByãs
[1] = 1;

92 
	`NXCTRLSÀï
(500, 0);

93 
pchPRUD©aMemByãs
[1] = 0;

94 
	`NXCTRLSÀï
(500, 0);

97 
pchPRUD©aMemByãs
[0] = 0;

100 
	`¥ötf
("waiting for interrupt from PRU0...\n");

102 
nRë
 = 
	`¥ussdrv_¥u_waô_evít
(
PRU_EVTOUT_0
);

104 
	`¥ötf
("PRUÖrogøm com∂ëed wôh: %d\n", 
nRë
);

107 i‡(
	`¥ussdrv_¥u_˛ór_evít
(
PRU_EVTOUT_0
, 
PRU0_ARM_INTERRUPT
))

108 
	`Ârötf
(
°dîr
, "prussdrv_pru_clear_event() failed\n");

111 i‡(
	`¥ussdrv_¥u_dißbÀ
(
PRU_NUM
))

112 
	`Ârötf
(
°dîr
, "prussdrv_pru_disable() failed\n");

115 i‡(
	`¥ussdrv_exô
())

116 
	`Ârötf
(
°dîr
, "prussdrv_exit() failed\n");

117 
	}
}

119 
NXCTRL_VOID


120 
	$NXCTRLLo›
 (
NXCTRL_VOID
) {

121 
	`NXCTRLExôLo›
();

122 
	}
}

125 
	$maö
 () {

126  
	`NXCTRLMaö
();

127 
	}
}

	@spi-test.c

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 
	~<NXCTRL.h
>

28 
	~<uni°d.h
>

29 
	~<°döt.h
>

30 
	~<f˙é.h
>

31 
	~<sys/io˘l.h
>

32 
	~<löux/ty≥s.h
>

33 
	~<löux/•i/•idev.h
>

35 
	#SPI_CS0
 17

	)

36 
	#SPI_D1
 18

	)

37 
	#SPI_D0
 21

	)

38 
	#SPI_CLK
 22

	)

40 c⁄° 
uöt8_t
 
	gINSTREAD
 = 0b00000011;

41 c⁄° 
uöt8_t
 
	gINSTWRITE
 = 0b00000010;

42 c⁄° 
uöt8_t
 
	gINSTWREN
 = 0b00000110;

43 c⁄° 
uöt8_t
 
	gINSTWRDI
 = 0b00000100;

44 c⁄° 
uöt8_t
 
	gINSTRDSR
 = 0b00000101;

47 
	$__SPI_ªad
 (
nFD
, 
uöt16_t
 
nAddr
, 
uöt8_t
 *
≤D
) {

48 
nSètus
;

49 
•i_ioc_å™s„r
 
x„r
[2];

50 
rchTXD©a
[4];

51 
rchRXD©a
[4];

53 
	`mem£t
(
x„r
, 0, (xfer));

55 
	`mem˝y
(
rchTXD©a
, &
INSTREAD
, (
uöt8_t
));

56 
	`mem˝y
(
rchTXD©a
 + 1, &
nAddr
, (
uöt16_t
));

57 
	`mem˝y
(
rchTXD©a
 + 1 + 2, 
≤D
, (
uöt8_t
));

59 
x„r
[0].
tx_buf
 = ()
rchTXD©a
;

60 
x„r
[0].
rx_buf
 = ()
rchRXD©a
;

61 
x„r
[0].
Àn
 = 4;

62 
x„r
[0].
dñay_u£cs
 = 200;

64 
nSètus
 = 
	`io˘l
(
nFD
, 
	`SPI_IOC_MESSAGE
(1), 
x„r
);

65 i‡(
nSètus
 < 0) {

66 
	`≥º‹
("SPI_IOC_MESSAGE");

70 *
≤D
 = 
rchRXD©a
[3];

73 
	}
}

76 
	$__SPI_wrôe
 (
nFD
, 
uöt16_t
 
nAddr
, 
uöt8_t
 
nD
) {

77 
nSètus
;

78 
•i_ioc_å™s„r
 
x„r
[2];

79 
rchTXD©a
[4];

80 
rchRXD©a
[4];

82 
	`mem£t
(
x„r
, 0, (xfer));

84 
	`mem˝y
(
rchTXD©a
, &
INSTWREN
, (
uöt8_t
));

86 
x„r
[0].
tx_buf
 = ()
rchTXD©a
;

87 
x„r
[0].
rx_buf
 = ()
rchRXD©a
;

88 
x„r
[0].
Àn
 = 1;

89 
x„r
[0].
dñay_u£cs
 = 200;

91 
nSètus
 = 
	`io˘l
(
nFD
, 
	`SPI_IOC_MESSAGE
(1), 
x„r
);

92 i‡(
nSètus
 < 0) {

93 
	`≥º‹
("SPI_IOC_MESSAGE");

97 
	`mem£t
(
x„r
, 0, (xfer));

99 
	`mem˝y
(
rchTXD©a
, &
INSTWRITE
, (
uöt8_t
));

100 
	`mem˝y
(
rchTXD©a
 + 1, &
nAddr
, (
uöt16_t
));

101 
	`mem˝y
(
rchTXD©a
 + 1 + 2, &
nD
, (
uöt8_t
));

103 
x„r
[0].
tx_buf
 = ()
rchTXD©a
;

104 
x„r
[0].
rx_buf
 = ()
rchRXD©a
;

105 
x„r
[0].
Àn
 = 4;

106 
x„r
[0].
dñay_u£cs
 = 200;

108 
nSètus
 = 
	`io˘l
(
nFD
, 
	`SPI_IOC_MESSAGE
(1), 
x„r
);

109 i‡(
nSètus
 < 0) {

110 
	`≥º‹
("SPI_IOC_MESSAGE");

114 
	`mem£t
(
x„r
, 0, (xfer));

116 
	`mem˝y
(
rchTXD©a
, &
INSTWRDI
, (
uöt8_t
));

118 
x„r
[0].
tx_buf
 = ()
rchTXD©a
;

119 
x„r
[0].
rx_buf
 = ()
rchRXD©a
;

120 
x„r
[0].
Àn
 = 1;

121 
x„r
[0].
dñay_u£cs
 = 200;

123 
nSètus
 = 
	`io˘l
(
nFD
, 
	`SPI_IOC_MESSAGE
(1), 
x„r
);

124 i‡(
nSètus
 < 0) {

125 
	`≥º‹
("SPI_IOC_MESSAGE");

130 
	}
}

132 
NXCTRL_VOID


133 
	$NXCTRLSëup
 (
NXCTRL_VOID
) {

134 
nFD
, 
i
;

135 
uöt8_t
 
nLSB
, 
nD
;

136 
uöt32_t
 
nS≥ed
, 
nSPIMode
;

137 
uöt16_t
 
nAddr
;

139 
	`NXCTRLPöMux
(
NXCTRL_P9
, 
SPI_CS0
, 
NXCTRL_MODE0
, 
NXCTRL_PULLUP
, 
NXCTRL_LOW
);

140 
	`NXCTRLPöMux
(
NXCTRL_P9
, 
SPI_D1
, 
NXCTRL_MODE0
, 
NXCTRL_PULLUP
, 
NXCTRL_LOW
);

141 
	`NXCTRLPöMux
(
NXCTRL_P9
, 
SPI_D0
, 
NXCTRL_MODE0
, 
NXCTRL_PULLUP
, 
NXCTRL_HIGH
);

142 
	`NXCTRLPöMux
(
NXCTRL_P9
, 
SPI_CLK
, 
NXCTRL_MODE0
, 
NXCTRL_PULLUP
, 
NXCTRL_HIGH
);

144 
nFD
 = 
	`›í
("/dev/•idev1.0", 
O_RDWR
);

146 
nLSB
 = 0;

147 
	`io˘l
(
nFD
, 
SPI_IOC_WR_LSB_FIRST
, &
nLSB
);

148 
nS≥ed
 = 500000;

149 
	`io˘l
(
nFD
, 
SPI_IOC_WR_MAX_SPEED_HZ
, &
nS≥ed
);

150 
nSPIMode
 = 
SPI_MODE_0
;

151 
	`io˘l
(
nFD
, 
SPI_IOC_WR_MODE
, &
nSPIMode
);

153 
nAddr
 = 305;

154 
nD
 = -1;

156 
i
 = 0; i < 10; i++) {

157 
	`__SPI_ªad
(
nFD
, 
nAddr
, &
nD
);

158 
	`¥ötf
("%d: %d\n", 
i
, 
nD
);

160 
nD
 = (
uöt8_t
)
i
;

161 
	`__SPI_wrôe
(
nFD
, 
nAddr
, 
nD
);

163 
	`NXCTRLSÀï
(5, 0);

166 
	`˛o£
(
nFD
);

167 
	}
}

169 
NXCTRL_VOID


170 
	$NXCTRLLo›
 (
NXCTRL_VOID
) {

171 
	`NXCTRLExôLo›
();

172 
	}
}

175 
	$maö
 () {

176  
	`NXCTRLMaö
();

177 
	}
}

	@ssd1306-test.c

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 
	~<°rögs.h
>

27 
	~<NXCTRL.h
>

28 
	~<NXCTRL_ﬁed.h
>

30 
	~<uni°d.h
>

31 
	~<°döt.h
>

32 
	~<f˙é.h
>

33 
	~<sys/io˘l.h
>

34 
	~<löux/ty≥s.h
>

35 
	~<löux/•i/•idev.h
>

37 
øndom
 ();

39 
	#BNK
 
NXCTRL_P9


	)

41 
	#SPI_CS0
 17

	)

42 
	#SPI_D0
 21

	)

43 
	#SPI_D1
 18

	)

44 
	#SPI_CLK
 22

	)

46 
	#OLED_DC
 13

	)

47 
	#OLED_RST
 15

	)

48 
	#OLED_CS
 
SPI_CS0


	)

49 
	#OLED_DATA
 
SPI_D1


	)

50 
	#OLED_CLK
 
SPI_CLK


	)

52 
NXCTRLOLED
 
	gﬁed
;

53 
	gnFD
;

55 
	#LOGO16_GLCD_HEIGHT
 16

	)

56 
	#LOGO16_GLCD_WIDTH
 16

	)

57 c⁄° 
NXCTRL_UINT8
 
	glogo16_glcd_bmp
[] = {

76 
	#NUMFLAKES
 10

	)

77 
	#ANI_COUNT
 50

	)

79 
NXCTRL_VOID


80 
	$__Anim©e
 (
NXCTRL_VOID
) {

81 
NXCTRL_UINT8
 
rchIc⁄s
[
NUMFLAKES
][3];

82 
NXCTRL_UINT8
 
f
, 
nC¡
 = 0;

84 
f
 = 0; f < 
NUMFLAKES
; f++) {

85 
rchIc⁄s
[
f
][0] = 
	`øndom
(Ë% 
OLED_WIDTH
;

86 
rchIc⁄s
[
f
][1] = 0;

87 
rchIc⁄s
[
f
][2] = 
	`øndom
() % 5 + 1;

90 
nC¡
++ <
ANI_COUNT
) {

91 
f
 = 0; f < 
NUMFLAKES
; f++)

92 
	`NXCTRLOLEDDøwBôm≠
(&
ﬁed
,

93 
rchIc⁄s
[
f
][0],ÑchIcons[f][1],

94 
logo16_glcd_bmp
,

95 
LOGO16_GLCD_WIDTH
, 
LOGO16_GLCD_HEIGHT
,

96 
NXCTRL_ON
);

97 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

98 
	`NXCTRLSÀï
(200, 0);

100 
f
 = 0; f < 
NUMFLAKES
; f++) {

101 
	`NXCTRLOLEDDøwBôm≠
(&
ﬁed
,

102 
rchIc⁄s
[
f
][0],ÑchIcons[f][1],

103 
logo16_glcd_bmp
,

104 
LOGO16_GLCD_WIDTH
, 
LOGO16_GLCD_HEIGHT
,

105 
NXCTRL_OFF
);

106 
rchIc⁄s
[
f
][1] +=ÑchIcons[f][2];

108 i‡(
rchIc⁄s
[
f
][1] > 
OLED_HEIGHT
) {

109 
rchIc⁄s
[
f
][0] = 
	`øndom
(Ë% 
OLED_WIDTH
;

110 
rchIc⁄s
[
f
][1] = 0;

111 
rchIc⁄s
[
f
][2] = 
	`øndom
() % 5 + 1;

115 
	}
}

117 
NXCTRL_VOID


118 
	$NXCTRLSëup
 (
NXCTRL_VOID
) {

119 
i
;

120 
ch
;

121 
uöt8_t
 
nLSB
;

122 
uöt32_t
 
nS≥ed
, 
nSPIMode
;

123 
NXCTRL_BOOL
 
f
;

125 
	`NXCTRLPöMux
(
BNK
, 
SPI_CS0
, 
NXCTRL_MODE0
, 
NXCTRL_PULLDN
, 
NXCTRL_LOW
);

126 
	`NXCTRLPöMux
(
BNK
, 
SPI_D1
, 
NXCTRL_MODE0
, 
NXCTRL_PULLDN
, 
NXCTRL_LOW
);

127 
	`NXCTRLPöMux
(
BNK
, 
SPI_D0
, 
NXCTRL_MODE0
, 
NXCTRL_PULLUP
, 
NXCTRL_HIGH
);

128 
	`NXCTRLPöMux
(
BNK
, 
SPI_CLK
, 
NXCTRL_MODE0
, 
NXCTRL_PULLUP
, 
NXCTRL_HIGH
);

130 
nFD
 = 
	`›í
("/dev/•idev1.0", 
O_RDWR
);

132 
nLSB
 = 0;

133 
	`io˘l
(
nFD
, 
SPI_IOC_WR_LSB_FIRST
, &
nLSB
);

134 
nS≥ed
 = 20000000;

135 
	`io˘l
(
nFD
, 
SPI_IOC_WR_MAX_SPEED_HZ
, &
nS≥ed
);

136 
nSPIMode
 = 
SPI_MODE_0
;

137 
	`io˘l
(
nFD
, 
SPI_IOC_WR_MODE
, &
nSPIMode
);

139 
	`Ârötf
(
°dout
, "Ru¬ög Demo... "); 
	`fÊush
(stdout);

141 
	`NXCTRLOLEDInô
(&
ﬁed
,

142 
BNK
, 
OLED_DC
, BNK, 
OLED_RST
,

143 
nFD
);

145 
	`NXCTRLOLEDDi•œyN‹mÆ
(&
ﬁed
);

146 
	`NXCTRLOLEDSëB™√r
(&
ﬁed
);

147 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

148 
	`NXCTRLSÀï
(1000, 0);

150 
	`NXCTRLOLEDDi•œyInvî£
(&
ﬁed
);

151 
	`NXCTRLSÀï
(1000, 0);

153 
	`NXCTRLOLEDDi•œyN‹mÆ
(&
ﬁed
);

154 
	`NXCTRLOLEDCÀ¨Di•œy
(&
ﬁed
);

155 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

157 
	`NXCTRLOLEDDøwPixñ
(&
ﬁed
, 10, 10, 
NXCTRL_ON
);

158 
	`NXCTRLOLEDDøwPixñ
(&
ﬁed
, 10, 
OLED_HEIGHT
 - 10, 
NXCTRL_ON
);

159 
	`NXCTRLOLEDDøwPixñ
(&
ﬁed
, 
OLED_WIDTH
 - 10, 10, 
NXCTRL_ON
);

160 
	`NXCTRLOLEDDøwPixñ
(&
ﬁed
, 
OLED_WIDTH
 - 10, 
OLED_HEIGHT
 - 10, 
NXCTRL_ON
);

161 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

162 
	`NXCTRLSÀï
(1000, 0);

164 
	`NXCTRLOLEDCÀ¨Di•œy
(&
ﬁed
);

165 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

167 
i
 = 0; i < 
OLED_WIDTH
; i += 4) {

168 
	`NXCTRLOLEDDøwLöe
(&
ﬁed
, 0, 0, 
i
, 
OLED_HEIGHT
 - 1, 
NXCTRL_ON
);

169 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

171 
i
 = 0; i < 
OLED_HEIGHT
; i += 4) {

172 
	`NXCTRLOLEDDøwLöe
(&
ﬁed
, 0, 0, 
OLED_WIDTH
 - 1, 
i
, 
NXCTRL_ON
);

173 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

175 
	`NXCTRLSÀï
(250, 0);

177 
	`NXCTRLOLEDCÀ¨Di•œy
(&
ﬁed
);

178 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

180 
i
 = 0; i < 
OLED_WIDTH
; i += 4) {

181 
	`NXCTRLOLEDDøwLöe
(&
ﬁed
, 0, 
OLED_HEIGHT
 - 1, 
i
, 0, 
NXCTRL_ON
);

182 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

184 
i
 = 
OLED_HEIGHT
 - 1; i >= 0; i -= 4) {

185 
	`NXCTRLOLEDDøwLöe
(&
ﬁed
, 0, 
OLED_HEIGHT
 - 1, 
OLED_WIDTH
 - 1, 
i
, 
NXCTRL_ON
);

186 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

188 
	`NXCTRLSÀï
(250, 0);

190 
	`NXCTRLOLEDCÀ¨Di•œy
(&
ﬁed
);

191 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

193 
i
 = 
OLED_WIDTH
 - 1; i >= 0 ; i -= 4) {

194 
	`NXCTRLOLEDDøwLöe
(&
ﬁed
, 
OLED_WIDTH
 - 1, 
OLED_HEIGHT
 - 1, 
i
, 0, 
NXCTRL_ON
);

195 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

197 
i
 = 
OLED_HEIGHT
 - 1; i >= 0; i -= 4) {

198 
	`NXCTRLOLEDDøwLöe
(&
ﬁed
, 
OLED_WIDTH
 - 1, 
OLED_HEIGHT
 - 1, 0, 
i
, 
NXCTRL_ON
);

199 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

201 
	`NXCTRLSÀï
(250, 0);

203 
	`NXCTRLOLEDCÀ¨Di•œy
(&
ﬁed
);

204 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

206 
i
 = 0; i < 
OLED_HEIGHT
; i += 4) {

207 
	`NXCTRLOLEDDøwLöe
(&
ﬁed
, 
OLED_WIDTH
 - 1, 0, 0, 
i
, 
NXCTRL_ON
);

208 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

210 
i
 = 0; i < 
OLED_WIDTH
; i += 4) {

211 
	`NXCTRLOLEDDøwLöe
(&
ﬁed
, 
OLED_WIDTH
 - 1, 0, 
i
, 
OLED_HEIGHT
 - 1, 
NXCTRL_ON
);

212 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

214 
	`NXCTRLSÀï
(250, 0);

216 
	`NXCTRLOLEDCÀ¨Di•œy
(&
ﬁed
);

217 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

219 
i
 = 0; i < 
OLED_HEIGHT
/2; i += 2) {

220 
	`NXCTRLOLEDDøwRe˘
(&
ﬁed
,

221 
i
, i,

222 
OLED_WIDTH
 - 2 * 
i
, 
OLED_HEIGHT
 - 2 * i, 
NXCTRL_ON
);

223 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

225 
	`NXCTRLSÀï
(250, 0);

227 
	`NXCTRLOLEDCÀ¨Di•œy
(&
ﬁed
);

228 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

230 
i
 = 0; i < 
OLED_HEIGHT
/2; i += 3) {

231 
	`NXCTRLOLEDFûlRe˘
(&
ﬁed
,

232 
i
, i,

233 
OLED_WIDTH
 - 
i
*2, 
OLED_HEIGHT
 - 2*i,

234 (
i
%2Ë=0 ? 
NXCTRL_ON
 : 
NXCTRL_OFF
);

235 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

237 
	`NXCTRLSÀï
(250, 0);

239 
	`NXCTRLOLEDCÀ¨Di•œy
(&
ﬁed
);

240 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

242 
i
 = 0; i < 
OLED_HEIGHT
; i += 2) {

243 
	`NXCTRLOLEDDøwCú˛e
(&
ﬁed
,

244 
OLED_WIDTH
/2, 
OLED_HEIGHT
/2,

245 
i
, 
NXCTRL_ON
);

246 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

248 
	`NXCTRLSÀï
(250, 0);

250 
	`NXCTRLOLEDCÀ¨Di•œy
(&
ﬁed
);

251 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

253 
	`NXCTRLOLEDDøwCú˛e
(&
ﬁed
,

254 
OLED_WIDTH
/2, 
OLED_HEIGHT
/2,

255 30, 
NXCTRL_ON
);

256 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

257 
	`NXCTRLSÀï
(250, 0);

259 
	`NXCTRLOLEDCÀ¨Di•œy
(&
ﬁed
);

260 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

262 
	`NXCTRLOLEDFûlCú˛e
(&
ﬁed
,

263 
OLED_WIDTH
/2, 
OLED_HEIGHT
/2,

264 30, 
NXCTRL_ON
);

265 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

266 
	`NXCTRLSÀï
(250, 0);

268 
	`NXCTRLOLEDCÀ¨Di•œy
(&
ﬁed
);

269 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

271 
i
 = 0; i < 
OLED_HEIGHT
/2 - 2; i += 2) {

272 
	`NXCTRLOLEDDøwRoundRe˘
(&
ﬁed
,

273 
i
, i,

274 
OLED_WIDTH
 - 2*
i
, 
OLED_HEIGHT
 - 2*i,

275 
OLED_HEIGHT
/4, 
NXCTRL_ON
);

276 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

278 
	`NXCTRLSÀï
(250, 0);

280 
	`NXCTRLOLEDCÀ¨Di•œy
(&
ﬁed
);

281 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

283 
i
 = 0; i < 
OLED_HEIGHT
/2 - 2; i += 3) {

284 
	`NXCTRLOLEDFûlRoundRe˘
(&
ﬁed
,

285 
i
, i,

286 
OLED_WIDTH
 - 2*
i
, 
OLED_HEIGHT
 - 2*i,

287 
OLED_HEIGHT
/4,

288 (
i
%2Ë=0 ? 
NXCTRL_ON
 : 
NXCTRL_OFF
);

289 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

291 
	`NXCTRLSÀï
(250, 0);

293 
	`NXCTRLOLEDCÀ¨Di•œy
(&
ﬁed
);

294 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

296 
	`NXCTRLOLEDDøwRoundRe˘
(&
ﬁed
,

298 
OLED_WIDTH
 - 20, 
OLED_HEIGHT
 - 20,

299 
OLED_HEIGHT
/4, 
NXCTRL_ON
);

300 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

301 
	`NXCTRLSÀï
(250, 0);

303 
	`NXCTRLOLEDCÀ¨Di•œy
(&
ﬁed
);

304 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

306 
	`NXCTRLOLEDFûlRoundRe˘
(&
ﬁed
,

308 
OLED_WIDTH
 - 30, 
OLED_HEIGHT
 - 30,

309 
OLED_HEIGHT
/4, 
NXCTRL_ON
);

310 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

311 
	`NXCTRLSÀï
(250, 0);

313 
	`NXCTRLOLEDCÀ¨Di•œy
(&
ﬁed
);

314 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

316 
i
 = 0; i < 
OLED_HEIGHT
 / 2; i += 5) {

317 
	`NXCTRLOLEDDøwTrüngÀ
(&
ﬁed
,

318 
OLED_WIDTH
/2, 
OLED_HEIGHT
/2 - 
i
,

319 
OLED_WIDTH
/2 - 
i
, 
OLED_HEIGHT
/2 + i,

320 
OLED_WIDTH
/2 + 
i
, 
OLED_HEIGHT
/2 + i,

321 
NXCTRL_ON
);

322 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

324 
	`NXCTRLSÀï
(250, 0);

326 
	`NXCTRLOLEDCÀ¨Di•œy
(&
ﬁed
);

327 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

329 
f
 = 
NXCTRL_ON
;

330 
i
 = 
OLED_HEIGHT
/2; i > 0; i -= 5) {

331 
	`NXCTRLOLEDFûlTrüngÀ
(&
ﬁed
,

332 
OLED_WIDTH
/2, 
OLED_HEIGHT
/2 - 
i
,

333 
OLED_WIDTH
/2 - 
i
, 
OLED_HEIGHT
/2 + i,

334 
OLED_WIDTH
/2 + 
i
, 
OLED_HEIGHT
/2 + i,

335 
f
);

336 i‡(
f
Ë‡
NXCTRL_OFF
;

337 
f
 = 
NXCTRL_ON
;

338 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

340 
	`NXCTRLSÀï
(250, 0);

342 
	`NXCTRLOLEDCÀ¨Di•œy
(&
ﬁed
);

343 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

345 
ch
 = 0; ch < 168; ch++) {

346 i‡(
ch
 == '\n') ;

347 
	`NXCTRLOLEDWrôe
(&
ﬁed
, 
ch
);

349 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

350 
	`NXCTRLSÀï
(1000, 0);

352 
	`NXCTRLOLEDCÀ¨Di•œy
(&
ﬁed
);

353 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

355 
	`NXCTRLOLEDSëCurs‹
(&
ﬁed
, 46, 28);

356 
	`NXCTRLOLEDWrôe
(&
ﬁed
, '1');

357 
	`NXCTRLOLEDWrôe
(&
ﬁed
, '2');

358 
	`NXCTRLOLEDWrôe
(&
ﬁed
, '3');

359 
	`NXCTRLOLEDWrôe
(&
ﬁed
, '.');

360 
	`NXCTRLOLEDWrôe
(&
ﬁed
, '4');

361 
	`NXCTRLOLEDWrôe
(&
ﬁed
, '5');

362 
	`NXCTRLOLEDWrôe
(&
ﬁed
, '6');

363 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

364 
	`NXCTRLSÀï
(1000, 0);

366 
	`NXCTRLOLEDSèπS¸ﬁlRight
(&
ﬁed
, 0x00, 0x0F);

367 
	`NXCTRLSÀï
(2000, 0);

368 
	`NXCTRLOLEDSt›S¸ﬁl
(&
ﬁed
);

369 
	`NXCTRLSÀï
(1000, 0);

370 
	`NXCTRLOLEDSèπS¸ﬁlLe·
(&
ﬁed
, 0x00, 0x0F);

371 
	`NXCTRLSÀï
(2000, 0);

372 
	`NXCTRLOLEDSt›S¸ﬁl
(&
ﬁed
);

373 
	`NXCTRLSÀï
(1000, 0);

374 
	`NXCTRLOLEDSèπS¸ﬁlDügRight
(&
ﬁed
, 0x00, 0x07);

375 
	`NXCTRLSÀï
(2000, 0);

376 
	`NXCTRLOLEDSèπS¸ﬁlDügLe·
(&
ﬁed
, 0x00, 0x07);

377 
	`NXCTRLSÀï
(2000, 0);

378 
	`NXCTRLOLEDSt›S¸ﬁl
(&
ﬁed
);

379 
	`NXCTRLSÀï
(1000, 0);

381 
	`NXCTRLOLEDCÀ¨Di•œy
(&
ﬁed
);

382 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

384 
	`NXCTRLOLEDDøwBôm≠
(&
ﬁed
,

386 
logo16_glcd_bmp
,

387 
LOGO16_GLCD_WIDTH
,

388 
LOGO16_GLCD_HEIGHT
,

389 
NXCTRL_ON
);

390 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

391 
	`NXCTRLSÀï
(1000, 0);

393 
	`NXCTRLOLEDCÀ¨Di•œy
(&
ﬁed
);

394 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

396 
	`__Anim©e
();

397 
	`NXCTRLOLEDCÀ¨Di•œy
(&
ﬁed
);

398 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

400 
	`Ârötf
(
°dout
, "d⁄e\n"); 
	`fÊush
(stdout);

402 
	`NXCTRLOLEDSëCurs‹
(&
ﬁed
, 46, 28);

403 
	`NXCTRLOLEDWrôe
(&
ﬁed
, 'D');

404 
	`NXCTRLOLEDWrôe
(&
ﬁed
, 'I');

405 
	`NXCTRLOLEDWrôe
(&
ﬁed
, 'S');

406 
	`NXCTRLOLEDWrôe
(&
ﬁed
, 'P');

407 
	`NXCTRLOLEDWrôe
(&
ﬁed
, 'L');

408 
	`NXCTRLOLEDWrôe
(&
ﬁed
, 'A');

409 
	`NXCTRLOLEDWrôe
(&
ﬁed
, 'Y');

410 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

411 
	}
}

413 
NXCTRL_VOID


414 
	$NXCTRLLo›
 (
NXCTRL_VOID
) {

415 
rchLöe
[
BUFSIZ
];

416 
i
;

417 
	`mem£t
(
rchLöe
, 0, 
BUFSIZ
);

418 
	`Ârötf
(
°dout
, "DISPLAY: ");

419 
	`fgës
(
rchLöe
, 1024, 
°dö
);

420 i‡(
	`°æí
(
rchLöe
) > 0)

421 
rchLöe
[
	`°æí
(rchLine)-1] = 0;

423 i‡(
	`°rˇ£cmp
(
rchLöe
, ".quit") == 0) {

424 
	`NXCTRLOLEDCÀ¨Di•œy
(&
ﬁed
);

425 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

426 
	`˛o£
(
nFD
);

427 
	`NXCTRLExôLo›
();

430 
	`NXCTRLOLEDSëCurs‹
(&
ﬁed
, 0, 0);

431 
	`NXCTRLOLEDCÀ¨Di•œy
(&
ﬁed
);

433 
i
 = 0; i < 
	`°æí
(
rchLöe
); i++)

434 
	`NXCTRLOLEDWrôe
(&
ﬁed
, 
rchLöe
[
i
]);

435 
	`NXCTRLOLEDUpd©eDi•œy
(&
ﬁed
);

436 
	}
}

439 
	$maö
 () {

440  
	`NXCTRLMaö
();

441 
	}
}

	@tc.c

23 
	#_GNU_SOURCE


	)

25 
	~<uni°d.h
>

26 
	~<°döt.h
>

27 
	~<f˙é.h
>

28 
	~<°dio.h
>

29 
	~<°dlib.h
>

30 
	~<°rög.h
>

31 
	~<˘y≥.h
>

32 
	~<NXCTRL.h
>

33 
	~<NXCTRL_ﬁed.h
>

34 
	~<NXCTRL_bôAºay.h
>

36 
	~<sys/io˘l.h
>

37 
	~<sys/time.h
>

38 
	~<time.h
>

39 
	~<löux/ty≥s.h
>

40 
	~<löux/•i/•idev.h
>

42 
	~<¨∑/öë.h
>

43 
	~<sys/sockë.h
>

44 
	~<√tdb.h
>

45 
	~<iÁddrs.h
>

47 
	~<sys/ªboŸ.h
>

48 
	~<sys/sysöfo.h
>

49 
	~<sys/°©vfs.h
>

51 
	~<dlf˙.h
>

52 
	~<NXCTRL_≠pEx.h
>

54 
	~<î∫o.h
>

55 
	~<¥ussdrv.h
>

56 
	~<¥uss_ötc_m≠pög.h
>

58 
	#MENU_BUTTON_BANK
 
NXCTRL_P8


	)

59 
	#MENU_BUTTON_PIN
 
NXCTRL_PIN29


	)

60 
	#EXEC_BUTTON_BANK
 
NXCTRL_P8


	)

61 
	#EXEC_BUTTON_PIN
 
NXCTRL_PIN31


	)

63 
	#OLED_BANK
 
NXCTRL_P9


	)

65 
	#SPI_CS0
 
NXCTRL_PIN17


	)

66 
	#SPI_D0
 
NXCTRL_PIN21


	)

67 
	#SPI_D1
 
NXCTRL_PIN18


	)

68 
	#SPI_CLK
 
NXCTRL_PIN22


	)

70 
	#OLED_DC
 
NXCTRL_PIN15


	)

71 
	#OLED_RST
 
NXCTRL_PIN13


	)

72 
	#OLED_CS
 
SPI_CS0


	)

73 
	#OLED_DATA
 
SPI_D1


	)

74 
	#OLED_CLK
 
SPI_CLK


	)

76 
NXCTRLOLED
 
	gOLED
;

77 
	gnSPIFD
;

79 c⁄° *
	gΩszAµs
[] = {

89 
	gnCuºítAµIdx
 = 0;

90 
	gnPªvAµIdx
 = 0;

91 
NXCTRL_VOID
 *
	gpA˘iveAµH™dÀ
 = 
NULL
;

92 
NXCTRLAPP
 
	ga˘iveAµ
;

93 
APPINITFN
 
	g≠pInô
 = 
NULL
;

94 
APPRUNFN
 
	g≠pRun
 = 
NULL
;

95 
APPCLEANFN
 
	g≠pCÀ™
 = 
NULL
;

97 
NXCTRL_VOID


98 
	$__CÀ¨Di•œy
 (
NXCTRL_VOID
) {

99 
	`NXCTRLOLEDCÀ¨Di•œy
(&
OLED
);

100 
	}
}

102 
NXCTRL_VOID


103 
	$__Upd©eDi•œy
 (
NXCTRL_VOID
) {

104 
	`NXCTRLOLEDUpd©eDi•œy
(&
OLED
);

105 
	}
}

107 
NXCTRL_VOID


108 
	$__SëCurs‹
 (
NXCTRL_UINT8
 
nX
, NXCTRL_UINT8 
nY
) {

109 
	`NXCTRLOLEDSëCurs‹
(&
OLED
, 
nX
, 
nY
);

110 
	}
}

112 
NXCTRL_VOID


113 
	$__WrôeSåögToOLED
 (c⁄° *
psz
) {

114 
n
 = 
	`°æí
(
psz
);

115 
i
;

116 
i
 = 0; i < 
n
; i++)

117 
	`NXCTRLOLEDWrôe
(&
OLED
, 
psz
[
i
]);

118 
	}
}

120 
NXCTRL_VOID


121 
	$__DøwPixñ
 (
NXCTRL_UINT8
 
nX
, NXCTRL_UINT8 
nY
, 
NXCTRL_BOOL
 
⁄Off
) {

122 
	`NXCTRLOLEDDøwPixñ
(&
OLED
, 
nX
, 
nY
, 
⁄Off
);

123 
	}
}

125 
NXCTRL_VOID


126 
	$__DøwLöe
 (
NXCTRL_UINT8
 
nX0
, NXCTRL_UINT8 
nY0
,

127 
NXCTRL_UINT8
 
nX1
, NXCTRL_UINT8 
nY1
, 
NXCTRL_BOOL
 
⁄Off
) {

128 
	`NXCTRLOLEDDøwLöe
(&
OLED
, 
nX0
, 
nY0
, 
nX1
, 
nY1
, 
⁄Off
);

129 
	}
}

131 
NXCTRL_VOID


132 
	$__DøwBôm≠
 (
NXCTRL_UINT8
 
nX
, NXCTRL_UINT8 
nY
,

133 
NXCTRL_UINT8
 *
pBôm≠
,

134 
NXCTRL_UINT8
 
nW
, NXCTRL_UINT8 
nH
,

135 
NXCTRL_BOOL
 
⁄Off
) {

137 
NXCTRLBITARRAY
 
¨rBôs
;

138 
i
, 
j
;

139 
¨rBôs
.
¨r
 = 
pBôm≠
;

140 
¨rBôs
.
nBôs
 = 
nW
 * 
nH
;

141 
i
 = 
nX
; i < (nX + 
nW
); i++) {

142 
j
 = 
nY
; j < (nY + 
nH
); j++) {

143 i‡(
	`NXCTRLBITARRAYGë
(&
¨rBôs
, 
i
 + 
j
 * 
nW
))

144 
	`NXCTRLOLEDDøwPixñ
(&
OLED
, 
i
, 
j
, 
NXCTRL_ON
);

146 
	`NXCTRLOLEDDøwPixñ
(&
OLED
, 
i
, 
j
, 
NXCTRL_OFF
);

149 
	}
}

151 
NXCTRL_VOID


152 
	$__DøwB™√r
 (
NXCTRL_VOID
) {

153 
	`NXCTRLOLEDSëB™√r
(&
OLED
);

154 
	}
}

156 
NXCTRL_VOID


157 
	$__lﬂdAµ
 (
nCmd
) {

158 i‡(
pA˘iveAµH™dÀ
 !
NULL
) {

159 
	`≠pCÀ™
(&
a˘iveAµ
);

160 i‡(
pA˘iveAµH™dÀ
)

161 
	`dl˛o£
(
pA˘iveAµH™dÀ
);

164 
pA˘iveAµH™dÀ
 = 
	`dl›í
(
ΩszAµs
[
nCmd
], 
RTLD_LAZY
);

165 i‡(!
pA˘iveAµH™dÀ
) {

166 
	`Ârötf
(
°dîr
, "ˇ¬ŸÜﬂd %s\n", 
ΩszAµs
[
nCmd
]);

170 
nCuºítAµIdx
 = 
nCmd
;

171 
≠pInô
 = (
APPINITFN
)
	`dlsym
(
pA˘iveAµH™dÀ
, 
APPINITFUNCTIONNAME
);

172 
≠pRun
 = (
APPRUNFN
)
	`dlsym
(
pA˘iveAµH™dÀ
, 
APPRUNFUNCTIONNAME
);

173 
≠pCÀ™
 = (
APPCLEANFN
)
	`dlsym
(
pA˘iveAµH™dÀ
, 
APPCLEANFUNCTIONNAME
);

175 
a˘iveAµ
.
pD©a
 = 
NULL
;

176 
a˘iveAµ
.
pöMux
 = (
APPPINMUX
)
NXCTRLPöMux
;

177 
a˘iveAµ
.
pöMode
 = (
APPPINMODE
)
NXCTRLPöMode
;

178 
a˘iveAµ
.
¶ìp
 = (
APPSLEEP
)
NXCTRLSÀï
;

179 
a˘iveAµ
.
digôÆRód
 = (
APPDIGITALREAD
)
NXCTRLDigôÆRód
;

180 
a˘iveAµ
.
digôÆWrôe
 = (
APPDIGITALWRITE
)
NXCTRLDigôÆWrôe
;

181 
a˘iveAµ
.
™ÆogRód
 = (
APPANALOGREAD
)
NXCTRLA«logRód
;

182 
a˘iveAµ
.
™ÆogWrôe
 = (
APPANALOGWRITE
)
NXCTRLA«logWrôe
;

183 
a˘iveAµ
.
£rvoWrôe
 = (
APPSERVOWRITE
)
NXCTRLSîvoWrôe
;

185 
a˘iveAµ
.
˛órDi•œy
 = (
APPCLEARDPY
)
__CÀ¨Di•œy
;

186 
a˘iveAµ
.
upd©eDi•œy
 = (
APPUPDATEDPY
)
__Upd©eDi•œy
;

187 
a˘iveAµ
.
£tCurs‹
 = (
APPSETCURSOR
)
__SëCurs‹
;

188 
a˘iveAµ
.
wrôeSTR
 = (
APPWRITESTR
)
__WrôeSåögToOLED
;

190 
a˘iveAµ
.
døwPixñ
 = (
APPDRAWPIXEL
)
__DøwPixñ
;

191 
a˘iveAµ
.
døwLöe
 = (
APPDRAWLINE
)
__DøwLöe
;

192 
a˘iveAµ
.
døwBôm≠
 = (
APPDRAWBITMAP
)
__DøwBôm≠
;

193 
a˘iveAµ
.
døwB™√r
 = (
APPDRAWBANNER
)
__DøwB™√r
;

195 i‡(!
≠pInô
 || !
≠pRun
 || !
≠pCÀ™
) {

196 
	`Ârötf
(
°dîr
, "cannot findÑequired functions\n");

197 
	`dl˛o£
(
pA˘iveAµH™dÀ
);

198 
pA˘iveAµH™dÀ
 = 
NULL
;

202 
	`≠pInô
(&
a˘iveAµ
);

203 
	}
}

205 
NXCTRL_VOID


206 
	$INTC_HANDLER
 (
NXCTRL_VOID
) {

207 
	`NXCTRLOLEDCÀ¨Di•œy
(&
OLED
);

208 
	`NXCTRLOLEDUpd©eDi•œy
(&
OLED
);

209 
	`˛o£
(
nSPIFD
);

210 
	}
}

212 
NXCTRL_VOID


213 
	$NXCTRLSëup
 (
NXCTRL_VOID
) {

214 
uöt8_t
 
nLSB
;

215 
uöt32_t
 
nS≥ed
, 
nSPIMode
;

217 
	`NXCTRLPöMux
(
MENU_BUTTON_BANK
, 
MENU_BUTTON_PIN
, 
NXCTRL_MODE7
, 
NXCTRL_PULLDN
, 
NXCTRL_LOW
);

218 
	`NXCTRLPöMux
(
EXEC_BUTTON_BANK
, 
EXEC_BUTTON_PIN
, 
NXCTRL_MODE7
, 
NXCTRL_PULLDN
, 
NXCTRL_LOW
);

219 
	`NXCTRLPöMode
(
MENU_BUTTON_BANK
, 
MENU_BUTTON_PIN
, 
NXCTRL_INPUT_PULLDN
);

220 
	`NXCTRLPöMode
(
EXEC_BUTTON_BANK
, 
EXEC_BUTTON_PIN
, 
NXCTRL_INPUT_PULLDN
);

222 
	`NXCTRLPöMux
(
OLED_BANK
, 
SPI_CS0
, 
NXCTRL_MODE0
, 
NXCTRL_PULLDN
, 
NXCTRL_LOW
);

223 
	`NXCTRLPöMux
(
OLED_BANK
, 
SPI_D1
, 
NXCTRL_MODE0
, 
NXCTRL_PULLDN
, 
NXCTRL_LOW
);

224 
	`NXCTRLPöMux
(
OLED_BANK
, 
SPI_D0
, 
NXCTRL_MODE0
, 
NXCTRL_PULLUP
, 
NXCTRL_HIGH
);

225 
	`NXCTRLPöMux
(
OLED_BANK
, 
SPI_CLK
, 
NXCTRL_MODE0
, 
NXCTRL_PULLUP
, 
NXCTRL_HIGH
);

227 
nSPIFD
 = 
	`›í
("/dev/•idev1.0", 
O_RDWR
);

229 
nLSB
 = 0;

230 
	`io˘l
(
nSPIFD
, 
SPI_IOC_WR_LSB_FIRST
, &
nLSB
);

231 
nS≥ed
 = 20000000;

232 
	`io˘l
(
nSPIFD
, 
SPI_IOC_WR_MAX_SPEED_HZ
, &
nS≥ed
);

233 
nSPIMode
 = 
SPI_MODE_0
;

234 
	`io˘l
(
nSPIFD
, 
SPI_IOC_WR_MODE
, &
nSPIMode
);

236 
	`NXCTRLOLEDInô
(&
OLED
,

237 
OLED_BANK
, 
OLED_DC
, OLED_BANK, 
OLED_RST
,

238 
nSPIFD
);

240 
	`NXCTRLSëSIGINTH™dÀr
(
INTC_HANDLER
);

241 
	`NXCTRLSëSIGTERMH™dÀr
(
INTC_HANDLER
);

243 
	`NXCTRLOLEDDi•œyN‹mÆ
(&
OLED
);

244 
	`NXCTRLOLEDUpd©eDi•œy
(&
OLED
);

246 
	`__lﬂdAµ
(0);

247 
	}
}

266 
NXCTRL_VOID


267 
	$NXCTRLLo›
 (
NXCTRL_VOID
) {

268 
a˘iveAµ
.
nCmd
 = -1;

269 
	`≠pRun
(&
a˘iveAµ
);

270 i‡(
a˘iveAµ
.
nCmd
 != -1) {

271 i‡(
nCuºítAµIdx
 == 1) {

272 i‡(
a˘iveAµ
.
nCmd
 == 2) {

273 
nPªvAµIdx
 = 0;

274 
	`__lﬂdAµ
(
a˘iveAµ
.
nCmd
);

275 
a˘iveAµ
.
nCmd
 = -1;

276 } i‡(
a˘iveAµ
.
nCmd
 >= 1234) {

277 
nPªvAµIdx
 = 0;

278 
	`__lﬂdAµ
(
a˘iveAµ
.
nCmd
 - 1234);

279 
a˘iveAµ
.
nCmd
 = -1;

281 
	`__lﬂdAµ
(
nPªvAµIdx
);

283 
nPªvAµIdx
 = 
nCuºítAµIdx
;

284 
	`__lﬂdAµ
(
a˘iveAµ
.
nCmd
);

285 
a˘iveAµ
.
nCmd
 = -1;

289 
	`NXCTRLSÀï
(100, 0);

290 
	}
}

293 
	$maö
 () {

294  
	`NXCTRLMaö
();

295 
	}
}

	@uio_pruss/uio_pruss.c

18 
	~<löux/devi˚.h
>

19 
	~<löux/moduÀ.h
>

20 
	~<löux/moduÀ∑øm.h
>

21 
	~<löux/∂©f‹m_devi˚.h
>

22 
	~<löux/of_gpio.h
>

23 
	~<löux/uio_drivî.h
>

24 
	~<löux/∂©f‹m_d©a/uio_¥uss.h
>

25 
	~<löux/io.h
>

26 
	~<löux/˛k.h
>

27 
	~<löux/dma-m≠pög.h
>

28 
	~<löux/¶ab.h
>

29 
	~<löux/gíÆloc.h
>

30 
	~<löux/of_addªss.h
>

31 
	~<löux/of_devi˚.h
>

32 
	~<löux/pö˘æ/c⁄sumî.h
>

33 
	~<löux/îr.h
>

34 
	~<löux/pm_ru¡ime.h
>

36 #ifde‡
CONFIG_ARCH_DAVINCI_DA850


40 
	#DRV_NAME
 "¥uss_uio"

	)

41 
	#DRV_VERSION
 "1.0"

	)

43 
	g§am_poﬁ_sz
 = 
SZ_16K
;

44 
moduÀ_∑øm
(
§am_poﬁ_sz
, , 0);

45 
MODULE_PARM_DESC
(
§am_poﬁ_sz
, "sramÖool sizeÅoállocate ");

47 
	gexåam_poﬁ_sz
 = 
SZ_256K
;

48 
moduÀ_∑øm
(
exåam_poﬁ_sz
, , 0);

49 
MODULE_PARM_DESC
(
exåam_poﬁ_sz
, "externalÑamÖool sizeÅoállocate");

65 
	#MAX_PRUSS_EVT
 8

	)

67 
	#PINTC_HIDISR
 0x0038

	)

68 
	#PINTC_HIPIR
 0x0900

	)

69 
	#HIPIR_NOPEND
 0x80000000

	)

70 
	#PINTC_HIER
 0x1500

	)

72 
	suio_¥uss_dev
 {

73 
uio_öfo
 *
	möfo
;

74 
˛k
 *
	m¥uss_˛k
;

75 
dma_addr_t
 
	m§am_∑ddr
;

76 
dma_addr_t
 
	mddr_∑ddr
;

77 
__iomem
 *
	m¥ussio_vaddr
;

78 
	m§am_vaddr
;

79 *
	mddr_vaddr
;

80 
	mho°úq_°¨t
;

81 
	mpötc_ba£
;

82 
gí_poﬁ
 *
	m§am_poﬁ
;

85 
úqªtu∫_t
 
	$¥uss_h™dÀr
(
úq
, 
uio_öfo
 *
öfo
)

87 
uio_¥uss_dev
 *
gdev
 = 
öfo
->
¥iv
;

88 
öå_bô
 = (
úq
 - 
gdev
->
ho°úq_°¨t
 + 2);

89 
vÆ
, 
öå_mask
 = (1 << 
öå_bô
);

90 
__iomem
 *
ba£
 = 
gdev
->
¥ussio_vaddr
 + gdev->
pötc_ba£
;

91 
__iomem
 *
öåí_ªg
 = 
ba£
 + 
PINTC_HIER
;

92 
__iomem
 *
öådis_ªg
 = 
ba£
 + 
PINTC_HIDISR
;

93 
__iomem
 *
öå°©_ªg
 = 
ba£
 + 
PINTC_HIPIR
 + (
öå_bô
 << 2);

95 
vÆ
 = 
	`i‹ód32
(
öåí_ªg
);

97 i‡(!(
vÆ
 & 
öå_mask
Ë&& (
	`i‹ód32
(
öå°©_ªg
Ë& 
HIPIR_NOPEND
))

98  
IRQ_NONE
;

100 
	`iowrôe32
(
öå_bô
, 
öådis_ªg
);

101  
IRQ_HANDLED
;

102 
	}
}

104 
	$¥uss_˛ónup
(
∂©f‹m_devi˚
 *
dev
,

105 
uio_¥uss_dev
 *
gdev
)

107 
˙t
;

108 
uio_öfo
 *
p
 = 
gdev
->
öfo
;

110 
˙t
 = 0; c¡ < 
MAX_PRUSS_EVT
; c¡++, 
p
++) {

111 
	`uio_uƒegi°î_devi˚
(
p
);

112 
	`k‰ì
(
p
->
«me
);

114 
	`iounm≠
(
gdev
->
¥ussio_vaddr
);

115 i‡(
gdev
->
ddr_vaddr
) {

116 
	`dma_‰ì_cohîít
(&
dev
->dev, 
exåam_poﬁ_sz
, 
gdev
->
ddr_vaddr
,

117 
gdev
->
ddr_∑ddr
);

119 #ifde‡
CONFIG_ARCH_DAVINCI_DA850


120 i‡(
gdev
->
§am_vaddr
)

121 
	`gí_poﬁ_‰ì
(
gdev
->
§am_poﬁ
,

122 
gdev
->
§am_vaddr
,

123 
§am_poﬁ_sz
);

125 
	`k‰ì
(
gdev
->
öfo
);

126 
	`˛k_put
(
gdev
->
¥uss_˛k
);

127 
	`k‰ì
(
gdev
);

128 
	}
}

130 
	$¥uss_¥obe
(
∂©f‹m_devi˚
 *
dev
)

132 
uio_öfo
 *
p
;

133 
uio_¥uss_dev
 *
gdev
;

134 
ªsour˚
 *
ªgs_¥ussio
;

135 
ªsour˚
 
ªs
;

136 
ªt
 = -
ENODEV
, 
˙t
 = 0, 
Àn
;

137 
uio_¥uss_pd©a
 *
pd©a
 = 
	`dev_gë_∂©d©a
(&
dev
->dev);

138 
pö˘æ
 *pinctrl;

140 
cou¡
;

141 
devi˚_node
 *
chûd
;

142 c⁄° *
pö_«me
;

144 
gdev
 = 
	`kzÆloc
((
uio_¥uss_dev
), 
GFP_KERNEL
);

145 i‡(!
gdev
)

146  -
ENOMEM
;

148 
gdev
->
öfo
 = 
	`kzÆloc
((*
p
Ë* 
MAX_PRUSS_EVT
, 
GFP_KERNEL
);

149 i‡(!
gdev
->
öfo
) {

150 
	`k‰ì
(
gdev
);

151  -
ENOMEM
;

153 #ifde‡
CONFIG_ARCH_DAVINCI_DA850


155 
gdev
->
¥uss_˛k
 = 
	`˛k_gë
(&
dev
->dev, "pruss");

156 i‡(
	`IS_ERR
(
gdev
->
¥uss_˛k
)) {

157 
	`dev_îr
(&
dev
->dev, "FailedÅo get clock\n");

158 
ªt
 = 
	`PTR_ERR
(
gdev
->
¥uss_˛k
);

159 
	`k‰ì
(
gdev
->
öfo
);

160 
	`k‰ì
(
gdev
);

161  
ªt
;

163 
	`˛k_íabÀ
(
gdev
->
¥uss_˛k
);

167 i‡(
dev
->dev.
of_node
) {

168 
	`pm_ru¡ime_íabÀ
(&
dev
->dev);

169 
ªt
 = 
	`pm_ru¡ime_gë_sync
(&
dev
->dev);

170 i‡(
	`IS_ERR_VALUE
(
ªt
)) {

171 
	`dev_îr
(&
dev
->dev, "pm_runtime_get_sync() failed\n");

172  
ªt
;

175 
ªt
 = 
	`of_addªss_to_ªsour˚
(
dev
->dev.
of_node
, 0, &
ªs
);

176 i‡(
	`IS_ERR_VALUE
(
ªt
)) {

177 
	`dev_îr
(&
dev
->dev, "failedÅoÖarse DTÑeg\n");

178  
ªt
;

180 
ªgs_¥ussio
 = &
ªs
;

183 
pö˘æ
 = 
	`devm_pö˘æ_gë_£À˘_deÁu…
(&
dev
->dev);

184 i‡(
	`IS_ERR
(
pö˘æ
))

185 
	`dev_w¨n
(&
dev
->dev,

188 
cou¡
 = 
	`of_gë_chûd_cou¡
(
dev
->dev.
of_node
);

189 i‡(!
cou¡
){

190 
	`dev_öfo
(&
dev
->dev, "No children\n");

191  -
ENODEV
;

194 
	`f‹_óch_chûd_of_node
(
dev
->dev.
of_node
, 
chûd
){

195 
of_gpio_Êags
 
Êags
;

196 
gpio
;

198 
cou¡
 = 
	`of_gpio_cou¡
(
chûd
);

200 
ªt
 = 
	`of_¥›îty_cou¡_°rögs
(
chûd
, "pin-names");

201 i‡(
ªt
 < 0) {

202 
	`dev_îr
(&
dev
->dev, "FailedÅo getÖin-names\n");

205 if(
cou¡
 !
ªt
){

206 
	`dev_îr
(&
dev
->dev, "TheÇumber of gpios (%d) doesÇot match"\

207 "Åhênumbî o‡pöÇame†(%d)\n", 
cou¡
, 
ªt
);

211 
	`dev_îr
(&
dev
->dev, "Chûd ha†%u gpios\n", 
cou¡
);

212 
˙t
=0; c¡<
cou¡
; cnt++){

213 
ªt
 = 
	`of_¥›îty_ªad_°rög_ödex
(
chûd
,

214 "pö-«mes", 
˙t
, &
pö_«me
);

215 i‡(
ªt
 != 0)

216 
	`dev_îr
(&
dev
->dev, "Eº‹ o¿pö-«mê#%d\n", 
˙t
);

217 
gpio
 = 
	`of_gë_gpio_Êags
(
chûd
, 
˙t
, &
Êags
);

218 
ªt
 = 
	`devm_gpio_ªque°_⁄e
(&
dev
->dev, 
gpio
, 
Êags
, 
pö_«me
);

223 
ªgs_¥ussio
 = 
	`∂©f‹m_gë_ªsour˚
(
dev
, 
IORESOURCE_MEM
, 0);

224 i‡(!
ªgs_¥ussio
) {

225 
	`dev_îr
(&
dev
->dev, "No PRUSS I/OÑesource specified\n");

226 
out_‰ì
;

229 
	`dev_îr
(&
dev
->dev,"pruss_probe() get_resource ok\n");

231 i‡(!
ªgs_¥ussio
->
°¨t
) {

232 
	`dev_îr
(&
dev
->dev, "Invalid memoryÑesource\n");

233 
out_‰ì
;

236 i‡(
pd©a
 &&Öd©a->
§am_poﬁ
) {

237 
gdev
->
§am_poﬁ
 = 
pd©a
->sram_pool;

238 #ifde‡
CONFIG_ARCH_DAVINCI_DA850


239 
gdev
->
§am_vaddr
 =

240 ()
	`gí_poﬁ_dma_Æloc
(
gdev
->
§am_poﬁ
,

241 
§am_poﬁ_sz
, &
gdev
->
§am_∑ddr
);

242 i‡(!
gdev
->
§am_vaddr
) {

243 
	`dev_îr
(&
dev
->dev, "CouldÇotállocate SRAMÖool\n");

244 
out_‰ì
;

249 
gdev
->
ddr_vaddr
 = 
	`dma_Æloc_cohîít
(&
dev
->dev, 
exåam_poﬁ_sz
,

250 &(
gdev
->
ddr_∑ddr
), 
GFP_KERNEL
 | 
GFP_DMA
);

251 i‡(!
gdev
->
ddr_vaddr
) {

252 
	`dev_îr
(&
dev
->dev, "CouldÇotállocateÉxternal memory\n");

253 
out_‰ì
;

256 
Àn
 = 
	`ªsour˚_size
(
ªgs_¥ussio
);

257 
gdev
->
¥ussio_vaddr
 = 
	`i‹em≠
(
ªgs_¥ussio
->
°¨t
, 
Àn
);

258 i‡(!
gdev
->
¥ussio_vaddr
) {

259 
	`dev_îr
(&
dev
->dev, "Can'tÑemap PRUSS I/OáddressÑange\n");

260 
out_‰ì
;

263 i‡(
dev
->dev.
of_node
) {

264 
ªt
 = 
	`of_¥›îty_ªad_u32
(
dev
->dev.
of_node
,

266 &
gdev
->
pötc_ba£
);

267 i‡(
ªt
 < 0) {

268 
	`dev_îr
(&
dev
->dev,

270 
out_‰ì
;

273 
gdev
->
pötc_ba£
 = 
pd©a
->pintc_base;

274 
gdev
->
ho°úq_°¨t
 = 
	`∂©f‹m_gë_úq
(
dev
, 0);

276 
˙t
 = 0, 
p
 = 
gdev
->
öfo
; c¡ < 
MAX_PRUSS_EVT
; cnt++,Ö++) {

277 
p
->
mem
[0].
addr
 = 
ªgs_¥ussio
->
°¨t
;

278 
p
->
mem
[0].
size
 = 
	`ªsour˚_size
(
ªgs_¥ussio
);

279 
p
->
mem
[0].
memty≥
 = 
UIO_MEM_PHYS
;

281 #ifde‡
CONFIG_ARCH_DAVINCI_DA850


282 
p
->
mem
[1].
addr
 = 
gdev
->
§am_∑ddr
;

283 
p
->
mem
[1].
size
 = 
§am_poﬁ_sz
;

284 
p
->
mem
[1].
memty≥
 = 
UIO_MEM_PHYS
;

286 
p
->
mem
[2].
addr
 = 
gdev
->
ddr_∑ddr
;

287 
p
->
mem
[2].
size
 = 
exåam_poﬁ_sz
;

288 
p
->
mem
[2].
memty≥
 = 
UIO_MEM_PHYS
;

290 
p
->
mem
[1].
addr
 = 
gdev
->
ddr_∑ddr
;

291 
p
->
mem
[1].
size
 = 
exåam_poﬁ_sz
;

292 
p
->
mem
[1].
memty≥
 = 
UIO_MEM_PHYS
;

295 
p
->
«me
 = 
	`ka•rötf
(
GFP_KERNEL
, "¥uss_evt%d", 
˙t
);

296 
p
->
vîsi⁄
 = 
DRV_VERSION
;

299 
p
->
úq
 = 
gdev
->
ho°úq_°¨t
 + 
˙t
;

300 
p
->
h™dÀr
 = 
¥uss_h™dÀr
;

301 
p
->
¥iv
 = 
gdev
;

303 
ªt
 = 
	`uio_ªgi°î_devi˚
(&
dev
->dev, 
p
);

304 i‡(
ªt
 < 0)

305 
out_‰ì
;

307 
	`∂©f‹m_£t_drvd©a
(
dev
, 
gdev
);

310 
out_‰ì
:

311 
	`¥uss_˛ónup
(
dev
, 
gdev
);

312  
ªt
;

313 
	}
}

315 
	$¥uss_ªmove
(
∂©f‹m_devi˚
 *
dev
)

317 
uio_¥uss_dev
 *
gdev
 = 
	`∂©f‹m_gë_drvd©a
(
dev
);

319 
	`¥uss_˛ónup
(
dev
, 
gdev
);

321 
	}
}

323 c⁄° 
of_devi˚_id
 
	g¥uss_dt_ids
[] = {

324 { .
com∑tibÀ
 = "ti,¥uss-v1", .
	gd©a
 = 
NULL
, },

325 { .
	gcom∑tibÀ
 = "ti,¥uss-v2", .
	gd©a
 = 
NULL
, },

328 
MODULE_DEVICE_TABLE
(
of
, 
¥uss_dt_ids
);

330 
∂©f‹m_drivî
 
	g¥uss_drivî
 = {

331 .
¥obe
 = 
¥uss_¥obe
,

332 .
	gªmove
 = 
¥uss_ªmove
,

333 .
	gdrivî
 = {

334 .
«me
 = 
DRV_NAME
,

335 .
	gow√r
 = 
THIS_MODULE
,

336 .
	gof_m©ch_èbÀ
 = 
¥uss_dt_ids
,

340 
moduÀ_∂©f‹m_drivî
(
¥uss_drivî
);

342 
MODULE_LICENSE
("GPL v2");

343 
MODULE_VERSION
(
DRV_VERSION
);

344 
MODULE_AUTHOR
("Amit Chatterjee <amit.chatterjee@ti.com>");

345 
MODULE_AUTHOR
("Pratheesh Gangadhar <pratheesh@ti.com>");

	@
1
.
0
51
712
NXCTRL.c
NXCTRL.h
NXCTRL_app.h
NXCTRL_appEx.h
NXCTRL_bitArray.c
NXCTRL_bitArray.h
NXCTRL_bits.h
NXCTRL_lcd.c
NXCTRL_lcd.h
NXCTRL_oled.c
NXCTRL_oled.h
NXCTRL_oled_priv.h
NXCTRL_private.h
NXCTRL_registers.h
NXCTRL_types.h
adc-test.c
adcpru-test.c
ak8448-test.c
am335x-bandgap/am335x-bandgap.c
app-blank.c
app-conninfo.c
app-main.c
app-peri.c
app-spark.c
app-sysinfo.c
app-sysutil.c
app-test.c
bigbm-test.c
bit-test.c
bitmap/bitmap.h
bitmap/gen-bitmap.c
bitmap/logo.h
ctrl-app.c
dpybmp-test.c
gpio-test.c
hc-sr04-simple-test.c
hc-sr04-test.c
lcd-test.c
netlink-test.c
nxpmx/nxpmx.c
pin-info.c
pru-test.c
pru2-test.c
pwm-test.c
ram-test.c
servo-test.c
sl0-test.c
spi-test.c
ssd1306-test.c
tc.c
uio_pruss/uio_pruss.c
